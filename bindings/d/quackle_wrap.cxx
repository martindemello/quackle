/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGD
#define SWIGD
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_quackle(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_quackle(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}


#include "fixedstring.h"
#include "uv.h"
#include "alphabetparameters.h"
#include "move.h"
#include "rack.h"
#include "bag.h"
#include "board.h"
#include "boardparameters.h"
#include "evaluator.h"
#include "catchall.h"
#include "player.h"
#include "game.h"
#include "gameparameters.h"
#include "sim.h"
#include "computerplayer.h"
#include "computerplayercollection.h"
#include "datamanager.h"
#include "endgame.h"
#include "endgameplayer.h"
#include "enumerator.h"
#include "bogowinplayer.h"
#include "clock.h"
#include "generator.h"
#include "gaddag.h"
#include "lexiconparameters.h"
#include "preendgame.h"
#include "reporter.h"
#include "resolvent.h"
#include "strategyparameters.h"

#include <QString>
#include "quackleio/flexiblealphabet.h"
#include "quackleio/util.h"
#include "quackleio/logania.h"
#include "quackleio/gcgio.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< Quackle::Move > *new_std_vector_Sl_Quackle_Move_Sg___SWIG_2(std::vector< Quackle::Move >::size_type capacity){
        std::vector< Quackle::Move >* pv = 0;
        pv = new std::vector< Quackle::Move >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< Quackle::Move >::const_reference std_vector_Sl_Quackle_Move_Sg__remove__SWIG_0(std::vector< Quackle::Move > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< Quackle::Move >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< Quackle::Move >::const_reference std_vector_Sl_Quackle_Move_Sg__remove__SWIG_1(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< Quackle::Move >::iterator it = self->begin() + index;
        std::vector< Quackle::Move >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg__removeBack(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::size_type how_many){
        std::vector< Quackle::Move >::iterator end = self->end();
        std::vector< Quackle::Move >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg__linearRemove(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::size_type start_index,std::vector< Quackle::Move >::size_type end_index){
        std::vector< Quackle::Move >::iterator start = self->begin() + start_index;
        std::vector< Quackle::Move >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg__insertAt(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::size_type index,Quackle::Move const &x){
        std::vector< Quackle::Move >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< Quackle::Move >::const_reference std_vector_Sl_Quackle_Move_Sg__getElement(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_Quackle_Move_Sg__setElement(std::vector< Quackle::Move > *self,std::vector< Quackle::Move >::size_type index,Quackle::Move const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::vector< Quackle::Player > *new_std_vector_Sl_Quackle_Player_Sg___SWIG_2(std::vector< Quackle::Player >::size_type capacity){
        std::vector< Quackle::Player >* pv = 0;
        pv = new std::vector< Quackle::Player >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< Quackle::Player >::const_reference std_vector_Sl_Quackle_Player_Sg__remove__SWIG_0(std::vector< Quackle::Player > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< Quackle::Player >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< Quackle::Player >::const_reference std_vector_Sl_Quackle_Player_Sg__remove__SWIG_1(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< Quackle::Player >::iterator it = self->begin() + index;
        std::vector< Quackle::Player >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg__removeBack(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::size_type how_many){
        std::vector< Quackle::Player >::iterator end = self->end();
        std::vector< Quackle::Player >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg__linearRemove(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::size_type start_index,std::vector< Quackle::Player >::size_type end_index){
        std::vector< Quackle::Player >::iterator start = self->begin() + start_index;
        std::vector< Quackle::Player >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg__insertAt(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::size_type index,Quackle::Player const &x){
        std::vector< Quackle::Player >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< Quackle::Player >::const_reference std_vector_Sl_Quackle_Player_Sg__getElement(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_Quackle_Player_Sg__setElement(std::vector< Quackle::Player > *self,std::vector< Quackle::Player >::size_type index,Quackle::Player const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::vector< Quackle::ProbableRack > *new_std_vector_Sl_Quackle_ProbableRack_Sg___SWIG_2(std::vector< Quackle::ProbableRack >::size_type capacity){
        std::vector< Quackle::ProbableRack >* pv = 0;
        pv = new std::vector< Quackle::ProbableRack >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< Quackle::ProbableRack >::const_reference std_vector_Sl_Quackle_ProbableRack_Sg__remove__SWIG_0(std::vector< Quackle::ProbableRack > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< Quackle::ProbableRack >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< Quackle::ProbableRack >::const_reference std_vector_Sl_Quackle_ProbableRack_Sg__remove__SWIG_1(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< Quackle::ProbableRack >::iterator it = self->begin() + index;
        std::vector< Quackle::ProbableRack >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg__removeBack(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::size_type how_many){
        std::vector< Quackle::ProbableRack >::iterator end = self->end();
        std::vector< Quackle::ProbableRack >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg__linearRemove(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::size_type start_index,std::vector< Quackle::ProbableRack >::size_type end_index){
        std::vector< Quackle::ProbableRack >::iterator start = self->begin() + start_index;
        std::vector< Quackle::ProbableRack >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg__insertAt(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::size_type index,Quackle::ProbableRack const &x){
        std::vector< Quackle::ProbableRack >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< Quackle::ProbableRack >::const_reference std_vector_Sl_Quackle_ProbableRack_Sg__getElement(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_Quackle_ProbableRack_Sg__setElement(std::vector< Quackle::ProbableRack > *self,std::vector< Quackle::ProbableRack >::size_type index,Quackle::ProbableRack const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::vector< Quackle::GamePosition > *new_std_vector_Sl_Quackle_GamePosition_Sg___SWIG_2(std::vector< Quackle::GamePosition >::size_type capacity){
        std::vector< Quackle::GamePosition >* pv = 0;
        pv = new std::vector< Quackle::GamePosition >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< Quackle::GamePosition >::const_reference std_vector_Sl_Quackle_GamePosition_Sg__remove__SWIG_0(std::vector< Quackle::GamePosition > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< Quackle::GamePosition >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< Quackle::GamePosition >::const_reference std_vector_Sl_Quackle_GamePosition_Sg__remove__SWIG_1(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< Quackle::GamePosition >::iterator it = self->begin() + index;
        std::vector< Quackle::GamePosition >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg__removeBack(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::size_type how_many){
        std::vector< Quackle::GamePosition >::iterator end = self->end();
        std::vector< Quackle::GamePosition >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg__linearRemove(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::size_type start_index,std::vector< Quackle::GamePosition >::size_type end_index){
        std::vector< Quackle::GamePosition >::iterator start = self->begin() + start_index;
        std::vector< Quackle::GamePosition >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg__insertAt(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::size_type index,Quackle::GamePosition const &x){
        std::vector< Quackle::GamePosition >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< Quackle::GamePosition >::const_reference std_vector_Sl_Quackle_GamePosition_Sg__getElement(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_Quackle_GamePosition_Sg__setElement(std::vector< Quackle::GamePosition > *self,std::vector< Quackle::GamePosition >::size_type index,Quackle::GamePosition const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::vector< Quackle::LetterParameter > *new_std_vector_Sl_Quackle_LetterParameter_Sg___SWIG_2(std::vector< Quackle::LetterParameter >::size_type capacity){
        std::vector< Quackle::LetterParameter >* pv = 0;
        pv = new std::vector< Quackle::LetterParameter >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< Quackle::LetterParameter >::const_reference std_vector_Sl_Quackle_LetterParameter_Sg__remove__SWIG_0(std::vector< Quackle::LetterParameter > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< Quackle::LetterParameter >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< Quackle::LetterParameter >::const_reference std_vector_Sl_Quackle_LetterParameter_Sg__remove__SWIG_1(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< Quackle::LetterParameter >::iterator it = self->begin() + index;
        std::vector< Quackle::LetterParameter >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg__removeBack(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::size_type how_many){
        std::vector< Quackle::LetterParameter >::iterator end = self->end();
        std::vector< Quackle::LetterParameter >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg__linearRemove(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::size_type start_index,std::vector< Quackle::LetterParameter >::size_type end_index){
        std::vector< Quackle::LetterParameter >::iterator start = self->begin() + start_index;
        std::vector< Quackle::LetterParameter >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg__insertAt(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::size_type index,Quackle::LetterParameter const &x){
        std::vector< Quackle::LetterParameter >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< Quackle::LetterParameter >::const_reference std_vector_Sl_Quackle_LetterParameter_Sg__getElement(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterParameter_Sg__setElement(std::vector< Quackle::LetterParameter > *self,std::vector< Quackle::LetterParameter >::size_type index,Quackle::LetterParameter const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::vector< Quackle::LetterString > *new_std_vector_Sl_Quackle_LetterString_Sg___SWIG_2(std::vector< Quackle::FixedLengthString >::size_type capacity){
        std::vector< Quackle::FixedLengthString >* pv = 0;
        pv = new std::vector< Quackle::FixedLengthString >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< Quackle::FixedLengthString >::const_reference std_vector_Sl_Quackle_LetterString_Sg__remove__SWIG_0(std::vector< Quackle::LetterString > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< Quackle::FixedLengthString >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN std::vector< Quackle::FixedLengthString >::const_reference std_vector_Sl_Quackle_LetterString_Sg__remove__SWIG_1(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< Quackle::FixedLengthString >::iterator it = self->begin() + index;
        std::vector< Quackle::FixedLengthString >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg__removeBack(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::size_type how_many){
        std::vector< Quackle::FixedLengthString >::iterator end = self->end();
        std::vector< Quackle::FixedLengthString >::iterator start = end - how_many;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg__linearRemove(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::size_type start_index,std::vector< Quackle::FixedLengthString >::size_type end_index){
        std::vector< Quackle::FixedLengthString >::iterator start = self->begin() + start_index;
        std::vector< Quackle::FixedLengthString >::iterator end = self->begin() + end_index;
        self->erase(start, end);
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg__insertAt(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::size_type index,Quackle::FixedLengthString const &x){
        std::vector< Quackle::FixedLengthString >::iterator it = self->begin() + index;
        self->insert(it, x);
      }
SWIGINTERN std::vector< Quackle::FixedLengthString >::const_reference std_vector_Sl_Quackle_LetterString_Sg__getElement(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_Quackle_LetterString_Sg__setElement(std::vector< Quackle::LetterString > *self,std::vector< Quackle::FixedLengthString >::size_type index,Quackle::FixedLengthString const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int D_FIXED_STRING_MAXIMUM_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(40);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_FixedLengthString__SWIG_0() {
  void * jresult ;
  Quackle::FixedLengthString *result = 0 ;
  
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_FixedLengthString__SWIG_1(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Quackle::FixedLengthString::size_type arg2 ;
  Quackle::FixedLengthString *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (Quackle::FixedLengthString::size_type)jarg2;
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_FixedLengthString__SWIG_2(unsigned int jarg1, char jarg2) {
  void * jresult ;
  Quackle::FixedLengthString::size_type arg1 ;
  char arg2 ;
  Quackle::FixedLengthString *result = 0 ;
  
  arg1 = (Quackle::FixedLengthString::size_type)jarg1;
  arg2 = (char)jarg2;
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_FixedLengthString__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_FixedLengthString__SWIG_4(void * jarg1) {
  void * jresult ;
  Quackle::FixedLengthString *arg1 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  result = (Quackle::FixedLengthString *)new Quackle::FixedLengthString((Quackle::FixedLengthString const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_FixedLengthString_begin__SWIG_0(void * jarg1) {
  char * jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::const_iterator result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  result = (Quackle::FixedLengthString::const_iterator)((Quackle::FixedLengthString const *)arg1)->begin();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * D_FixedLengthString_end__SWIG_0(void * jarg1) {
  char * jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::const_iterator result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  result = (Quackle::FixedLengthString::const_iterator)((Quackle::FixedLengthString const *)arg1)->end();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_FixedLengthString_erase(void * jarg1, char * jarg2) {
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::iterator arg2 = (Quackle::FixedLengthString::iterator) (Quackle::FixedLengthString::iterator)0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (Quackle::FixedLengthString::iterator)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT unsigned int D_FixedLengthString_length(void * jarg1) {
  unsigned int jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::size_type result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  result = (Quackle::FixedLengthString::size_type)((Quackle::FixedLengthString const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_FixedLengthString_substr(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::size_type arg2 ;
  Quackle::FixedLengthString::size_type arg3 ;
  Quackle::FixedLengthString result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (Quackle::FixedLengthString::size_type)jarg2;
  arg3 = (Quackle::FixedLengthString::size_type)jarg3;
  result = ((Quackle::FixedLengthString const *)arg1)->substr(arg2,arg3);
  jresult = new Quackle::FixedLengthString((const Quackle::FixedLengthString &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_FixedLengthString_empty(void * jarg1) {
  unsigned int jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  bool result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  result = (bool)((Quackle::FixedLengthString const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_FixedLengthString_size(void * jarg1) {
  unsigned int jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::size_type result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  result = (Quackle::FixedLengthString::size_type)((Quackle::FixedLengthString const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_FixedLengthString_clear(void * jarg1) {
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_FixedLengthString_push_back(void * jarg1, char jarg2) {
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  char arg2 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (char)jarg2;
  (arg1)->push_back(arg2);
}


SWIGEXPORT void D_FixedLengthString_pop_back(void * jarg1) {
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT char * D_FixedLengthString_constData(void * jarg1) {
  char * jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  char *result = 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  result = (char *)((Quackle::FixedLengthString const *)arg1)->constData();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int D_FixedLengthString_compare(void * jarg1, void * jarg2) {
  int jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  int result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (Quackle::FixedLengthString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  result = (int)((Quackle::FixedLengthString const *)arg1)->compare((Quackle::FixedLengthString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_FixedLengthString_swigOpAddAssign__SWIG_0(void * jarg1, char jarg2) {
  void * jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  char arg2 ;
  Quackle::FixedLengthString *result = 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (char)jarg2;
  result = (Quackle::FixedLengthString *) &(arg1)->operator +=(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_FixedLengthString_swigOpAddAssign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  Quackle::FixedLengthString *result = 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (Quackle::FixedLengthString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  result = (Quackle::FixedLengthString *) &(arg1)->operator +=((Quackle::FixedLengthString const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char D_FixedLengthString_opIndex(void * jarg1, unsigned int jarg2) {
  char jresult ;
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  Quackle::FixedLengthString::size_type arg2 ;
  char *result = 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  arg2 = (Quackle::FixedLengthString::size_type)jarg2;
  result = (char *) &((Quackle::FixedLengthString const *)arg1)->operator [](arg2);
  jresult = *result;
  return jresult;
}


SWIGEXPORT unsigned int D_FixedLengthString_maxSize_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)Quackle::FixedLengthString::maxSize;
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_FixedLengthString(void * jarg1) {
  Quackle::FixedLengthString *arg1 = (Quackle::FixedLengthString *) 0 ;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_swigOpAdd__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::FixedLengthString *arg1 = 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  Quackle::FixedLengthString result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  arg2 = (Quackle::FixedLengthString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  result = Quackle::operator +((Quackle::FixedLengthString const &)*arg1,(Quackle::FixedLengthString const &)*arg2);
  jresult = new Quackle::FixedLengthString((const Quackle::FixedLengthString &)result); 
  return jresult;
}


SWIGEXPORT void * D_swigOpAdd__SWIG_1(char jarg1, void * jarg2) {
  void * jresult ;
  char arg1 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  Quackle::FixedLengthString result;
  
  arg1 = (char)jarg1;
  arg2 = (Quackle::FixedLengthString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  result = Quackle::operator +(arg1,(Quackle::FixedLengthString const &)*arg2);
  jresult = new Quackle::FixedLengthString((const Quackle::FixedLengthString &)result); 
  return jresult;
}


SWIGEXPORT void * D_swigOpAdd__SWIG_2(void * jarg1, char jarg2) {
  void * jresult ;
  Quackle::FixedLengthString *arg1 = 0 ;
  char arg2 ;
  Quackle::FixedLengthString result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  arg2 = (char)jarg2;
  result = Quackle::operator +((Quackle::FixedLengthString const &)*arg1,arg2);
  jresult = new Quackle::FixedLengthString((const Quackle::FixedLengthString &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_swigOpLt__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::FixedLengthString *arg1 = 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::FixedLengthString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  arg2 = (Quackle::FixedLengthString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return 0;
  } 
  result = (bool)Quackle::operator <((Quackle::FixedLengthString const &)*arg1,(Quackle::FixedLengthString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_USE_WCHAR_FOR_USER_VISIBLE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_MAXIMUM_ALPHABET_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(55);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_MINIMUM_ALPHABET_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_QUACKLE_NULL_MARK_TEXT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(" ");
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int D_QUACKLE_NULL_MARK_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_BLANK_MARK_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_PLAYED_THRU_MARK_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_PLAYTHRU_START_MARK_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_PLAYTHRU_END_MARK_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_FIRST_LETTER_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_BLANK_OFFSET_get() {
  int jresult ;
  int result;
  
  result = (int)(55);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_LETTER_STRING_MAXIMUM_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(40);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_left(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  int arg2 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  arg2 = (int)jarg2;
  result = Quackle::String::left((Quackle::FixedLengthString const &)*arg1,arg2);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_alphabetize(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = Quackle::String::alphabetize((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_clearBlankness(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = Quackle::String::clearBlankness((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_setBlankness(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = Quackle::String::setBlankness((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_usedTiles(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = Quackle::String::usedTiles((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void D_counts__SWIG_0(void * jarg1, char * jarg2) {
  Quackle::LetterString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  arg2 = (char *)jarg2; 
  Quackle::String::counts((Quackle::FixedLengthString const &)*arg1,arg2);
}


SWIGEXPORT void D_counts__SWIG_1(char * jarg1, char * jarg2) {
  Quackle::LongLetterString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  Quackle::LongLetterString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  Quackle::String::counts((std::string const &)*arg1,arg2);
}


SWIGEXPORT unsigned char D_back(void * jarg1) {
  unsigned char jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (Quackle::Letter)Quackle::String::back((Quackle::FixedLengthString const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_pop_back(void * jarg1) {
  Quackle::LetterString *arg1 = 0 ;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString & type is null");
    return ;
  } 
  Quackle::String::pop_back(*arg1);
}


SWIGEXPORT unsigned char D_front(void * jarg1) {
  unsigned char jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (Quackle::Letter)Quackle::String::front((Quackle::FixedLengthString const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_pop_front(void * jarg1) {
  Quackle::LetterString *arg1 = 0 ;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString & type is null");
    return ;
  } 
  Quackle::String::pop_front(*arg1);
}


SWIGEXPORT void * D_allButFront(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = Quackle::String::allButFront((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameter__SWIG_0() {
  void * jresult ;
  Quackle::LetterParameter *result = 0 ;
  
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameter__SWIG_1(unsigned char jarg1) {
  void * jresult ;
  Quackle::Letter arg1 ;
  Quackle::LetterParameter *result = 0 ;
  
  arg1 = (Quackle::Letter)jarg1;
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameter__SWIG_2(unsigned char jarg1, char * jarg2, char * jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  void * jresult ;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  Quackle::LetterParameter *result = 0 ;
  
  arg1 = (Quackle::Letter)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = jarg6 ? true : false;
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3,arg4,arg5,arg6);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameter__SWIG_3(unsigned char jarg1, char * jarg2, char * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  Quackle::LetterParameter *result = 0 ;
  
  arg1 = (Quackle::Letter)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3,arg4,arg5);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameter__SWIG_4(unsigned char jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  int arg4 ;
  Quackle::LetterParameter *result = 0 ;
  
  arg1 = (Quackle::Letter)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4;
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameter__SWIG_5(unsigned char jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Quackle::Letter arg1 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = 0 ;
  Quackle::LetterParameter *result = 0 ;
  
  arg1 = (Quackle::Letter)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (Quackle::LetterParameter *)new Quackle::LetterParameter(arg1,(UVString const &)*arg2,(UVString const &)*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_LetterParameter_text(void * jarg1) {
  char * jresult ;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  UVString result;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  result = ((Quackle::LetterParameter const *)arg1)->text();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LetterParameter_setText(void * jarg1, char * jarg2) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setText((UVString const &)*arg2);
}


SWIGEXPORT char * D_LetterParameter_blankText(void * jarg1) {
  char * jresult ;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  UVString result;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  result = ((Quackle::LetterParameter const *)arg1)->blankText();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LetterParameter_setBlankText(void * jarg1, char * jarg2) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setBlankText((UVString const &)*arg2);
}


SWIGEXPORT unsigned char D_LetterParameter_letter(void * jarg1) {
  unsigned char jresult ;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  result = (Quackle::Letter)((Quackle::LetterParameter const *)arg1)->letter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterParameter_setLetter(void * jarg1, unsigned char jarg2) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  Quackle::Letter arg2 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  (arg1)->setLetter(arg2);
}


SWIGEXPORT int D_LetterParameter_score(void * jarg1) {
  int jresult ;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  int result;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  result = (int)((Quackle::LetterParameter const *)arg1)->score();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterParameter_setScore(void * jarg1, int jarg2) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setScore(arg2);
}


SWIGEXPORT int D_LetterParameter_count(void * jarg1) {
  int jresult ;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  int result;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  result = (int)((Quackle::LetterParameter const *)arg1)->count();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterParameter_setCount(void * jarg1, int jarg2) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setCount(arg2);
}


SWIGEXPORT unsigned int D_LetterParameter_isVowel(void * jarg1) {
  unsigned int jresult ;
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  bool result;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  result = (bool)((Quackle::LetterParameter const *)arg1)->isVowel();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterParameter_setVowel(void * jarg1, unsigned int jarg2) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setVowel(arg2);
}


SWIGEXPORT void D_delete_LetterParameter(void * jarg1) {
  Quackle::LetterParameter *arg1 = (Quackle::LetterParameter *) 0 ;
  
  arg1 = (Quackle::LetterParameter *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_AlphabetParameters() {
  void * jresult ;
  Quackle::AlphabetParameters *result = 0 ;
  
  result = (Quackle::AlphabetParameters *)new Quackle::AlphabetParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_AlphabetParameters_length(void * jarg1) {
  int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  result = (int)((Quackle::AlphabetParameters const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned char D_AlphabetParameters_firstLetter(void * jarg1) {
  unsigned char jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->firstLetter();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned char D_AlphabetParameters_lastLetter(void * jarg1) {
  unsigned char jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->lastLetter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_AlphabetParameters_setAlphabet(void * jarg1, void * jarg2) {
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Alphabet *arg2 = 0 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Alphabet *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Alphabet const & type is null");
    return ;
  } 
  (arg1)->setAlphabet((Quackle::Alphabet const &)*arg2);
}


SWIGEXPORT void * D_AlphabetParameters_letterParameter(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::LetterParameter *result = 0 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (Quackle::LetterParameter *) &((Quackle::AlphabetParameters const *)arg1)->letterParameter(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_AlphabetParameters_setLetterParameter(void * jarg1, unsigned char jarg2, void * jarg3) {
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::LetterParameter *arg3 = 0 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  arg3 = (Quackle::LetterParameter *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterParameter const & type is null");
    return ;
  } 
  (arg1)->setLetterParameter(arg2,(Quackle::LetterParameter const &)*arg3);
}


SWIGEXPORT void * D_AlphabetParameters_emptyAlphabet() {
  void * jresult ;
  Quackle::Alphabet result;
  
  result = Quackle::AlphabetParameters::emptyAlphabet();
  jresult = new Quackle::Alphabet((const Quackle::Alphabet &)result); 
  return jresult;
}


SWIGEXPORT void D_AlphabetParameters_setCount(void * jarg1, unsigned char jarg2, int jarg3) {
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  int arg3 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  arg3 = (int)jarg3;
  (arg1)->setCount(arg2,arg3);
}


SWIGEXPORT void D_AlphabetParameters_setScore(void * jarg1, unsigned char jarg2, int jarg3) {
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  int arg3 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  arg3 = (int)jarg3;
  (arg1)->setScore(arg2,arg3);
}


SWIGEXPORT unsigned int D_AlphabetParameters_isBlankLetter(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  bool result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isBlankLetter(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned char D_AlphabetParameters_clearBlankness__SWIG_0(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->clearBlankness(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_AlphabetParameters_clearBlankness__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = ((Quackle::AlphabetParameters const *)arg1)->clearBlankness((Quackle::LetterString const &)*arg2);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT unsigned char D_AlphabetParameters_setBlankness(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (Quackle::Letter)((Quackle::AlphabetParameters const *)arg1)->setBlankness(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_AlphabetParameters_isPlainLetter(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  bool result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isPlainLetter(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_AlphabetParameters_isSomeLetter(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  bool result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isSomeLetter(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_AlphabetParameters_count(void * jarg1, unsigned char jarg2) {
  int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  int result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (int)((Quackle::AlphabetParameters const *)arg1)->count(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_AlphabetParameters_score(void * jarg1, unsigned char jarg2) {
  int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  int result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (int)((Quackle::AlphabetParameters const *)arg1)->score(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_AlphabetParameters_isVowel(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  bool result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (bool)((Quackle::AlphabetParameters const *)arg1)->isVowel(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_AlphabetParameters_userVisible__SWIG_0(void * jarg1, void * jarg2) {
  char * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  UVString result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = ((Quackle::AlphabetParameters const *)arg1)->userVisible((Quackle::LetterString const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_AlphabetParameters_userVisible__SWIG_1(void * jarg1, unsigned char jarg2) {
  char * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  Quackle::Letter arg2 ;
  UVString result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = ((Quackle::AlphabetParameters const *)arg1)->userVisible(arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_AlphabetParameters_encode__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  UVString *arg2 = 0 ;
  UVString *arg3 = (UVString *) 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (UVString *)jarg3;
  result = ((Quackle::AlphabetParameters const *)arg1)->encode((UVString const &)*arg2,arg3);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_AlphabetParameters_encode__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  UVString *arg2 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((Quackle::AlphabetParameters const *)arg1)->encode((UVString const &)*arg2);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT char * D_AlphabetParameters_alphabetName(void * jarg1) {
  char * jresult ;
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  std::string result;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  result = ((Quackle::AlphabetParameters const *)arg1)->alphabetName();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_AlphabetParameters_setAlphabetName(void * jarg1, char * jarg2) {
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setAlphabetName((std::string const &)*arg2);
}


SWIGEXPORT char * D_AlphabetParameters_findAlphabetFile(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = Quackle::AlphabetParameters::findAlphabetFile((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_delete_AlphabetParameters(void * jarg1) {
  Quackle::AlphabetParameters *arg1 = (Quackle::AlphabetParameters *) 0 ;
  
  arg1 = (Quackle::AlphabetParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_EnglishAlphabetParameters() {
  void * jresult ;
  Quackle::EnglishAlphabetParameters *result = 0 ;
  
  result = (Quackle::EnglishAlphabetParameters *)new Quackle::EnglishAlphabetParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_EnglishAlphabetParameters(void * jarg1) {
  Quackle::EnglishAlphabetParameters *arg1 = (Quackle::EnglishAlphabetParameters *) 0 ;
  
  arg1 = (Quackle::EnglishAlphabetParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_MoveVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  result = (bool)((std::vector< Quackle::Move > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MoveVector_clear(void * jarg1) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_MoveVector_push_back(void * jarg1, void * jarg2) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->push_back((Quackle::Move const &)*arg2);
}


SWIGEXPORT void D_MoveVector_pop_back(void * jarg1) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_MoveVector_size(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type result;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  result = ((std::vector< Quackle::Move > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_MoveVector_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type result;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  result = ((std::vector< Quackle::Move > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MoveVector_reserve(void * jarg1, size_t jarg2) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_MoveVector__SWIG_0() {
  void * jresult ;
  std::vector< Quackle::Move > *result = 0 ;
  
  result = (std::vector< Quackle::Move > *)new std::vector< Quackle::Move >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_MoveVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::Move > *arg1 = 0 ;
  std::vector< Quackle::Move > *result = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< Quackle::Move > const & type is null");
    return 0;
  } 
  result = (std::vector< Quackle::Move > *)new std::vector< Quackle::Move >((std::vector< Quackle::Move > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_MoveVector__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< Quackle::Move >::size_type arg1 ;
  std::vector< Quackle::Move > *result = 0 ;
  
  arg1 = (std::vector< Quackle::Move >::size_type)jarg1;
  try {
    result = (std::vector< Quackle::Move > *)new_std_vector_Sl_Quackle_Move_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_MoveVector_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  try {
    result = (std::vector< Quackle::Move >::value_type *) &std_vector_Sl_Quackle_Move_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_MoveVector_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  std::vector< Quackle::Move >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::Move >::value_type *) &std_vector_Sl_Quackle_Move_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MoveVector_removeBack(void * jarg1, size_t jarg2) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  try {
    std_vector_Sl_Quackle_Move_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_MoveVector_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  std::vector< Quackle::Move >::size_type arg3 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  arg3 = (std::vector< Quackle::Move >::size_type)jarg3;
  try {
    std_vector_Sl_Quackle_Move_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_MoveVector_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  Quackle::Move *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_Move_Sg__insertAt(arg1,arg2,(Quackle::Move const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_MoveVector_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  std::vector< Quackle::Move >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::Move >::value_type *) &std_vector_Sl_Quackle_Move_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MoveVector_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  std::vector< Quackle::Move >::size_type arg2 ;
  Quackle::Move *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  arg2 = (std::vector< Quackle::Move >::size_type)jarg2;
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_Move_Sg__setElement(arg1,arg2,(Quackle::Move const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_MoveVector(void * jarg1) {
  std::vector< Quackle::Move > *arg1 = (std::vector< Quackle::Move > *) 0 ;
  
  arg1 = (std::vector< Quackle::Move > *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_PlayerVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  result = (bool)((std::vector< Quackle::Player > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_PlayerVector_clear(void * jarg1) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_PlayerVector_push_back(void * jarg1, void * jarg2) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  Quackle::Player *arg2 = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (Quackle::Player *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return ;
  } 
  (arg1)->push_back((Quackle::Player const &)*arg2);
}


SWIGEXPORT void D_PlayerVector_pop_back(void * jarg1) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_PlayerVector_size(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type result;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  result = ((std::vector< Quackle::Player > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_PlayerVector_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type result;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  result = ((std::vector< Quackle::Player > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_PlayerVector_reserve(void * jarg1, size_t jarg2) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_PlayerVector__SWIG_0() {
  void * jresult ;
  std::vector< Quackle::Player > *result = 0 ;
  
  result = (std::vector< Quackle::Player > *)new std::vector< Quackle::Player >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_PlayerVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::Player > *arg1 = 0 ;
  std::vector< Quackle::Player > *result = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< Quackle::Player > const & type is null");
    return 0;
  } 
  result = (std::vector< Quackle::Player > *)new std::vector< Quackle::Player >((std::vector< Quackle::Player > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_PlayerVector__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< Quackle::Player >::size_type arg1 ;
  std::vector< Quackle::Player > *result = 0 ;
  
  arg1 = (std::vector< Quackle::Player >::size_type)jarg1;
  try {
    result = (std::vector< Quackle::Player > *)new_std_vector_Sl_Quackle_Player_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_PlayerVector_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  try {
    result = (std::vector< Quackle::Player >::value_type *) &std_vector_Sl_Quackle_Player_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_PlayerVector_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  std::vector< Quackle::Player >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::Player >::value_type *) &std_vector_Sl_Quackle_Player_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_PlayerVector_removeBack(void * jarg1, size_t jarg2) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  try {
    std_vector_Sl_Quackle_Player_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_PlayerVector_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  std::vector< Quackle::Player >::size_type arg3 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  arg3 = (std::vector< Quackle::Player >::size_type)jarg3;
  try {
    std_vector_Sl_Quackle_Player_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_PlayerVector_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  Quackle::Player *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  arg3 = (Quackle::Player *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_Player_Sg__insertAt(arg1,arg2,(Quackle::Player const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_PlayerVector_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  std::vector< Quackle::Player >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::Player >::value_type *) &std_vector_Sl_Quackle_Player_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_PlayerVector_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  std::vector< Quackle::Player >::size_type arg2 ;
  Quackle::Player *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  arg2 = (std::vector< Quackle::Player >::size_type)jarg2;
  arg3 = (Quackle::Player *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_Player_Sg__setElement(arg1,arg2,(Quackle::Player const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_PlayerVector(void * jarg1) {
  std::vector< Quackle::Player > *arg1 = (std::vector< Quackle::Player > *) 0 ;
  
  arg1 = (std::vector< Quackle::Player > *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_ProbableRackList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  result = (bool)((std::vector< Quackle::ProbableRack > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ProbableRackList_clear(void * jarg1) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_ProbableRackList_push_back(void * jarg1, void * jarg2) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  Quackle::ProbableRack *arg2 = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (Quackle::ProbableRack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::ProbableRack const & type is null");
    return ;
  } 
  (arg1)->push_back((Quackle::ProbableRack const &)*arg2);
}


SWIGEXPORT void D_ProbableRackList_pop_back(void * jarg1) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_ProbableRackList_size(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type result;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  result = ((std::vector< Quackle::ProbableRack > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_ProbableRackList_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type result;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  result = ((std::vector< Quackle::ProbableRack > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ProbableRackList_reserve(void * jarg1, size_t jarg2) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_ProbableRackList__SWIG_0() {
  void * jresult ;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  result = (std::vector< Quackle::ProbableRack > *)new std::vector< Quackle::ProbableRack >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_ProbableRackList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = 0 ;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< Quackle::ProbableRack > const & type is null");
    return 0;
  } 
  result = (std::vector< Quackle::ProbableRack > *)new std::vector< Quackle::ProbableRack >((std::vector< Quackle::ProbableRack > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_ProbableRackList__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< Quackle::ProbableRack >::size_type arg1 ;
  std::vector< Quackle::ProbableRack > *result = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack >::size_type)jarg1;
  try {
    result = (std::vector< Quackle::ProbableRack > *)new_std_vector_Sl_Quackle_ProbableRack_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_ProbableRackList_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  try {
    result = (std::vector< Quackle::ProbableRack >::value_type *) &std_vector_Sl_Quackle_ProbableRack_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_ProbableRackList_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  std::vector< Quackle::ProbableRack >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::ProbableRack >::value_type *) &std_vector_Sl_Quackle_ProbableRack_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ProbableRackList_removeBack(void * jarg1, size_t jarg2) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_ProbableRackList_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  std::vector< Quackle::ProbableRack >::size_type arg3 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  arg3 = (std::vector< Quackle::ProbableRack >::size_type)jarg3;
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_ProbableRackList_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  Quackle::ProbableRack *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  arg3 = (Quackle::ProbableRack *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::ProbableRack const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg__insertAt(arg1,arg2,(Quackle::ProbableRack const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_ProbableRackList_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  std::vector< Quackle::ProbableRack >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::ProbableRack >::value_type *) &std_vector_Sl_Quackle_ProbableRack_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ProbableRackList_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  std::vector< Quackle::ProbableRack >::size_type arg2 ;
  Quackle::ProbableRack *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  arg2 = (std::vector< Quackle::ProbableRack >::size_type)jarg2;
  arg3 = (Quackle::ProbableRack *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::ProbableRack const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_ProbableRack_Sg__setElement(arg1,arg2,(Quackle::ProbableRack const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_ProbableRackList(void * jarg1) {
  std::vector< Quackle::ProbableRack > *arg1 = (std::vector< Quackle::ProbableRack > *) 0 ;
  
  arg1 = (std::vector< Quackle::ProbableRack > *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_PositionList_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  result = (bool)((std::vector< Quackle::GamePosition > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_PositionList_clear(void * jarg1) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_PositionList_push_back(void * jarg1, void * jarg2) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  (arg1)->push_back((Quackle::GamePosition const &)*arg2);
}


SWIGEXPORT void D_PositionList_pop_back(void * jarg1) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_PositionList_size(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type result;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  result = ((std::vector< Quackle::GamePosition > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_PositionList_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type result;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  result = ((std::vector< Quackle::GamePosition > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_PositionList_reserve(void * jarg1, size_t jarg2) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_PositionList__SWIG_0() {
  void * jresult ;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  result = (std::vector< Quackle::GamePosition > *)new std::vector< Quackle::GamePosition >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_PositionList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::GamePosition > *arg1 = 0 ;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< Quackle::GamePosition > const & type is null");
    return 0;
  } 
  result = (std::vector< Quackle::GamePosition > *)new std::vector< Quackle::GamePosition >((std::vector< Quackle::GamePosition > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_PositionList__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< Quackle::GamePosition >::size_type arg1 ;
  std::vector< Quackle::GamePosition > *result = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition >::size_type)jarg1;
  try {
    result = (std::vector< Quackle::GamePosition > *)new_std_vector_Sl_Quackle_GamePosition_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_PositionList_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  try {
    result = (std::vector< Quackle::GamePosition >::value_type *) &std_vector_Sl_Quackle_GamePosition_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_PositionList_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  std::vector< Quackle::GamePosition >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::GamePosition >::value_type *) &std_vector_Sl_Quackle_GamePosition_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_PositionList_removeBack(void * jarg1, size_t jarg2) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  try {
    std_vector_Sl_Quackle_GamePosition_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_PositionList_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  std::vector< Quackle::GamePosition >::size_type arg3 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  arg3 = (std::vector< Quackle::GamePosition >::size_type)jarg3;
  try {
    std_vector_Sl_Quackle_GamePosition_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_PositionList_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  Quackle::GamePosition *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  arg3 = (Quackle::GamePosition *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_GamePosition_Sg__insertAt(arg1,arg2,(Quackle::GamePosition const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_PositionList_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  std::vector< Quackle::GamePosition >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::GamePosition >::value_type *) &std_vector_Sl_Quackle_GamePosition_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_PositionList_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  std::vector< Quackle::GamePosition >::size_type arg2 ;
  Quackle::GamePosition *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  arg2 = (std::vector< Quackle::GamePosition >::size_type)jarg2;
  arg3 = (Quackle::GamePosition *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_GamePosition_Sg__setElement(arg1,arg2,(Quackle::GamePosition const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_PositionList(void * jarg1) {
  std::vector< Quackle::GamePosition > *arg1 = (std::vector< Quackle::GamePosition > *) 0 ;
  
  arg1 = (std::vector< Quackle::GamePosition > *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_LetterParameterVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  result = (bool)((std::vector< Quackle::LetterParameter > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterParameterVector_clear(void * jarg1) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_LetterParameterVector_push_back(void * jarg1, void * jarg2) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  Quackle::LetterParameter *arg2 = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (Quackle::LetterParameter *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterParameter const & type is null");
    return ;
  } 
  (arg1)->push_back((Quackle::LetterParameter const &)*arg2);
}


SWIGEXPORT void D_LetterParameterVector_pop_back(void * jarg1) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_LetterParameterVector_size(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type result;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  result = ((std::vector< Quackle::LetterParameter > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_LetterParameterVector_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type result;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  result = ((std::vector< Quackle::LetterParameter > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterParameterVector_reserve(void * jarg1, size_t jarg2) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_LetterParameterVector__SWIG_0() {
  void * jresult ;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  result = (std::vector< Quackle::LetterParameter > *)new std::vector< Quackle::LetterParameter >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameterVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = 0 ;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< Quackle::LetterParameter > const & type is null");
    return 0;
  } 
  result = (std::vector< Quackle::LetterParameter > *)new std::vector< Quackle::LetterParameter >((std::vector< Quackle::LetterParameter > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterParameterVector__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< Quackle::LetterParameter >::size_type arg1 ;
  std::vector< Quackle::LetterParameter > *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter >::size_type)jarg1;
  try {
    result = (std::vector< Quackle::LetterParameter > *)new_std_vector_Sl_Quackle_LetterParameter_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_LetterParameterVector_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  try {
    result = (std::vector< Quackle::LetterParameter >::value_type *) &std_vector_Sl_Quackle_LetterParameter_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_LetterParameterVector_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  std::vector< Quackle::LetterParameter >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::LetterParameter >::value_type *) &std_vector_Sl_Quackle_LetterParameter_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LetterParameterVector_removeBack(void * jarg1, size_t jarg2) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_LetterParameterVector_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  std::vector< Quackle::LetterParameter >::size_type arg3 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  arg3 = (std::vector< Quackle::LetterParameter >::size_type)jarg3;
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_LetterParameterVector_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  Quackle::LetterParameter *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  arg3 = (Quackle::LetterParameter *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterParameter const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg__insertAt(arg1,arg2,(Quackle::LetterParameter const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_LetterParameterVector_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  std::vector< Quackle::LetterParameter >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::LetterParameter >::value_type *) &std_vector_Sl_Quackle_LetterParameter_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LetterParameterVector_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  std::vector< Quackle::LetterParameter >::size_type arg2 ;
  Quackle::LetterParameter *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  arg2 = (std::vector< Quackle::LetterParameter >::size_type)jarg2;
  arg3 = (Quackle::LetterParameter *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterParameter const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_LetterParameter_Sg__setElement(arg1,arg2,(Quackle::LetterParameter const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_LetterParameterVector(void * jarg1) {
  std::vector< Quackle::LetterParameter > *arg1 = (std::vector< Quackle::LetterParameter > *) 0 ;
  
  arg1 = (std::vector< Quackle::LetterParameter > *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_LetterStringVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  result = (bool)((std::vector< Quackle::LetterString > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterStringVector_clear(void * jarg1) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_LetterStringVector_push_back(void * jarg1, void * jarg2) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  Quackle::FixedLengthString *arg2 = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (Quackle::FixedLengthString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return ;
  } 
  (arg1)->push_back((Quackle::FixedLengthString const &)*arg2);
}


SWIGEXPORT void D_LetterStringVector_pop_back(void * jarg1) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  (arg1)->pop_back();
}


SWIGEXPORT size_t D_LetterStringVector_size(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type result;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  result = ((std::vector< Quackle::LetterString > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_LetterStringVector_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type result;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  result = ((std::vector< Quackle::LetterString > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LetterStringVector_reserve(void * jarg1, size_t jarg2) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_new_LetterStringVector__SWIG_0() {
  void * jresult ;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  result = (std::vector< Quackle::LetterString > *)new std::vector< Quackle::LetterString >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterStringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::LetterString > *arg1 = 0 ;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< Quackle::LetterString > const & type is null");
    return 0;
  } 
  result = (std::vector< Quackle::LetterString > *)new std::vector< Quackle::LetterString >((std::vector< Quackle::LetterString > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LetterStringVector__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< Quackle::FixedLengthString >::size_type arg1 ;
  std::vector< Quackle::LetterString > *result = 0 ;
  
  arg1 = (std::vector< Quackle::FixedLengthString >::size_type)jarg1;
  try {
    result = (std::vector< Quackle::LetterString > *)new_std_vector_Sl_Quackle_LetterString_Sg___SWIG_2(arg1);
  } catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_LetterStringVector_remove__SWIG_0(void * jarg1) {
  void * jresult ;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  try {
    result = (std::vector< Quackle::FixedLengthString >::value_type *) &std_vector_Sl_Quackle_LetterString_Sg__remove__SWIG_0(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_LetterStringVector_remove__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  std::vector< Quackle::FixedLengthString >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::FixedLengthString >::value_type *) &std_vector_Sl_Quackle_LetterString_Sg__remove__SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LetterStringVector_removeBack(void * jarg1, size_t jarg2) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  try {
    std_vector_Sl_Quackle_LetterString_Sg__removeBack(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_LetterStringVector_linearRemove(void * jarg1, size_t jarg2, size_t jarg3) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  std::vector< Quackle::FixedLengthString >::size_type arg3 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  arg3 = (std::vector< Quackle::FixedLengthString >::size_type)jarg3;
  try {
    std_vector_Sl_Quackle_LetterString_Sg__linearRemove(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_LetterStringVector_insertAt(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  Quackle::FixedLengthString *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  arg3 = (Quackle::FixedLengthString *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_LetterString_Sg__insertAt(arg1,arg2,(Quackle::FixedLengthString const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void * D_LetterStringVector_getElement(void * jarg1, size_t jarg2) {
  void * jresult ;
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  std::vector< Quackle::FixedLengthString >::value_type *result = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  try {
    result = (std::vector< Quackle::FixedLengthString >::value_type *) &std_vector_Sl_Quackle_LetterString_Sg__getElement(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LetterStringVector_setElement(void * jarg1, size_t jarg2, void * jarg3) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  std::vector< Quackle::FixedLengthString >::size_type arg2 ;
  Quackle::FixedLengthString *arg3 = 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  arg2 = (std::vector< Quackle::FixedLengthString >::size_type)jarg2;
  arg3 = (Quackle::FixedLengthString *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::FixedLengthString const & type is null");
    return ;
  } 
  try {
    std_vector_Sl_Quackle_LetterString_Sg__setElement(arg1,arg2,(Quackle::FixedLengthString const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void D_delete_LetterStringVector(void * jarg1) {
  std::vector< Quackle::LetterString > *arg1 = (std::vector< Quackle::LetterString > *) 0 ;
  
  arg1 = (std::vector< Quackle::LetterString > *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Move_score_set(void * jarg1, int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT int D_Move_score_get(void * jarg1) {
  int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (int) ((arg1)->score);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_isBingo_set(void * jarg1, unsigned int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->isBingo = arg2;
}


SWIGEXPORT unsigned int D_Move_isBingo_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (bool) ((arg1)->isBingo);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Move_effectiveScore(void * jarg1) {
  int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (int)((Quackle::Move const *)arg1)->effectiveScore();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_equity_set(void * jarg1, double jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->equity = arg2;
}


SWIGEXPORT double D_Move_equity_get(void * jarg1) {
  double jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (double) ((arg1)->equity);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_win_set(void * jarg1, double jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->win = arg2;
}


SWIGEXPORT double D_Move_win_get(void * jarg1) {
  double jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (double) ((arg1)->win);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_possibleWin_set(void * jarg1, double jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->possibleWin = arg2;
}


SWIGEXPORT double D_Move_possibleWin_get(void * jarg1) {
  double jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  double result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (double) ((arg1)->possibleWin);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_action_set(void * jarg1, int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::Move::Action arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (Quackle::Move::Action)jarg2; 
  if (arg1) (arg1)->action = arg2;
}


SWIGEXPORT int D_Move_action_get(void * jarg1) {
  int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::Move::Action result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (Quackle::Move::Action) ((arg1)->action);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void D_Move_horizontal_set(void * jarg1, unsigned int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->horizontal = arg2;
}


SWIGEXPORT unsigned int D_Move_horizontal_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (bool) ((arg1)->horizontal);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_startrow_set(void * jarg1, int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->startrow = arg2;
}


SWIGEXPORT int D_Move_startrow_get(void * jarg1) {
  int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (int) ((arg1)->startrow);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_startcol_set(void * jarg1, int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->startcol = arg2;
}


SWIGEXPORT int D_Move_startcol_get(void * jarg1) {
  int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (int) ((arg1)->startcol);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Move_isAMove(void * jarg1) {
  unsigned int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (bool)((Quackle::Move const *)arg1)->isAMove();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_setTiles(void * jarg1, void * jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->setTiles((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT void D_Move_setPrettyTiles(void * jarg1, void * jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->setPrettyTiles((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT void * D_Move_prettyTiles(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString *result = 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (Quackle::LetterString *) &((Quackle::Move const *)arg1)->prettyTiles();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Move_usedTiles(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->usedTiles();
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_wordTiles(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->wordTiles();
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_wordTilesWithNoPlayThru(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->wordTilesWithNoPlayThru();
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_tiles(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  Quackle::LetterString *result = 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (Quackle::LetterString *) &((Quackle::Move const *)arg1)->tiles();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Move_isChallengedPhoney(void * jarg1) {
  unsigned int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (bool)((Quackle::Move const *)arg1)->isChallengedPhoney();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_setIsChallengedPhoney(void * jarg1, unsigned int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setIsChallengedPhoney(arg2);
}


SWIGEXPORT int D_Move_scoreAddition(void * jarg1) {
  int jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = (int)((Quackle::Move const *)arg1)->scoreAddition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Move_setScoreAddition(void * jarg1, int jarg2) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Move *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setScoreAddition(arg2);
}


SWIGEXPORT unsigned int D_Move_isAlreadyOnBoard(unsigned char jarg1) {
  unsigned int jresult ;
  Quackle::Letter arg1 ;
  bool result;
  
  arg1 = (Quackle::Letter)jarg1;
  result = (bool)Quackle::Move::isAlreadyOnBoard(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Move_xml(void * jarg1) {
  char * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->xml();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Move_toString(void * jarg1) {
  char * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->toString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Move_debugString(void * jarg1) {
  char * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->debugString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Move_positionString(void * jarg1) {
  char * jresult ;
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Move *)jarg1;
  result = ((Quackle::Move const *)arg1)->positionString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Move_createPlaceMove__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  UVString arg1 ;
  Quackle::LetterString arg2 ;
  Quackle::LetterString *argp2 ;
  Quackle::Move result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  argp2 = (Quackle::LetterString *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg2 = *argp2; 
  result = Quackle::Move::createPlaceMove(arg1,arg2);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createPlaceMove__SWIG_1(int jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  Quackle::LetterString arg4 ;
  Quackle::LetterString *argp4 ;
  Quackle::Move result;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  argp4 = (Quackle::LetterString *)jarg4;
  if (!argp4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg4 = *argp4; 
  result = Quackle::Move::createPlaceMove(arg1,arg2,arg3,arg4);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createChallengedPhoney__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  UVString arg1 ;
  Quackle::LetterString arg2 ;
  Quackle::LetterString *argp2 ;
  Quackle::Move result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  argp2 = (Quackle::LetterString *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg2 = *argp2; 
  result = Quackle::Move::createChallengedPhoney(arg1,arg2);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createChallengedPhoney__SWIG_1(int jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  Quackle::LetterString arg4 ;
  Quackle::LetterString *argp4 ;
  Quackle::Move result;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  argp4 = (Quackle::LetterString *)jarg4;
  if (!argp4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg4 = *argp4; 
  result = Quackle::Move::createChallengedPhoney(arg1,arg2,arg3,arg4);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createExchangeMove(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Quackle::LetterString arg1 ;
  bool arg2 ;
  Quackle::LetterString *argp1 ;
  Quackle::Move result;
  
  argp1 = (Quackle::LetterString *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false;
  result = Quackle::Move::createExchangeMove(arg1,arg2);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createUnusedTilesBonus(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::LetterString arg1 ;
  int arg2 ;
  Quackle::LetterString *argp1 ;
  Quackle::Move result;
  
  argp1 = (Quackle::LetterString *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2;
  result = Quackle::Move::createUnusedTilesBonus(arg1,arg2);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createTimePenalty(int jarg1) {
  void * jresult ;
  int arg1 ;
  Quackle::Move result;
  
  arg1 = (int)jarg1;
  result = Quackle::Move::createTimePenalty(arg1);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createPassMove() {
  void * jresult ;
  Quackle::Move result;
  
  result = Quackle::Move::createPassMove();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Move_createNonmove() {
  void * jresult ;
  Quackle::Move result;
  
  result = Quackle::Move::createNonmove();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_Move() {
  void * jresult ;
  Quackle::Move *result = 0 ;
  
  result = (Quackle::Move *)new Quackle::Move();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Move(void * jarg1) {
  Quackle::Move *arg1 = (Quackle::Move *) 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_swigOpLt__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)Quackle::operator <((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MoveList_sort__SWIG_0(void * jarg1, int jarg2) {
  Quackle::MoveList *arg1 = 0 ;
  Quackle::MoveList::SortType arg2 ;
  
  arg1 = (Quackle::MoveList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList & type is null");
    return ;
  } 
  arg2 = (Quackle::MoveList::SortType)jarg2; 
  Quackle::MoveList::sort(*arg1,arg2);
}


SWIGEXPORT void D_MoveList_sort__SWIG_1(void * jarg1) {
  Quackle::MoveList *arg1 = 0 ;
  
  arg1 = (Quackle::MoveList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList & type is null");
    return ;
  } 
  Quackle::MoveList::sort(*arg1);
}


SWIGEXPORT void D_MoveList_sortNonReverse__SWIG_0(void * jarg1, int jarg2) {
  Quackle::MoveList *arg1 = 0 ;
  Quackle::MoveList::SortType arg2 ;
  
  arg1 = (Quackle::MoveList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList & type is null");
    return ;
  } 
  arg2 = (Quackle::MoveList::SortType)jarg2; 
  Quackle::MoveList::sortNonReverse(*arg1,arg2);
}


SWIGEXPORT void D_MoveList_sortNonReverse__SWIG_1(void * jarg1) {
  Quackle::MoveList *arg1 = 0 ;
  
  arg1 = (Quackle::MoveList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList & type is null");
    return ;
  } 
  Quackle::MoveList::sortNonReverse(*arg1);
}


SWIGEXPORT unsigned int D_MoveList_winComparator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)Quackle::MoveList::winComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MoveList_equityComparator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)Quackle::MoveList::equityComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MoveList_scoreComparator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)Quackle::MoveList::scoreComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MoveList_alphabeticalComparator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)Quackle::MoveList::alphabeticalComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MoveList_wordPosComparator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)Quackle::MoveList::wordPosComparator((Quackle::Move const &)*arg1,(Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MoveList_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::MoveList *arg1 = (Quackle::MoveList *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::MoveList *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::MoveList const *)arg1)->contains((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_MoveList() {
  void * jresult ;
  Quackle::MoveList *result = 0 ;
  
  result = (Quackle::MoveList *)new Quackle::MoveList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_MoveList(void * jarg1) {
  Quackle::MoveList *arg1 = (Quackle::MoveList *) 0 ;
  
  arg1 = (Quackle::MoveList *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Rack__SWIG_0() {
  void * jresult ;
  Quackle::Rack *result = 0 ;
  
  result = (Quackle::Rack *)new Quackle::Rack();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Rack__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::Rack *result = 0 ;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (Quackle::Rack *)new Quackle::Rack((Quackle::LetterString const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Rack_setTiles(void * jarg1, void * jarg2) {
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Rack *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->setTiles((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT void * D_Rack_tiles(void * jarg1) {
  void * jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *result = 0 ;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = (Quackle::LetterString *) &((Quackle::Rack const *)arg1)->tiles();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Rack_alphaTiles(void * jarg1) {
  void * jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = ((Quackle::Rack const *)arg1)->alphaTiles();
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_Rack_empty(void * jarg1) {
  unsigned int jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  bool result;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = (bool)((Quackle::Rack const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Rack_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Rack *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::Rack const *)arg1)->equals((Quackle::Rack const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Rack_size(void * jarg1) {
  unsigned int jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  unsigned int result;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = (unsigned int)((Quackle::Rack const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Rack_unload(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Rack *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->unload((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Rack_load(void * jarg1, void * jarg2) {
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Rack *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->load((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT unsigned int D_Rack_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Rack *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::Rack const *)arg1)->contains((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Rack_shuffle(void * jarg1) {
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  
  arg1 = (Quackle::Rack *)jarg1;
  (arg1)->shuffle();
}


SWIGEXPORT int D_Rack_score(void * jarg1) {
  int jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  int result;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = (int)((Quackle::Rack const *)arg1)->score();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Rack_xml(void * jarg1) {
  char * jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = ((Quackle::Rack const *)arg1)->xml();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Rack_toString(void * jarg1) {
  char * jresult ;
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Rack *)jarg1;
  result = ((Quackle::Rack const *)arg1)->toString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_delete_Rack(void * jarg1) {
  Quackle::Rack *arg1 = (Quackle::Rack *) 0 ;
  
  arg1 = (Quackle::Rack *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Bag__SWIG_0() {
  void * jresult ;
  Quackle::Bag *result = 0 ;
  
  result = (Quackle::Bag *)new Quackle::Bag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Bag__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::Bag *result = 0 ;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (Quackle::Bag *)new Quackle::Bag((Quackle::LetterString const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Bag_clear(void * jarg1) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_Bag_exch(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::Rack *arg3 = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  arg3 = (Quackle::Rack *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack & type is null");
    return ;
  } 
  (arg1)->exch((Quackle::Move const &)*arg2,*arg3);
}


SWIGEXPORT unsigned char D_Bag_pluck(void * jarg1) {
  unsigned char jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = (Quackle::Letter)(arg1)->pluck();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Bag_removeLetters__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->removeLetters((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Bag_removeLetters__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LongLetterString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Bag *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  Quackle::LongLetterString arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->removeLetters((Quackle::LongLetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Bag_removeLetter(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Letter arg2 ;
  bool result;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (bool)(arg1)->removeLetter(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Bag_letterCounts(void * jarg1, char * jarg2) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (char *)jarg2; 
  ((Quackle::Bag const *)arg1)->letterCounts(arg2);
}


SWIGEXPORT void D_Bag_toss__SWIG_0(void * jarg1, void * jarg2) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->toss((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT void D_Bag_toss__SWIG_1(void * jarg1, char * jarg2) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LongLetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  Quackle::LongLetterString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->toss((Quackle::LongLetterString const &)*arg2);
}


SWIGEXPORT void D_Bag_toss__SWIG_2(void * jarg1, void * jarg2) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->toss((Quackle::Rack const &)*arg2);
}


SWIGEXPORT void D_Bag_refill__SWIG_0(void * jarg1, void * jarg2) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack & type is null");
    return ;
  } 
  (arg1)->refill(*arg2);
}


SWIGEXPORT void * D_Bag_refill__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  Quackle::LetterString *arg3 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack & type is null");
    return 0;
  } 
  arg3 = (Quackle::LetterString *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (arg1)->refill(*arg2,(Quackle::LetterString const &)*arg3);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void D_Bag_prepareFullBag(void * jarg1) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  (arg1)->prepareFullBag();
}


SWIGEXPORT int D_Bag_fullBagTileCount(void * jarg1) {
  int jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  int result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = (int)(arg1)->fullBagTileCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Bag_empty(void * jarg1) {
  unsigned int jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  bool result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = (bool)((Quackle::Bag const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Bag_size(void * jarg1) {
  int jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  int result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = (int)((Quackle::Bag const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Bag_tiles(void * jarg1) {
  char * jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LongLetterString *result = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = (Quackle::LongLetterString *) &((Quackle::Bag const *)arg1)->tiles();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Bag_shuffledTiles(void * jarg1) {
  char * jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LongLetterString result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = ((Quackle::Bag const *)arg1)->shuffledTiles();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Bag_someShuffledTiles(void * jarg1) {
  void * jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = ((Quackle::Bag const *)arg1)->someShuffledTiles();
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT double D_Bag_probabilityOfDrawingFromFullBag(void * jarg1) {
  double jresult ;
  Quackle::LetterString *arg1 = 0 ;
  double result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (double)Quackle::Bag::probabilityOfDrawingFromFullBag((Quackle::FixedLengthString const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_Bag_probabilityOfDrawingFromBag(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::Bag *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Bag *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Bag const & type is null");
    return 0;
  } 
  result = (double)Quackle::Bag::probabilityOfDrawingFromBag((Quackle::FixedLengthString const &)*arg1,(Quackle::Bag const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_Bag_probabilityOfDrawing(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::Bag *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (double)(arg1)->probabilityOfDrawing((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Bag_toString(void * jarg1) {
  char * jresult ;
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Bag *)jarg1;
  result = ((Quackle::Bag const *)arg1)->toString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_delete_Bag(void * jarg1) {
  Quackle::Bag *arg1 = (Quackle::Bag *) 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_QUACKLE_MAXIMUM_BOARD_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(40);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_MINIMUM_BOARD_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Board__SWIG_0() {
  void * jresult ;
  Quackle::Board *result = 0 ;
  
  result = (Quackle::Board *)new Quackle::Board();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Board__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Quackle::Board *result = 0 ;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  result = (Quackle::Board *)new Quackle::Board(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Board_prepareEmptyBoard(void * jarg1) {
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  (arg1)->prepareEmptyBoard();
}


SWIGEXPORT int D_Board_width(void * jarg1) {
  int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = (int)((Quackle::Board const *)arg1)->width();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Board_height(void * jarg1) {
  int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = (int)((Quackle::Board const *)arg1)->height();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Board_tilesNotOnBoard(void * jarg1) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Bag result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = ((Quackle::Board const *)arg1)->tilesNotOnBoard();
  jresult = new Quackle::Bag((const Quackle::Bag &)result); 
  return jresult;
}


SWIGEXPORT void * D_Board_tilesOnBoard(void * jarg1) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Bag result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = ((Quackle::Board const *)arg1)->tilesOnBoard();
  jresult = new Quackle::Bag((const Quackle::Bag &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_Board_isEmpty(void * jarg1) {
  unsigned int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  bool result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = (bool)((Quackle::Board const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Board_makeMove(void * jarg1, void * jarg2) {
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->makeMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT void * D_Board_allWordsFormedBy(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = ((Quackle::Board const *)arg1)->allWordsFormedBy((Quackle::Move const &)*arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_Board_isConnected(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::Board const *)arg1)->isConnected((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Board_isUnacceptableOpeningMove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::Board const *)arg1)->isUnacceptableOpeningMove((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Board_updateBritishness(void * jarg1) {
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  (arg1)->updateBritishness();
}


SWIGEXPORT int D_Board_score__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg3 = (bool *)jarg3;
  result = (int)((Quackle::Board const *)arg1)->score((Quackle::Move const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Board_score__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  int result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (int)((Quackle::Board const *)arg1)->score((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Board_prettyTilesOfMove__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool arg3 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = ((Quackle::Board const *)arg1)->prettyTilesOfMove((Quackle::Move const &)*arg2,arg3);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Board_prettyTilesOfMove__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = ((Quackle::Board const *)arg1)->prettyTilesOfMove((Quackle::Move const &)*arg2);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Board_sanitizedTilesOfMove(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = ((Quackle::Board const *)arg1)->sanitizedTilesOfMove((Quackle::Move const &)*arg2);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT char * D_Board_toString(void * jarg1) {
  char * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = ((Quackle::Board const *)arg1)->toString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Board_htmlBoard(void * jarg1, int jarg2) {
  char * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  UVString result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  result = ((Quackle::Board const *)arg1)->htmlBoard(arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Board_htmlKey(void * jarg1) {
  char * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Board *)jarg1;
  result = ((Quackle::Board const *)arg1)->htmlKey();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Board_tileInformation(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::Board::TileInformation result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = ((Quackle::Board const *)arg1)->tileInformation(arg2,arg3);
  jresult = new Quackle::Board::TileInformation((const Quackle::Board::TileInformation &)result); 
  return jresult;
}


SWIGEXPORT unsigned char D_Board_letter(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (Quackle::Letter)((Quackle::Board const *)arg1)->letter(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Board_isBlank(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (bool)((Quackle::Board const *)arg1)->isBlank(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Board_isBritish(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (bool)((Quackle::Board const *)arg1)->isBritish(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Board_vcross(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  LetterBitset *result = 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (LetterBitset *) &((Quackle::Board const *)arg1)->vcross(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Board_setVCross(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  LetterBitset *arg4 = 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (LetterBitset *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "LetterBitset const & type is null");
    return ;
  } 
  (arg1)->setVCross(arg2,arg3,(LetterBitset const &)*arg4);
}


SWIGEXPORT void * D_Board_hcross(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  LetterBitset *result = 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (LetterBitset *) &((Quackle::Board const *)arg1)->hcross(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Board_setHCross(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  int arg2 ;
  int arg3 ;
  LetterBitset *arg4 = 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (LetterBitset *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "LetterBitset const & type is null");
    return ;
  } 
  (arg1)->setHCross(arg2,arg3,(LetterBitset const &)*arg4);
}


SWIGEXPORT void D_delete_Board(void * jarg1) {
  Quackle::Board *arg1 = (Quackle::Board *) 0 ;
  
  arg1 = (Quackle::Board *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_BoardParameters() {
  void * jresult ;
  Quackle::BoardParameters *result = 0 ;
  
  result = (Quackle::BoardParameters *)new Quackle::BoardParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_Serialize(void * jarg1, void * jarg2) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  ostream *arg2 = 0 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (ostream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "ostream & type is null");
    return ;
  } 
  (arg1)->Serialize(*arg2);
}


SWIGEXPORT void * D_BoardParameters_Deserialize(void * jarg1) {
  void * jresult ;
  istream *arg1 = 0 ;
  Quackle::BoardParameters *result = 0 ;
  
  arg1 = (istream *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "istream & type is null");
    return 0;
  } 
  result = (Quackle::BoardParameters *)Quackle::BoardParameters::Deserialize(*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_BoardParameters_width(void * jarg1) {
  int jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  result = (int)((Quackle::BoardParameters const *)arg1)->width();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setWidth(void * jarg1, int jarg2) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setWidth(arg2);
}


SWIGEXPORT int D_BoardParameters_height(void * jarg1) {
  int jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  result = (int)((Quackle::BoardParameters const *)arg1)->height();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setHeight(void * jarg1, int jarg2) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setHeight(arg2);
}


SWIGEXPORT int D_BoardParameters_startRow(void * jarg1) {
  int jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  result = (int)((Quackle::BoardParameters const *)arg1)->startRow();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setStartRow(void * jarg1, int jarg2) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setStartRow(arg2);
}


SWIGEXPORT int D_BoardParameters_startColumn(void * jarg1) {
  int jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  result = (int)((Quackle::BoardParameters const *)arg1)->startColumn();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setStartColumn(void * jarg1, int jarg2) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setStartColumn(arg2);
}


SWIGEXPORT int D_BoardParameters_letterMultiplier(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)((Quackle::BoardParameters const *)arg1)->letterMultiplier(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setLetterMultiplier(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::BoardParameters::LetterMultiplier arg4 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (Quackle::BoardParameters::LetterMultiplier)jarg4; 
  (arg1)->setLetterMultiplier(arg2,arg3,arg4);
}


SWIGEXPORT int D_BoardParameters_wordMultiplier(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)((Quackle::BoardParameters const *)arg1)->wordMultiplier(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setWordMultiplier(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::BoardParameters::WordMultiplier arg4 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (Quackle::BoardParameters::WordMultiplier)jarg4; 
  (arg1)->setWordMultiplier(arg2,arg3,arg4);
}


SWIGEXPORT char * D_BoardParameters_name(void * jarg1) {
  char * jresult ;
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  UVString result;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  result = ((Quackle::BoardParameters const *)arg1)->name();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BoardParameters_setName(void * jarg1, char * jarg2) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setName((UVString const &)*arg2);
}


SWIGEXPORT void D_delete_BoardParameters(void * jarg1) {
  Quackle::BoardParameters *arg1 = (Quackle::BoardParameters *) 0 ;
  
  arg1 = (Quackle::BoardParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_EnglishBoard() {
  void * jresult ;
  Quackle::EnglishBoard *result = 0 ;
  
  result = (Quackle::EnglishBoard *)new Quackle::EnglishBoard();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_EnglishBoard(void * jarg1) {
  Quackle::EnglishBoard *arg1 = (Quackle::EnglishBoard *) 0 ;
  
  arg1 = (Quackle::EnglishBoard *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_delete_Evaluator(void * jarg1) {
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  
  arg1 = (Quackle::Evaluator *)jarg1;
  delete arg1;
}


SWIGEXPORT double D_Evaluator_equity(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::Evaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::Evaluator const *)arg1)->equity((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_Evaluator_playerConsideration(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::Evaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::Evaluator const *)arg1)->playerConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_Evaluator_sharedConsideration(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::Evaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::Evaluator const *)arg1)->sharedConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_Evaluator_leaveValue(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::Evaluator *arg1 = (Quackle::Evaluator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::Evaluator *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (double)((Quackle::Evaluator const *)arg1)->leaveValue((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Evaluator() {
  void * jresult ;
  Quackle::Evaluator *result = 0 ;
  
  result = (Quackle::Evaluator *)new Quackle::Evaluator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ScorePlusLeaveEvaluator(void * jarg1) {
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  
  arg1 = (Quackle::ScorePlusLeaveEvaluator *)jarg1;
  delete arg1;
}


SWIGEXPORT double D_ScorePlusLeaveEvaluator_equity(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::ScorePlusLeaveEvaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->equity((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_ScorePlusLeaveEvaluator_playerConsideration(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::ScorePlusLeaveEvaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->playerConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_ScorePlusLeaveEvaluator_sharedConsideration(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::ScorePlusLeaveEvaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->sharedConsideration((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_ScorePlusLeaveEvaluator_leaveValue(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::ScorePlusLeaveEvaluator *arg1 = (Quackle::ScorePlusLeaveEvaluator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::ScorePlusLeaveEvaluator *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (double)((Quackle::ScorePlusLeaveEvaluator const *)arg1)->leaveValue((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_ScorePlusLeaveEvaluator() {
  void * jresult ;
  Quackle::ScorePlusLeaveEvaluator *result = 0 ;
  
  result = (Quackle::ScorePlusLeaveEvaluator *)new Quackle::ScorePlusLeaveEvaluator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT double D_CatchallEvaluator_equity(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::CatchallEvaluator *arg1 = (Quackle::CatchallEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::CatchallEvaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::CatchallEvaluator const *)arg1)->equity((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_CatchallEvaluator_endgameResult(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Quackle::CatchallEvaluator *arg1 = (Quackle::CatchallEvaluator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  Quackle::Move *arg3 = 0 ;
  double result;
  
  arg1 = (Quackle::CatchallEvaluator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  arg3 = (Quackle::Move *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)((Quackle::CatchallEvaluator const *)arg1)->endgameResult((Quackle::GamePosition const &)*arg2,(Quackle::Move const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_CatchallEvaluator() {
  void * jresult ;
  Quackle::CatchallEvaluator *result = 0 ;
  
  result = (Quackle::CatchallEvaluator *)new Quackle::CatchallEvaluator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_CatchallEvaluator(void * jarg1) {
  Quackle::CatchallEvaluator *arg1 = (Quackle::CatchallEvaluator *) 0 ;
  
  arg1 = (Quackle::CatchallEvaluator *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Player__SWIG_0() {
  void * jresult ;
  Quackle::Player *result = 0 ;
  
  result = (Quackle::Player *)new Quackle::Player();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Player__SWIG_1(char * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  UVString *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::Player *result = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (Quackle::Player *)new Quackle::Player((UVString const &)*arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Player__SWIG_2(char * jarg1, int jarg2) {
  void * jresult ;
  UVString *arg1 = 0 ;
  int arg2 ;
  Quackle::Player *result = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2;
  result = (Quackle::Player *)new Quackle::Player((UVString const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Player__SWIG_3(char * jarg1) {
  void * jresult ;
  UVString *arg1 = 0 ;
  Quackle::Player *result = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (Quackle::Player *)new Quackle::Player((UVString const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Player_setName(void * jarg1, char * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setName((UVString const &)*arg2);
}


SWIGEXPORT char * D_Player_name(void * jarg1) {
  char * jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (UVString *) &((Quackle::Player const *)arg1)->name();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Player_setAbbreviatedName(void * jarg1, char * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setAbbreviatedName((UVString const &)*arg2);
}


SWIGEXPORT char * D_Player_abbreviatedName(void * jarg1) {
  char * jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (UVString *) &((Quackle::Player const *)arg1)->abbreviatedName();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Player_setType(void * jarg1, int jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setType(arg2);
}


SWIGEXPORT int D_Player_type(void * jarg1) {
  int jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int result;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (int)((Quackle::Player const *)arg1)->type();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Player_setComputerPlayer(void * jarg1, void * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  (arg1)->setComputerPlayer(arg2);
}


SWIGEXPORT void * D_Player_computerPlayer(void * jarg1) {
  void * jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (Quackle::ComputerPlayer *)((Quackle::Player const *)arg1)->computerPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_Player_id(void * jarg1) {
  int jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int result;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (int)((Quackle::Player const *)arg1)->id();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Player_setId(void * jarg1, int jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setId(arg2);
}


SWIGEXPORT void D_Player_setRack__SWIG_0(void * jarg1, void * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->setRack((Quackle::Rack const &)*arg2);
}


SWIGEXPORT void D_Player_setRack__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->setRack((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT void * D_Player_rack(void * jarg1) {
  void * jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Rack *result = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (Quackle::Rack *) &((Quackle::Player const *)arg1)->rack();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Player_setScore(void * jarg1, int jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setScore(arg2);
}


SWIGEXPORT int D_Player_score(void * jarg1) {
  int jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int result;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (int)((Quackle::Player const *)arg1)->score();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Player_addToScore(void * jarg1, int jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->addToScore(arg2);
}


SWIGEXPORT void * D_Player_drawnLetters(void * jarg1) {
  void * jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Rack *result = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (Quackle::Rack *) &((Quackle::Player const *)arg1)->drawnLetters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Player_setDrawnLetters(void * jarg1, void * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->setDrawnLetters((Quackle::Rack const &)*arg2);
}


SWIGEXPORT unsigned int D_Player_racksAreKnown(void * jarg1) {
  unsigned int jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  bool result;
  
  arg1 = (Quackle::Player *)jarg1;
  result = (bool)((Quackle::Player const *)arg1)->racksAreKnown();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Player_setRacksAreKnown(void * jarg1, unsigned int jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setRacksAreKnown(arg2);
}


SWIGEXPORT unsigned int D_Player_positionallyEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  Quackle::Player *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Player *)jarg1;
  arg2 = (Quackle::Player *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::Player const *)arg1)->positionallyEqual((Quackle::Player const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Player_storeInformationToString(void * jarg1) {
  char * jresult ;
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString result;
  
  arg1 = (Quackle::Player *)jarg1;
  result = ((Quackle::Player const *)arg1)->storeInformationToString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Player_loadInformationFromString(void * jarg1, char * jarg2) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->loadInformationFromString((UVString const &)*arg2);
}


SWIGEXPORT void * D_Player_makePlayerFromString(char * jarg1) {
  void * jresult ;
  UVString *arg1 = 0 ;
  Quackle::Player result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = Quackle::Player::makePlayerFromString((std::string const &)*arg1);
  jresult = new Quackle::Player((const Quackle::Player &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_Player(void * jarg1) {
  Quackle::Player *arg1 = (Quackle::Player *) 0 ;
  
  arg1 = (Quackle::Player *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_swigOpLt__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Player *arg1 = 0 ;
  Quackle::Player *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Player *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return 0;
  } 
  arg2 = (Quackle::Player *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return 0;
  } 
  result = (bool)Quackle::operator <((Quackle::Player const &)*arg1,(Quackle::Player const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_PlayerList() {
  void * jresult ;
  Quackle::PlayerList *result = 0 ;
  
  result = (Quackle::PlayerList *)new Quackle::PlayerList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_PlayerList_playerForId(void * jarg1, int jarg2, unsigned int * jarg3) {
  void * jresult ;
  Quackle::PlayerList *arg1 = (Quackle::PlayerList *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  Quackle::Player *result = 0 ;
  
  arg1 = (Quackle::PlayerList *)jarg1;
  arg2 = (int)jarg2;
  *jarg3 = 0;
  arg3 = (bool *)jarg3; 
  result = (Quackle::Player *) &((Quackle::PlayerList const *)arg1)->playerForId(arg2,*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_PlayerList_playerForName(void * jarg1, char * jarg2, unsigned int * jarg3) {
  void * jresult ;
  Quackle::PlayerList *arg1 = (Quackle::PlayerList *) 0 ;
  UVString *arg2 = 0 ;
  bool *arg3 = 0 ;
  Quackle::Player *result = 0 ;
  
  arg1 = (Quackle::PlayerList *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  *jarg3 = 0;
  arg3 = (bool *)jarg3; 
  result = (Quackle::Player *) &((Quackle::PlayerList const *)arg1)->playerForName((UVString const &)*arg2,*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_PlayerList(void * jarg1) {
  Quackle::PlayerList *arg1 = (Quackle::PlayerList *) 0 ;
  
  arg1 = (Quackle::PlayerList *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_HistoryLocation(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Quackle::HistoryLocation *result = 0 ;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  result = (Quackle::HistoryLocation *)new Quackle::HistoryLocation(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_HistoryLocation_playerId(void * jarg1) {
  int jresult ;
  Quackle::HistoryLocation *arg1 = (Quackle::HistoryLocation *) 0 ;
  int result;
  
  arg1 = (Quackle::HistoryLocation *)jarg1;
  result = (int)((Quackle::HistoryLocation const *)arg1)->playerId();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_HistoryLocation_turnNumber(void * jarg1) {
  int jresult ;
  Quackle::HistoryLocation *arg1 = (Quackle::HistoryLocation *) 0 ;
  int result;
  
  arg1 = (Quackle::HistoryLocation *)jarg1;
  result = (int)((Quackle::HistoryLocation const *)arg1)->turnNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_HistoryLocation(void * jarg1) {
  Quackle::HistoryLocation *arg1 = (Quackle::HistoryLocation *) 0 ;
  
  arg1 = (Quackle::HistoryLocation *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_swigOpLt__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::HistoryLocation *arg1 = 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::HistoryLocation *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::HistoryLocation const & type is null");
    return 0;
  } 
  arg2 = (Quackle::HistoryLocation *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::HistoryLocation const & type is null");
    return 0;
  } 
  result = (bool)Quackle::operator <((Quackle::HistoryLocation const &)*arg1,(Quackle::HistoryLocation const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_GamePosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::PlayerList *arg1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::PlayerList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::PlayerList const & type is null");
    return 0;
  } 
  result = (Quackle::GamePosition *)new Quackle::GamePosition((Quackle::PlayerList const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_GamePosition__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  result = (Quackle::GamePosition *)new Quackle::GamePosition((Quackle::GamePosition const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_GamePosition__SWIG_2() {
  void * jresult ;
  Quackle::GamePosition *result = 0 ;
  
  result = (Quackle::GamePosition *)new Quackle::GamePosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_kibitz__SWIG_0(void * jarg1, int jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->kibitz(arg2);
}


SWIGEXPORT void D_GamePosition_kibitz__SWIG_1(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->kibitz();
}


SWIGEXPORT void * D_GamePosition_moves(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::MoveList *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::MoveList *) &((Quackle::GamePosition const *)arg1)->moves();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_setMoves(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList const & type is null");
    return ;
  } 
  (arg1)->setMoves((Quackle::MoveList const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_staticBestMove(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Move *) &(arg1)->staticBestMove();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_removeMove(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->removeMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT void D_GamePosition_removeAllMoves(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->removeAllMoves();
}


SWIGEXPORT void D_GamePosition_addMove(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->addMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT void D_GamePosition_makeSureMoveListContainsMoves(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList const & type is null");
    return ;
  } 
  (arg1)->makeSureMoveListContainsMoves((Quackle::MoveList const &)*arg2);
}


SWIGEXPORT void D_GamePosition_kibitzAs(void * jarg1, void * jarg2, int jarg3) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  int arg3 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  arg3 = (int)jarg3;
  (arg1)->kibitzAs(arg2,arg3);
}


SWIGEXPORT void D_GamePosition_ensureMovePrettiness(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move & type is null");
    return ;
  } 
  (arg1)->ensureMovePrettiness(*arg2);
}


SWIGEXPORT void D_GamePosition_ensureMoveTilesDoNotIncludePlayThru(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move & type is null");
    return ;
  } 
  (arg1)->ensureMoveTilesDoNotIncludePlayThru(*arg2);
}


SWIGEXPORT void D_GamePosition_addAndSetMoveMade(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->addAndSetMoveMade((Quackle::Move const &)*arg2);
}


SWIGEXPORT int D_GamePosition_validateMove(void * jarg1, void * jarg2) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (int)((Quackle::GamePosition const *)arg1)->validateMove((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_formsAcceptableWords(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::GamePosition const *)arg1)->formsAcceptableWords((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_allWordsFormedBy(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = ((Quackle::GamePosition const *)arg1)->allWordsFormedBy((Quackle::Move const &)*arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_isConnected(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::GamePosition const *)arg1)->isConnected((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_isAcceptableWord(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::GamePosition const *)arg1)->isAcceptableWord((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_exchangeAllowed(void * jarg1) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (bool)((Quackle::GamePosition const *)arg1)->exchangeAllowed();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_GamePosition_handleOverdraw(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  Quackle::LetterString *arg3 = (Quackle::LetterString *) 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  arg3 = (Quackle::LetterString *)jarg3;
  result = (int)((Quackle::GamePosition const *)arg1)->handleOverdraw((Quackle::LetterString const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_makeMove__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  arg3 = jarg3 ? true : false;
  (arg1)->makeMove((Quackle::Move const &)*arg2,arg3);
}


SWIGEXPORT void D_GamePosition_makeMove__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->makeMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT void D_GamePosition_ensureBoardIsPreparedForAnalysis(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->ensureBoardIsPreparedForAnalysis();
}


SWIGEXPORT void D_GamePosition_scoreMove(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move & type is null");
    return ;
  } 
  (arg1)->scoreMove(*arg2);
}


SWIGEXPORT double D_GamePosition_calculateEquity(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)(arg1)->calculateEquity((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_GamePosition_calculateScore(void * jarg1, void * jarg2) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (int)(arg1)->calculateScore((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_GamePosition_calculatePlayerConsideration(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)(arg1)->calculatePlayerConsideration((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_GamePosition_leaveValue(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (double)((Quackle::GamePosition const *)arg1)->leaveValue((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_GamePosition_calculateSharedConsideration(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (double)(arg1)->calculateSharedConsideration((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_setBoard(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Board *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Board *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Board const & type is null");
    return ;
  } 
  (arg1)->setBoard((Quackle::Board const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_board(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Board *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Board *) &((Quackle::GamePosition const *)arg1)->board();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_bag(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Bag *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Bag *) &((Quackle::GamePosition const *)arg1)->bag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_setDrawingOrder(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  (arg1)->setDrawingOrder((Quackle::LetterString const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_drawingOrder(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::LetterString *) &((Quackle::GamePosition const *)arg1)->drawingOrder();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_unseenBag(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Bag result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->unseenBag();
  jresult = new Quackle::Bag((const Quackle::Bag &)result); 
  return jresult;
}


SWIGEXPORT void * D_GamePosition_unseenBagFromPlayerPerspective(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player *arg2 = 0 ;
  Quackle::Bag result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Player *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player const & type is null");
    return 0;
  } 
  result = ((Quackle::GamePosition const *)arg1)->unseenBagFromPlayerPerspective((Quackle::Player const &)*arg2);
  jresult = new Quackle::Bag((const Quackle::Bag &)result); 
  return jresult;
}


SWIGEXPORT void D_GamePosition_ensureProperBag(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  ((Quackle::GamePosition const *)arg1)->ensureProperBag();
}


SWIGEXPORT void D_GamePosition_setEmptyBoard(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->setEmptyBoard();
}


SWIGEXPORT void * D_GamePosition_currentPlayer__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Player *) &((Quackle::GamePosition const *)arg1)->currentPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_setCurrentPlayer(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->setCurrentPlayer(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_playerOnTurn__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Player *) &((Quackle::GamePosition const *)arg1)->playerOnTurn();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_setPlayerOnTurn(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->setPlayerOnTurn(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_humanPlayer(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Player *) &((Quackle::GamePosition const *)arg1)->humanPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_nextPlayer(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::PlayerList::const_iterator result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->nextPlayer();
  jresult = new Quackle::PlayerList::const_iterator((const Quackle::PlayerList::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_GamePosition_nextPlayerOfType(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Player::PlayerType arg2 ;
  bool *arg3 = 0 ;
  Quackle::PlayerList::const_iterator result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Player::PlayerType)jarg2; 
  arg3 = (bool *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return 0;
  } 
  result = ((Quackle::GamePosition const *)arg1)->nextPlayerOfType(arg2,*arg3);
  jresult = new Quackle::PlayerList::const_iterator((const Quackle::PlayerList::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_GamePosition_playerWithAbbreviatedName(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *arg2 = 0 ;
  bool *arg3 = 0 ;
  Quackle::PlayerList::const_iterator result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (bool *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return 0;
  } 
  result = ((Quackle::GamePosition const *)arg1)->playerWithAbbreviatedName((UVString const &)*arg2,*arg3);
  jresult = new Quackle::PlayerList::const_iterator((const Quackle::PlayerList::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_GamePosition_players(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::PlayerList *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::PlayerList *) &((Quackle::GamePosition const *)arg1)->players();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_endgameAdjustedScores(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::PlayerList result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->endgameAdjustedScores();
  jresult = new Quackle::PlayerList((const Quackle::PlayerList &)result); 
  return jresult;
}


SWIGEXPORT void * D_GamePosition_leadingPlayers(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::PlayerList result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->leadingPlayers();
  jresult = new Quackle::PlayerList((const Quackle::PlayerList &)result); 
  return jresult;
}


SWIGEXPORT int D_GamePosition_spread__SWIG_0(void * jarg1) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (int)((Quackle::GamePosition const *)arg1)->spread();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_GamePosition_spread__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  result = (int)((Quackle::GamePosition const *)arg1)->spread(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_gameOver(void * jarg1) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (bool)((Quackle::GamePosition const *)arg1)->gameOver();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_adjustScoresToFinishGame(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->adjustScoresToFinishGame();
}


SWIGEXPORT void D_GamePosition_adjustScoresToFinishPassedOutGame(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->adjustScoresToFinishPassedOutGame();
}


SWIGEXPORT unsigned int D_GamePosition_doesMoveEndGame(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::GamePosition const *)arg1)->doesMoveEndGame((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_GamePosition_deadwood(void * jarg1, void * jarg2) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::LetterString *arg2 = (Quackle::LetterString *) 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  result = (int)((Quackle::GamePosition const *)arg1)->deadwood(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_replenishAndSetRack__SWIG_0(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->replenishAndSetRack((Quackle::Rack const &)*arg2);
}


SWIGEXPORT void D_GamePosition_replenishAndSetRack__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  Quackle::Player *arg3 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  arg3 = (Quackle::Player *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Player & type is null");
    return ;
  } 
  (arg1)->replenishAndSetRack((Quackle::Rack const &)*arg2,*arg3);
}


SWIGEXPORT void D_GamePosition_setCurrentPlayerRack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  arg3 = jarg3 ? true : false;
  (arg1)->setCurrentPlayerRack((Quackle::Rack const &)*arg2,arg3);
}


SWIGEXPORT void D_GamePosition_setCurrentPlayerRack__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->setCurrentPlayerRack((Quackle::Rack const &)*arg2);
}


SWIGEXPORT void D_GamePosition_setPlayerRack__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  Quackle::Rack *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Quackle::Rack *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  arg4 = jarg4 ? true : false;
  (arg1)->setPlayerRack(arg2,(Quackle::Rack const &)*arg3,arg4);
}


SWIGEXPORT void D_GamePosition_setPlayerRack__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  Quackle::Rack *arg3 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Quackle::Rack *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->setPlayerRack(arg2,(Quackle::Rack const &)*arg3);
}


SWIGEXPORT void D_GamePosition_setOppRack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  arg3 = jarg3 ? true : false;
  (arg1)->setOppRack((Quackle::Rack const &)*arg2,arg3);
}


SWIGEXPORT void D_GamePosition_setOppRack__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->setOppRack((Quackle::Rack const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_oppRack(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (arg1)->oppRack();
  jresult = new Quackle::Rack((const Quackle::Rack &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_canSetCurrentPlayerRackWithoutBagExpansion(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::GamePosition const *)arg1)->canSetCurrentPlayerRackWithoutBagExpansion((Quackle::Rack const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_canSetPlayerRackWithoutBagExpansion(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int arg2 ;
  Quackle::Rack *arg3 = 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Quackle::Rack *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::GamePosition const *)arg1)->canSetPlayerRackWithoutBagExpansion(arg2,(Quackle::Rack const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_resetBag(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->resetBag();
}


SWIGEXPORT void D_GamePosition_setBag(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Bag *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Bag *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Bag const & type is null");
    return ;
  } 
  (arg1)->setBag((Quackle::Bag const &)*arg2);
}


SWIGEXPORT void D_GamePosition_setMoveMade(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->setMoveMade((Quackle::Move const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_moveMade(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Move *) &((Quackle::GamePosition const *)arg1)->moveMade();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_setCommittedMove(void * jarg1, void * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->setCommittedMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_committedMove(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Move *) &((Quackle::GamePosition const *)arg1)->committedMove();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_setTileBonus(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *arg2 = 0 ;
  Quackle::LetterString *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Quackle::LetterString *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return ;
  } 
  arg4 = (int)jarg4;
  (arg1)->setTileBonus((UVString const &)*arg2,(Quackle::LetterString const &)*arg3,arg4);
}


SWIGEXPORT void D_GamePosition_prepareForCommit(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->prepareForCommit();
}


SWIGEXPORT void * D_GamePosition_boardAfterMoveMade(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Board result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->boardAfterMoveMade();
  jresult = new Quackle::Board((const Quackle::Board &)result); 
  return jresult;
}


SWIGEXPORT void D_GamePosition_resetMoveMade(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->resetMoveMade();
}


SWIGEXPORT unsigned int D_GamePosition_incrementTurn__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::History *arg2 = (Quackle::History *) 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (Quackle::History *)jarg2;
  result = (bool)(arg1)->incrementTurn((Quackle::History const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GamePosition_incrementTurn__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  bool result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (bool)(arg1)->incrementTurn();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_GamePosition_turnNumber(void * jarg1) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (int)((Quackle::GamePosition const *)arg1)->turnNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GamePosition_setNestedness(void * jarg1, unsigned int jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->setNestedness(arg2);
}


SWIGEXPORT void D_GamePosition_incrementNestedness(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  (arg1)->incrementNestedness();
}


SWIGEXPORT unsigned int D_GamePosition_nestedness(void * jarg1) {
  unsigned int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  unsigned int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (unsigned int)((Quackle::GamePosition const *)arg1)->nestedness();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_GamePosition_nestednessIndentation(void * jarg1) {
  char * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->nestednessIndentation();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_GamePosition_scorelessTurnsInARow(void * jarg1) {
  int jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  int result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (int)((Quackle::GamePosition const *)arg1)->scorelessTurnsInARow();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_GamePosition_location(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  SwigValueWrapper< Quackle::HistoryLocation > result;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = ((Quackle::GamePosition const *)arg1)->location();
  jresult = new Quackle::HistoryLocation((const Quackle::HistoryLocation &)result); 
  return jresult;
}


SWIGEXPORT char * D_GamePosition_explanatoryNote(void * jarg1) {
  char * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (UVString *) &((Quackle::GamePosition const *)arg1)->explanatoryNote();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_GamePosition_setExplanatoryNote(void * jarg1, char * jarg2) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setExplanatoryNote((UVString const &)*arg2);
}


SWIGEXPORT void * D_GamePosition_underlyingBoardReference(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  Quackle::Board *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  result = (Quackle::Board *) &(arg1)->underlyingBoardReference();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_GamePosition(void * jarg1) {
  Quackle::GamePosition *arg1 = (Quackle::GamePosition *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_History() {
  void * jresult ;
  Quackle::History *result = 0 ;
  
  result = (Quackle::History *)new Quackle::History();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_players(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::PlayerList *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::PlayerList *) &((Quackle::History const *)arg1)->players();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_lastPlayer(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::Player *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::Player *) &((Quackle::History const *)arg1)->lastPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_lastPosition(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->lastPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_History_maximumTurnNumber(void * jarg1) {
  int jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int result;
  
  arg1 = (Quackle::History *)jarg1;
  result = (int)((Quackle::History const *)arg1)->maximumTurnNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_History_lastLocation(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  SwigValueWrapper< Quackle::HistoryLocation > result;
  
  arg1 = (Quackle::History *)jarg1;
  result = ((Quackle::History const *)arg1)->lastLocation();
  jresult = new Quackle::HistoryLocation((const Quackle::HistoryLocation &)result); 
  return jresult;
}


SWIGEXPORT void * D_History_currentLocation(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  SwigValueWrapper< Quackle::HistoryLocation > result;
  
  arg1 = (Quackle::History *)jarg1;
  result = ((Quackle::History const *)arg1)->currentLocation();
  jresult = new Quackle::HistoryLocation((const Quackle::HistoryLocation &)result); 
  return jresult;
}


SWIGEXPORT void * D_History_currentPosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->currentPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_positionsFacedBy(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int arg2 ;
  Quackle::PositionList result;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (int)jarg2;
  result = ((Quackle::History const *)arg1)->positionsFacedBy(arg2);
  jresult = new Quackle::PositionList((const Quackle::PositionList &)result); 
  return jresult;
}


SWIGEXPORT void * D_History_nextPosition__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  bool *arg2 = (bool *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (bool *)jarg2;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPosition(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_nextPosition__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_nextPositionFacedBy__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (bool *)jarg3;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPositionFacedBy(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_nextPositionFacedBy__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  int arg2 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (int)jarg2;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->nextPositionFacedBy(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_previousPosition__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  bool *arg2 = (bool *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (bool *)jarg2;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->previousPosition(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_previousPosition__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->previousPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_firstPosition__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  bool *arg2 = (bool *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (bool *)jarg2;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->firstPosition(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_firstPosition__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->firstPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_positionAt__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (Quackle::HistoryLocation *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::HistoryLocation const & type is null");
    return 0;
  } 
  arg3 = (bool *)jarg3;
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->positionAt((Quackle::HistoryLocation const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_History_positionAt__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  arg2 = (Quackle::HistoryLocation *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::HistoryLocation const & type is null");
    return 0;
  } 
  result = (Quackle::GamePosition *) &((Quackle::History const *)arg1)->positionAt((Quackle::HistoryLocation const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_History(void * jarg1) {
  Quackle::History *arg1 = (Quackle::History *) 0 ;
  
  arg1 = (Quackle::History *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Game() {
  void * jresult ;
  Quackle::Game *result = 0 ;
  
  result = (Quackle::Game *)new Quackle::Game();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Game(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Game_reset(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  (arg1)->reset();
}


SWIGEXPORT void D_Game_setPlayers(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::PlayerList *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::PlayerList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::PlayerList const & type is null");
    return ;
  } 
  (arg1)->setPlayers((Quackle::PlayerList const &)*arg2);
}


SWIGEXPORT void * D_Game_players(void * jarg1) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::PlayerList *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (Quackle::PlayerList *) &((Quackle::Game const *)arg1)->players();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Game_hasPositions(void * jarg1) {
  unsigned int jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  bool result;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (bool)((Quackle::Game const *)arg1)->hasPositions();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Game_history(void * jarg1) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::History *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (Quackle::History *) &((Quackle::Game const *)arg1)->history();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Game_addPosition(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  (arg1)->addPosition();
}


SWIGEXPORT void * D_Game_currentPosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::Game const *)arg1)->currentPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Game_setCurrentPosition__SWIG_0(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::HistoryLocation *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::HistoryLocation *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::HistoryLocation const & type is null");
    return ;
  } 
  (arg1)->setCurrentPosition((Quackle::HistoryLocation const &)*arg2);
}


SWIGEXPORT void D_Game_setCurrentPosition__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  (arg1)->setCurrentPosition((Quackle::GamePosition const &)*arg2);
}


SWIGEXPORT void D_Game_associateComputerPlayer(void * jarg1, int jarg2, void * jarg3) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  int arg2 ;
  Quackle::ComputerPlayer *arg3 = (Quackle::ComputerPlayer *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (Quackle::ComputerPlayer *)jarg3;
  (arg1)->associateComputerPlayer(arg2,arg3);
}


SWIGEXPORT void * D_Game_computerPlayer(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  int arg2 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (int)jarg2;
  result = (Quackle::ComputerPlayer *)(arg1)->computerPlayer(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Game_setDefaultComputerPlayer(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  (arg1)->setDefaultComputerPlayer(arg2);
}


SWIGEXPORT void D_Game_associateKnownComputerPlayers(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  (arg1)->associateKnownComputerPlayers();
}


SWIGEXPORT void * D_Game_defaultComputerPlayer(void * jarg1) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->defaultComputerPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Game_haveComputerPlay__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  result = (arg1)->haveComputerPlay(arg2);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Game_haveComputerPlay__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (arg1)->haveComputerPlay();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void D_Game_advanceToNoncomputerPlayer(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  (arg1)->advanceToNoncomputerPlayer();
}


SWIGEXPORT void D_Game_setCandidate(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->setCandidate((Quackle::Move const &)*arg2);
}


SWIGEXPORT void * D_Game_candidate(void * jarg1) {
  void * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (Quackle::Move *) &((Quackle::Game const *)arg1)->candidate();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Game_resetCandidature(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  (arg1)->resetCandidature();
}


SWIGEXPORT void D_Game_commitCandidate__SWIG_0(void * jarg1, unsigned int jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->commitCandidate(arg2);
}


SWIGEXPORT void D_Game_commitCandidate__SWIG_1(void * jarg1) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  (arg1)->commitCandidate();
}


SWIGEXPORT void D_Game_commitMove(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->commitMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT char * D_Game_description(void * jarg1) {
  char * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (UVString *) &((Quackle::Game const *)arg1)->description();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Game_setDescription(void * jarg1, char * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setDescription((UVString const &)*arg2);
}


SWIGEXPORT char * D_Game_title(void * jarg1) {
  char * jresult ;
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  result = (UVString *) &((Quackle::Game const *)arg1)->title();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Game_setTitle(void * jarg1, char * jarg2) {
  Quackle::Game *arg1 = (Quackle::Game *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setTitle((UVString const &)*arg2);
}


SWIGEXPORT void * D_new_GameParameters() {
  void * jresult ;
  Quackle::GameParameters *result = 0 ;
  
  result = (Quackle::GameParameters *)new Quackle::GameParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_GameParameters_minimumTilesForExchange(void * jarg1) {
  int jresult ;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  result = (int)((Quackle::GameParameters const *)arg1)->minimumTilesForExchange();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GameParameters_setMinimumTilesForExchange(void * jarg1, int jarg2) {
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setMinimumTilesForExchange(arg2);
}


SWIGEXPORT int D_GameParameters_numberOfScorelessTurnsThatEndsGame(void * jarg1) {
  int jresult ;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  result = (int)((Quackle::GameParameters const *)arg1)->numberOfScorelessTurnsThatEndsGame();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GameParameters_setNumberOfScorelessTurnsThatEndsGame(void * jarg1, int jarg2) {
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setNumberOfScorelessTurnsThatEndsGame(arg2);
}


SWIGEXPORT int D_GameParameters_bingoBonus(void * jarg1) {
  int jresult ;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  result = (int)((Quackle::GameParameters const *)arg1)->bingoBonus();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GameParameters_setBingoBonus(void * jarg1, int jarg2) {
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setBingoBonus(arg2);
}


SWIGEXPORT int D_GameParameters_rackSize(void * jarg1) {
  int jresult ;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  result = (int)((Quackle::GameParameters const *)arg1)->rackSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GameParameters_setRackSize(void * jarg1, int jarg2) {
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setRackSize(arg2);
}


SWIGEXPORT unsigned int D_GameParameters_overdrawPenalty(void * jarg1) {
  unsigned int jresult ;
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  unsigned int result;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  result = (unsigned int)((Quackle::GameParameters const *)arg1)->overdrawPenalty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GameParameters_setOverdrawPenalty(void * jarg1, unsigned int jarg2) {
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->setOverdrawPenalty(arg2);
}


SWIGEXPORT void D_delete_GameParameters(void * jarg1) {
  Quackle::GameParameters *arg1 = (Quackle::GameParameters *) 0 ;
  
  arg1 = (Quackle::GameParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_EnglishParameters() {
  void * jresult ;
  Quackle::EnglishParameters *result = 0 ;
  
  result = (Quackle::EnglishParameters *)new Quackle::EnglishParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_EnglishParameters(void * jarg1) {
  Quackle::EnglishParameters *arg1 = (Quackle::EnglishParameters *) 0 ;
  
  arg1 = (Quackle::EnglishParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_AveragedValue() {
  void * jresult ;
  Quackle::AveragedValue *result = 0 ;
  
  result = (Quackle::AveragedValue *)new Quackle::AveragedValue();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_AveragedValue_incorporateValue(void * jarg1, double jarg2) {
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  arg2 = (double)jarg2;
  (arg1)->incorporateValue(arg2);
}


SWIGEXPORT void D_AveragedValue_clear(void * jarg1) {
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void * D_AveragedValue_valueSum(void * jarg1) {
  void * jresult ;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  long double result;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  result = (long double)((Quackle::AveragedValue const *)arg1)->valueSum();
  jresult = new long double((const long double &)result); 
  return jresult;
}


SWIGEXPORT void * D_AveragedValue_squaredValueSum(void * jarg1) {
  void * jresult ;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  long double result;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  result = (long double)((Quackle::AveragedValue const *)arg1)->squaredValueSum();
  jresult = new long double((const long double &)result); 
  return jresult;
}


SWIGEXPORT long D_AveragedValue_incorporatedValues(void * jarg1) {
  long jresult ;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  long result;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  result = (long)((Quackle::AveragedValue const *)arg1)->incorporatedValues();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_AveragedValue_hasValues(void * jarg1) {
  unsigned int jresult ;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  bool result;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  result = (bool)((Quackle::AveragedValue const *)arg1)->hasValues();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_AveragedValue_averagedValue(void * jarg1) {
  double jresult ;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  double result;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  result = (double)((Quackle::AveragedValue const *)arg1)->averagedValue();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_AveragedValue_standardDeviation(void * jarg1) {
  double jresult ;
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  double result;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  result = (double)((Quackle::AveragedValue const *)arg1)->standardDeviation();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_AveragedValue(void * jarg1) {
  Quackle::AveragedValue *arg1 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::AveragedValue *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_PositionStatistics_getStatistic(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::PositionStatistics::StatisticType arg2 ;
  Quackle::AveragedValue result;
  
  arg1 = (Quackle::PositionStatistics *)jarg1;
  arg2 = (Quackle::PositionStatistics::StatisticType)jarg2; 
  result = ((Quackle::PositionStatistics const *)arg1)->getStatistic(arg2);
  jresult = new Quackle::AveragedValue((const Quackle::AveragedValue &)result); 
  return jresult;
}


SWIGEXPORT void D_PositionStatistics_score_set(void * jarg1, void * jarg2) {
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::PositionStatistics *)jarg1;
  arg2 = (Quackle::AveragedValue *)jarg2;
  if (arg1) (arg1)->score = *arg2;
}


SWIGEXPORT void * D_PositionStatistics_score_get(void * jarg1) {
  void * jresult ;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::AveragedValue *result = 0 ;
  
  arg1 = (Quackle::PositionStatistics *)jarg1;
  result = (Quackle::AveragedValue *)& ((arg1)->score);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_PositionStatistics_bingos_set(void * jarg1, void * jarg2) {
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::PositionStatistics *)jarg1;
  arg2 = (Quackle::AveragedValue *)jarg2;
  if (arg1) (arg1)->bingos = *arg2;
}


SWIGEXPORT void * D_PositionStatistics_bingos_get(void * jarg1) {
  void * jresult ;
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  Quackle::AveragedValue *result = 0 ;
  
  arg1 = (Quackle::PositionStatistics *)jarg1;
  result = (Quackle::AveragedValue *)& ((arg1)->bingos);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_PositionStatistics() {
  void * jresult ;
  Quackle::PositionStatistics *result = 0 ;
  
  result = (Quackle::PositionStatistics *)new Quackle::PositionStatistics();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_PositionStatistics(void * jarg1) {
  Quackle::PositionStatistics *arg1 = (Quackle::PositionStatistics *) 0 ;
  
  arg1 = (Quackle::PositionStatistics *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Level_setNumberScores(void * jarg1, unsigned int jarg2) {
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Quackle::Level *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->setNumberScores(arg2);
}


SWIGEXPORT void D_Level_statistics_set(void * jarg1, void * jarg2) {
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  Quackle::PositionStatisticsList *arg2 = (Quackle::PositionStatisticsList *) 0 ;
  
  arg1 = (Quackle::Level *)jarg1;
  arg2 = (Quackle::PositionStatisticsList *)jarg2;
  if (arg1) (arg1)->statistics = *arg2;
}


SWIGEXPORT void * D_Level_statistics_get(void * jarg1) {
  void * jresult ;
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  Quackle::PositionStatisticsList *result = 0 ;
  
  arg1 = (Quackle::Level *)jarg1;
  result = (Quackle::PositionStatisticsList *)& ((arg1)->statistics);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Level() {
  void * jresult ;
  Quackle::Level *result = 0 ;
  
  result = (Quackle::Level *)new Quackle::Level();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Level(void * jarg1) {
  Quackle::Level *arg1 = (Quackle::Level *) 0 ;
  
  arg1 = (Quackle::Level *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_LevelList_setNumberLevels(void * jarg1, unsigned int jarg2) {
  Quackle::LevelList *arg1 = (Quackle::LevelList *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Quackle::LevelList *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->setNumberLevels(arg2);
}


SWIGEXPORT void * D_new_LevelList() {
  void * jresult ;
  Quackle::LevelList *result = 0 ;
  
  result = (Quackle::LevelList *)new Quackle::LevelList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_LevelList(void * jarg1) {
  Quackle::LevelList *arg1 = (Quackle::LevelList *) 0 ;
  
  arg1 = (Quackle::LevelList *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_SimmedMove(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::SimmedMove *result = 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (Quackle::SimmedMove *)new Quackle::SimmedMove((Quackle::Move const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT double D_SimmedMove_calculateEquity(void * jarg1) {
  double jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  double result;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (double)((Quackle::SimmedMove const *)arg1)->calculateEquity();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_SimmedMove_calculateWinPercentage(void * jarg1) {
  double jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  double result;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (double)((Quackle::SimmedMove const *)arg1)->calculateWinPercentage();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_clear(void * jarg1) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT unsigned int D_SimmedMove_includeInSimulation(void * jarg1) {
  unsigned int jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  bool result;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (bool)((Quackle::SimmedMove const *)arg1)->includeInSimulation();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_setIncludeInSimulation(void * jarg1, unsigned int jarg2) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setIncludeInSimulation(arg2);
}


SWIGEXPORT long D_SimmedMove_id(void * jarg1) {
  long jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  long result;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (long)((Quackle::SimmedMove const *)arg1)->id();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_move_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::Move *arg2 = (Quackle::Move *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (arg1) (arg1)->move = *arg2;
}


SWIGEXPORT void * D_SimmedMove_move_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (Quackle::Move *)& ((arg1)->move);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_levels_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::LevelList *arg2 = (Quackle::LevelList *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = (Quackle::LevelList *)jarg2;
  if (arg1) (arg1)->levels = *arg2;
}


SWIGEXPORT void * D_SimmedMove_levels_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::LevelList *result = 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (Quackle::LevelList *)& ((arg1)->levels);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_residual_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = (Quackle::AveragedValue *)jarg2;
  if (arg1) (arg1)->residual = *arg2;
}


SWIGEXPORT void * D_SimmedMove_residual_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *result = 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (Quackle::AveragedValue *)& ((arg1)->residual);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_gameSpread_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = (Quackle::AveragedValue *)jarg2;
  if (arg1) (arg1)->gameSpread = *arg2;
}


SWIGEXPORT void * D_SimmedMove_gameSpread_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *result = 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (Quackle::AveragedValue *)& ((arg1)->gameSpread);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMove_wins_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *arg2 = (Quackle::AveragedValue *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = (Quackle::AveragedValue *)jarg2;
  if (arg1) (arg1)->wins = *arg2;
}


SWIGEXPORT void * D_SimmedMove_wins_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  Quackle::AveragedValue *result = 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  result = (Quackle::AveragedValue *)& ((arg1)->wins);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_SimmedMove_getPositionStatistics(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  int arg2 ;
  int arg3 ;
  Quackle::PositionStatistics result;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = ((Quackle::SimmedMove const *)arg1)->getPositionStatistics(arg2,arg3);
  jresult = new Quackle::PositionStatistics((const Quackle::PositionStatistics &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_SimmedMove(void * jarg1) {
  Quackle::SimmedMove *arg1 = (Quackle::SimmedMove *) 0 ;
  
  arg1 = (Quackle::SimmedMove *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_SimmedMoveMessage_id_set(void * jarg1, long jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  long arg2 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT long D_SimmedMoveMessage_id_get(void * jarg1) {
  long jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  long result;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (long) ((arg1)->id);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_move_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  Quackle::Move *arg2 = (Quackle::Move *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (arg1) (arg1)->move = *arg2;
}


SWIGEXPORT void * D_SimmedMoveMessage_move_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (Quackle::Move *)& ((arg1)->move);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_levels_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  Quackle::LevelList *arg2 = (Quackle::LevelList *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (Quackle::LevelList *)jarg2;
  if (arg1) (arg1)->levels = *arg2;
}


SWIGEXPORT void * D_SimmedMoveMessage_levels_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  Quackle::LevelList *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (Quackle::LevelList *)& ((arg1)->levels);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_score_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (std::vector< double > *)jarg2;
  if (arg1) (arg1)->score = *arg2;
}


SWIGEXPORT void * D_SimmedMoveMessage_score_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (std::vector< double > *)& ((arg1)->score);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_bingos_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (std::vector< double > *)jarg2;
  if (arg1) (arg1)->bingos = *arg2;
}


SWIGEXPORT void * D_SimmedMoveMessage_bingos_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (std::vector< double > *)& ((arg1)->bingos);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_residual_set(void * jarg1, double jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->residual = arg2;
}


SWIGEXPORT double D_SimmedMoveMessage_residual_get(void * jarg1) {
  double jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double result;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (double) ((arg1)->residual);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_gameSpread_set(void * jarg1, double jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->gameSpread = arg2;
}


SWIGEXPORT double D_SimmedMoveMessage_gameSpread_get(void * jarg1) {
  double jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double result;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (double) ((arg1)->gameSpread);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_wins_set(void * jarg1, double jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->wins = arg2;
}


SWIGEXPORT double D_SimmedMoveMessage_wins_get(void * jarg1) {
  double jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  double result;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (double) ((arg1)->wins);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_bogowin_set(void * jarg1, unsigned int jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->bogowin = arg2;
}


SWIGEXPORT unsigned int D_SimmedMoveMessage_bogowin_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  bool result;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (bool) ((arg1)->bogowin);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessage_xmlIndent_set(void * jarg1, char * jarg2) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->xmlIndent = *arg2;
}


SWIGEXPORT char * D_SimmedMoveMessage_xmlIndent_get(void * jarg1) {
  char * jresult ;
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  result = (UVString *) & ((arg1)->xmlIndent);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_new_SimmedMoveMessage() {
  void * jresult ;
  Quackle::SimmedMoveMessage *result = 0 ;
  
  result = (Quackle::SimmedMoveMessage *)new Quackle::SimmedMoveMessage();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_SimmedMoveMessage(void * jarg1) {
  Quackle::SimmedMoveMessage *arg1 = (Quackle::SimmedMoveMessage *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_SimmedMoveConstants_game_set(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  Quackle::Game *arg2 = (Quackle::Game *) 0 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = (Quackle::Game *)jarg2;
  if (arg1) (arg1)->game = *arg2;
}


SWIGEXPORT void * D_SimmedMoveConstants_game_get(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  Quackle::Game *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (Quackle::Game *)& ((arg1)->game);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveConstants_startPlayerId_set(void * jarg1, int jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->startPlayerId = arg2;
}


SWIGEXPORT int D_SimmedMoveConstants_startPlayerId_get(void * jarg1) {
  int jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int result;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (int) ((arg1)->startPlayerId);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveConstants_playerCount_set(void * jarg1, int jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->playerCount = arg2;
}


SWIGEXPORT int D_SimmedMoveConstants_playerCount_get(void * jarg1) {
  int jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int result;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (int) ((arg1)->playerCount);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveConstants_decimalTurns_set(void * jarg1, int jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->decimalTurns = arg2;
}


SWIGEXPORT int D_SimmedMoveConstants_decimalTurns_get(void * jarg1) {
  int jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int result;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (int) ((arg1)->decimalTurns);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveConstants_levelCount_set(void * jarg1, int jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->levelCount = arg2;
}


SWIGEXPORT int D_SimmedMoveConstants_levelCount_get(void * jarg1) {
  int jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  int result;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (int) ((arg1)->levelCount);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveConstants_ignoreOppos_set(void * jarg1, unsigned int jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->ignoreOppos = arg2;
}


SWIGEXPORT unsigned int D_SimmedMoveConstants_ignoreOppos_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  bool result;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (bool) ((arg1)->ignoreOppos);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveConstants_isLogging_set(void * jarg1, unsigned int jarg2) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->isLogging = arg2;
}


SWIGEXPORT unsigned int D_SimmedMoveConstants_isLogging_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  bool result;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  result = (bool) ((arg1)->isLogging);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_SimmedMoveConstants() {
  void * jresult ;
  Quackle::SimmedMoveConstants *result = 0 ;
  
  result = (Quackle::SimmedMoveConstants *)new Quackle::SimmedMoveConstants();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_SimmedMoveConstants(void * jarg1) {
  Quackle::SimmedMoveConstants *arg1 = (Quackle::SimmedMoveConstants *) 0 ;
  
  arg1 = (Quackle::SimmedMoveConstants *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_SimmedMoveMessageQueue() {
  void * jresult ;
  Quackle::SimmedMoveMessageQueue *result = 0 ;
  
  result = (Quackle::SimmedMoveMessageQueue *)new Quackle::SimmedMoveMessageQueue();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessageQueue_push(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  Quackle::SimmedMoveMessage *arg2 = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  arg2 = (Quackle::SimmedMoveMessage *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveMessage & type is null");
    return ;
  } 
  (arg1)->push(*arg2);
}


SWIGEXPORT void D_SimmedMoveMessageQueue_send_terminate_all(void * jarg1) {
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  (arg1)->send_terminate_all();
}


SWIGEXPORT void D_SimmedMoveMessageQueue_send_terminate_one(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  std::thread::id *arg2 = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  arg2 = (std::thread::id *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::thread::id const & type is null");
    return ;
  } 
  (arg1)->send_terminate_one((std::thread::id const &)*arg2);
}


SWIGEXPORT void * D_SimmedMoveMessageQueue_constants(void * jarg1) {
  void * jresult ;
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  Quackle::SimmedMoveConstants *result = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  result = (Quackle::SimmedMoveConstants *) &(arg1)->constants();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SimmedMoveMessageQueue_setConstants(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  Quackle::SimmedMoveConstants *arg2 = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  arg2 = (Quackle::SimmedMoveConstants *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveConstants const & type is null");
    return ;
  } 
  (arg1)->setConstants((Quackle::SimmedMoveConstants const &)*arg2);
}


SWIGEXPORT void D_delete_SimmedMoveMessageQueue(void * jarg1) {
  Quackle::SimmedMoveMessageQueue *arg1 = (Quackle::SimmedMoveMessageQueue *) 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Simulator() {
  void * jresult ;
  Quackle::Simulator *result = 0 ;
  
  result = (Quackle::Simulator *)new Quackle::Simulator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Simulator(void * jarg1) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Simulator_setPosition(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
}


SWIGEXPORT void * D_Simulator_currentPosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Simulator_history(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::History *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (Quackle::History *) &((Quackle::Simulator const *)arg1)->history();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Simulator_setLogfile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false;
  (arg1)->setLogfile((std::string const &)*arg2,arg3);
}


SWIGEXPORT void D_Simulator_setLogfile__SWIG_1(void * jarg1, char * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setLogfile((std::string const &)*arg2);
}


SWIGEXPORT char * D_Simulator_logfile(void * jarg1) {
  char * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  std::string result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = ((Quackle::Simulator const *)arg1)->logfile();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Simulator_setDispatch(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::ComputerDispatch *)jarg2;
  (arg1)->setDispatch(arg2);
}


SWIGEXPORT void * D_Simulator_dispatch(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::ComputerDispatch *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (Quackle::ComputerDispatch *)((Quackle::Simulator const *)arg1)->dispatch();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Simulator_logMessage(void * jarg1, char * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->logMessage((UVString const &)*arg2);
}


SWIGEXPORT unsigned int D_Simulator_isLogging(void * jarg1) {
  unsigned int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (bool)((Quackle::Simulator const *)arg1)->isLogging();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Simulator_closeLogfile(void * jarg1) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  (arg1)->closeLogfile();
}


SWIGEXPORT void D_Simulator_setIncludedMoves(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList const & type is null");
    return ;
  } 
  (arg1)->setIncludedMoves((Quackle::MoveList const &)*arg2);
}


SWIGEXPORT void D_Simulator_makeSureConsideredMovesAreIncluded(void * jarg1) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  (arg1)->makeSureConsideredMovesAreIncluded();
}


SWIGEXPORT void D_Simulator_moveConsideredMovesToBeginning(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList & type is null");
    return ;
  } 
  ((Quackle::Simulator const *)arg1)->moveConsideredMovesToBeginning(*arg2);
}


SWIGEXPORT void D_Simulator_setConsideredMoves(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList const & type is null");
    return ;
  } 
  (arg1)->setConsideredMoves((Quackle::MoveList const &)*arg2);
}


SWIGEXPORT void * D_Simulator_consideredMoves(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (Quackle::MoveList *) &((Quackle::Simulator const *)arg1)->consideredMoves();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Simulator_addConsideredMove(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->addConsideredMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT unsigned int D_Simulator_isConsideredMove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (bool)((Quackle::Simulator const *)arg1)->isConsideredMove((Quackle::Move const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Simulator_pruneTo(void * jarg1, double jarg2, int jarg3) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  double arg2 ;
  int arg3 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (double)jarg2;
  arg3 = (int)jarg3;
  (arg1)->pruneTo(arg2,arg3);
}


SWIGEXPORT void D_Simulator_setIgnoreOppos(void * jarg1, unsigned int jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setIgnoreOppos(arg2);
}


SWIGEXPORT unsigned int D_Simulator_ignoreOppos(void * jarg1) {
  unsigned int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (bool)((Quackle::Simulator const *)arg1)->ignoreOppos();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Simulator_simThreadFunc(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessageQueue *arg1 = 0 ;
  Quackle::SimmedMoveMessageQueue *arg2 = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessageQueue *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveMessageQueue & type is null");
    return ;
  } 
  arg2 = (Quackle::SimmedMoveMessageQueue *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveMessageQueue & type is null");
    return ;
  } 
  Quackle::Simulator::simThreadFunc(*arg1,*arg2);
}


SWIGEXPORT void D_Simulator_setThreadCount(void * jarg1, size_t jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  size_t arg2 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (size_t)jarg2;
  (arg1)->setThreadCount(arg2);
}


SWIGEXPORT void D_Simulator_resetNumbers(void * jarg1) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  (arg1)->resetNumbers();
}


SWIGEXPORT void D_Simulator_simulate__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  (arg1)->simulate(arg2,arg3);
}


SWIGEXPORT void D_Simulator_simulate__SWIG_1(void * jarg1, int jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->simulate(arg2);
}


SWIGEXPORT void D_Simulator_simulateOnePosition(void * jarg1, void * jarg2) {
  Quackle::SimmedMoveMessage *arg1 = 0 ;
  Quackle::SimmedMoveConstants *arg2 = 0 ;
  
  arg1 = (Quackle::SimmedMoveMessage *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveMessage & type is null");
    return ;
  } 
  arg2 = (Quackle::SimmedMoveConstants *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveConstants const & type is null");
    return ;
  } 
  Quackle::Simulator::simulateOnePosition(*arg1,(Quackle::SimmedMoveConstants const &)*arg2);
}


SWIGEXPORT void D_Simulator_incorporateMessage(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::SimmedMoveMessage *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::SimmedMoveMessage *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::SimmedMoveMessage const & type is null");
    return ;
  } 
  (arg1)->incorporateMessage((Quackle::SimmedMoveMessage const &)*arg2);
}


SWIGEXPORT void D_Simulator_setPartialOppoRack(void * jarg1, void * jarg2) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Rack *arg2 = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return ;
  } 
  (arg1)->setPartialOppoRack((Quackle::Rack const &)*arg2);
}


SWIGEXPORT void * D_Simulator_partialOppoRack(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Rack *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (Quackle::Rack *) &((Quackle::Simulator const *)arg1)->partialOppoRack();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Simulator_randomizeOppoRacks(void * jarg1) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  (arg1)->randomizeOppoRacks();
}


SWIGEXPORT void D_Simulator_randomizeDrawingOrder(void * jarg1) {
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  (arg1)->randomizeDrawingOrder();
}


SWIGEXPORT int D_Simulator_iterations(void * jarg1) {
  int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (int)((Quackle::Simulator const *)arg1)->iterations();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Simulator_hasSimulationResults(void * jarg1) {
  unsigned int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (bool)((Quackle::Simulator const *)arg1)->hasSimulationResults();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Simulator_simmedMoves(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::SimmedMoveList *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (Quackle::SimmedMoveList *) &((Quackle::Simulator const *)arg1)->simmedMoves();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Simulator_moves__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool arg2 ;
  bool arg3 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  result = ((Quackle::Simulator const *)arg1)->moves(arg2,arg3);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Simulator_moves__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  bool arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = jarg2 ? true : false;
  result = ((Quackle::Simulator const *)arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Simulator_moves__SWIG_2(void * jarg1) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = ((Quackle::Simulator const *)arg1)->moves();
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Simulator_simmedMoveForMove(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  Quackle::SimmedMove *result = 0 ;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (Quackle::SimmedMove *) &((Quackle::Simulator const *)arg1)->simmedMoveForMove((Quackle::Move const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_Simulator_numLevels(void * jarg1) {
  int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  result = (int)((Quackle::Simulator const *)arg1)->numLevels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Simulator_numPlayersAtLevel(void * jarg1, int jarg2) {
  int jresult ;
  Quackle::Simulator *arg1 = (Quackle::Simulator *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Quackle::Simulator *)jarg1;
  arg2 = (int)jarg2;
  result = (int)((Quackle::Simulator const *)arg1)->numPlayersAtLevel(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_NULL_COMPUTER_PLAYER_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_QUACKLE_STATIC_COMPUTER_PLAYER_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ComputerParameters_secondsPerTurn_set(void * jarg1, int jarg2) {
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::ComputerParameters *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->secondsPerTurn = arg2;
}


SWIGEXPORT int D_ComputerParameters_secondsPerTurn_get(void * jarg1) {
  int jresult ;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::ComputerParameters *)jarg1;
  result = (int) ((arg1)->secondsPerTurn);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ComputerParameters_inferring_set(void * jarg1, unsigned int jarg2) {
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::ComputerParameters *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->inferring = arg2;
}


SWIGEXPORT unsigned int D_ComputerParameters_inferring_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::ComputerParameters *)jarg1;
  result = (bool) ((arg1)->inferring);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_ComputerParameters() {
  void * jresult ;
  Quackle::ComputerParameters *result = 0 ;
  
  result = (Quackle::ComputerParameters *)new Quackle::ComputerParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ComputerParameters(void * jarg1) {
  Quackle::ComputerParameters *arg1 = (Quackle::ComputerParameters *) 0 ;
  
  arg1 = (Quackle::ComputerParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_delete_ComputerDispatch(void * jarg1) {
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  
  arg1 = (Quackle::ComputerDispatch *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_ComputerDispatch_shouldAbort(void * jarg1) {
  unsigned int jresult ;
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  bool result;
  
  arg1 = (Quackle::ComputerDispatch *)jarg1;
  result = (bool)(arg1)->shouldAbort();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ComputerDispatch_signalFractionDone(void * jarg1, double jarg2) {
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::ComputerDispatch *)jarg1;
  arg2 = (double)jarg2;
  (arg1)->signalFractionDone(arg2);
}


SWIGEXPORT void * D_new_ScalingDispatch(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  Quackle::ComputerDispatch *arg1 = (Quackle::ComputerDispatch *) 0 ;
  double arg2 ;
  double arg3 ;
  Quackle::ScalingDispatch *result = 0 ;
  
  arg1 = (Quackle::ComputerDispatch *)jarg1;
  arg2 = (double)jarg2;
  arg3 = (double)jarg3;
  result = (Quackle::ScalingDispatch *)new Quackle::ScalingDispatch(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ScalingDispatch(void * jarg1) {
  Quackle::ScalingDispatch *arg1 = (Quackle::ScalingDispatch *) 0 ;
  
  arg1 = (Quackle::ScalingDispatch *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_ScalingDispatch_shouldAbort(void * jarg1) {
  unsigned int jresult ;
  Quackle::ScalingDispatch *arg1 = (Quackle::ScalingDispatch *) 0 ;
  bool result;
  
  arg1 = (Quackle::ScalingDispatch *)jarg1;
  result = (bool)(arg1)->shouldAbort();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ScalingDispatch_signalFractionDone(void * jarg1, double jarg2) {
  Quackle::ScalingDispatch *arg1 = (Quackle::ScalingDispatch *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::ScalingDispatch *)jarg1;
  arg2 = (double)jarg2;
  (arg1)->signalFractionDone(arg2);
}


SWIGEXPORT void D_delete_ComputerPlayer(void * jarg1) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_ComputerPlayer_setParameters(void * jarg1, void * jarg2) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerParameters *arg2 = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (Quackle::ComputerParameters *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::ComputerParameters const & type is null");
    return ;
  } 
  (arg1)->setParameters((Quackle::ComputerParameters const &)*arg2);
}


SWIGEXPORT void * D_ComputerPlayer_parameters(void * jarg1) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerParameters *result = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (Quackle::ComputerParameters *) &((Quackle::ComputerPlayer const *)arg1)->parameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ComputerPlayer_setPosition(void * jarg1, void * jarg2) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
}


SWIGEXPORT void * D_ComputerPlayer_currentPosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_ComputerPlayer_shouldAbort(void * jarg1) {
  unsigned int jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  bool result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (bool)(arg1)->shouldAbort();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ComputerPlayer_signalFractionDone(void * jarg1, double jarg2) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (double)jarg2;
  (arg1)->signalFractionDone(arg2);
}


SWIGEXPORT void D_ComputerPlayer_considerMove(void * jarg1, void * jarg2) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::Move *arg2 = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  (arg1)->considerMove((Quackle::Move const &)*arg2);
}


SWIGEXPORT void D_ComputerPlayer_setConsideredMoves(void * jarg1, void * jarg2) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList const & type is null");
    return ;
  } 
  (arg1)->setConsideredMoves((Quackle::MoveList const &)*arg2);
}


SWIGEXPORT char * D_ComputerPlayer_name(void * jarg1) {
  char * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  UVString *result = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (UVString *) &((Quackle::ComputerPlayer const *)arg1)->name();
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int D_ComputerPlayer_id(void * jarg1) {
  int jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  int result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (int)((Quackle::ComputerPlayer const *)arg1)->id();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_ComputerPlayer_move(void * jarg1) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (arg1)->move();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_ComputerPlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_ComputerPlayer_moves(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_ComputerPlayer_isSlow(void * jarg1) {
  unsigned int jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  bool result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (bool)((Quackle::ComputerPlayer const *)arg1)->isSlow();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_ComputerPlayer_isUserVisible(void * jarg1) {
  unsigned int jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  bool result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (bool)((Quackle::ComputerPlayer const *)arg1)->isUserVisible();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_ComputerPlayer_dispatch(void * jarg1) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerDispatch *result = 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = (Quackle::ComputerDispatch *)((Quackle::ComputerPlayer const *)arg1)->dispatch();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ComputerPlayer_setDispatch(void * jarg1, void * jarg2) {
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  arg2 = (Quackle::ComputerDispatch *)jarg2;
  (arg1)->setDispatch(arg2);
}


SWIGEXPORT void * D_new_StaticPlayer() {
  void * jresult ;
  Quackle::StaticPlayer *result = 0 ;
  
  result = (Quackle::StaticPlayer *)new Quackle::StaticPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_StaticPlayer(void * jarg1) {
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  
  arg1 = (Quackle::StaticPlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_StaticPlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::StaticPlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_StaticPlayer_move(void * jarg1) {
  void * jresult ;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::StaticPlayer *)jarg1;
  result = (arg1)->move();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_StaticPlayer_moves(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::StaticPlayer *arg1 = (Quackle::StaticPlayer *) 0 ;
  int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::StaticPlayer *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_ComputerPlayerCollection() {
  void * jresult ;
  Quackle::ComputerPlayerCollection *result = 0 ;
  
  result = (Quackle::ComputerPlayerCollection *)new Quackle::ComputerPlayerCollection();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ComputerPlayerCollection_addPlayer(void * jarg1, void * jarg2) {
  Quackle::ComputerPlayerCollection *arg1 = (Quackle::ComputerPlayerCollection *) 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  
  arg1 = (Quackle::ComputerPlayerCollection *)jarg1;
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  (arg1)->addPlayer(arg2);
}


SWIGEXPORT void * D_ComputerPlayerCollection_createPlayer(void * jarg1) {
  void * jresult ;
  Quackle::ComputerPlayer *arg1 = (Quackle::ComputerPlayer *) 0 ;
  Quackle::Player result;
  
  arg1 = (Quackle::ComputerPlayer *)jarg1;
  result = Quackle::ComputerPlayerCollection::createPlayer(arg1);
  jresult = new Quackle::Player((const Quackle::Player &)result); 
  return jresult;
}


SWIGEXPORT void * D_ComputerPlayerCollection_fullCollection() {
  void * jresult ;
  Quackle::ComputerPlayerCollection result;
  
  result = Quackle::ComputerPlayerCollection::fullCollection();
  jresult = new Quackle::ComputerPlayerCollection((const Quackle::ComputerPlayerCollection &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_ComputerPlayerCollection(void * jarg1) {
  Quackle::ComputerPlayerCollection *arg1 = (Quackle::ComputerPlayerCollection *) 0 ;
  
  arg1 = (Quackle::ComputerPlayerCollection *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_DataManager() {
  void * jresult ;
  Quackle::DataManager *result = 0 ;
  
  result = (Quackle::DataManager *)new Quackle::DataManager();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_DataManager(void * jarg1) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_DataManager_self() {
  void * jresult ;
  Quackle::DataManager *result = 0 ;
  
  result = (Quackle::DataManager *)Quackle::DataManager::self();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_DataManager_exists() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Quackle::DataManager::exists();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_DataManager_isGood(void * jarg1) {
  unsigned int jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  bool result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (bool)((Quackle::DataManager const *)arg1)->isGood();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_DataManager_evaluator(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::Evaluator *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::Evaluator *)(arg1)->evaluator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setEvaluator(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::Evaluator *arg2 = (Quackle::Evaluator *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::Evaluator *)jarg2;
  (arg1)->setEvaluator(arg2);
}


SWIGEXPORT void * D_DataManager_parameters(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::GameParameters *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::GameParameters *)(arg1)->parameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setParameters(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::GameParameters *arg2 = (Quackle::GameParameters *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::GameParameters *)jarg2;
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void * D_DataManager_alphabetParameters(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::AlphabetParameters *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::AlphabetParameters *)(arg1)->alphabetParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setAlphabetParameters(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::AlphabetParameters *arg2 = (Quackle::AlphabetParameters *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::AlphabetParameters *)jarg2;
  (arg1)->setAlphabetParameters(arg2);
}


SWIGEXPORT void * D_DataManager_boardParameters(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::BoardParameters *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::BoardParameters *)(arg1)->boardParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setBoardParameters(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::BoardParameters *arg2 = (Quackle::BoardParameters *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::BoardParameters *)jarg2;
  (arg1)->setBoardParameters(arg2);
}


SWIGEXPORT void * D_DataManager_lexiconParameters(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::LexiconParameters *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::LexiconParameters *)(arg1)->lexiconParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setLexiconParameters(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::LexiconParameters *arg2 = (Quackle::LexiconParameters *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::LexiconParameters *)jarg2;
  (arg1)->setLexiconParameters(arg2);
}


SWIGEXPORT void * D_DataManager_strategyParameters(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::StrategyParameters *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::StrategyParameters *)(arg1)->strategyParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setStrategyParameters(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::StrategyParameters *arg2 = (Quackle::StrategyParameters *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::StrategyParameters *)jarg2;
  (arg1)->setStrategyParameters(arg2);
}


SWIGEXPORT void * D_DataManager_computerPlayers(void * jarg1) {
  void * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::PlayerList *result = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (Quackle::PlayerList *) &((Quackle::DataManager const *)arg1)->computerPlayers();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DataManager_setComputerPlayers(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  Quackle::PlayerList *arg2 = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (Quackle::PlayerList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::PlayerList const & type is null");
    return ;
  } 
  (arg1)->setComputerPlayers((Quackle::PlayerList const &)*arg2);
}


SWIGEXPORT void D_DataManager_cleanupComputerPlayers(void * jarg1) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  (arg1)->cleanupComputerPlayers();
}


SWIGEXPORT char * D_DataManager_findDataFile__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->findDataFile((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_DataManager_findDataFile__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->findDataFile((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_DataManager_hasUserDataFile(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->hasUserDataFile((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_DataManager_makeDataFilename__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false;
  result = (arg1)->makeDataFilename((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_DataManager_makeDataFilename__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false;
  result = (arg1)->makeDataFilename((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_DataManager_setBackupLexicon(void * jarg1, char * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string arg2 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->setBackupLexicon(arg2);
}


SWIGEXPORT char * D_DataManager_backupLexicon(void * jarg1) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (arg1)->backupLexicon();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_DataManager_setAppDataDirectory(void * jarg1, char * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string arg2 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->setAppDataDirectory(arg2);
}


SWIGEXPORT char * D_DataManager_appDataDirectory(void * jarg1) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (arg1)->appDataDirectory();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_DataManager_setUserDataDirectory(void * jarg1, char * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string arg2 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->setUserDataDirectory(arg2);
}


SWIGEXPORT char * D_DataManager_userDataDirectory(void * jarg1) {
  char * jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  std::string result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  result = (arg1)->userDataDirectory();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_DataManager_seedRandomNumbers__SWIG_0(void * jarg1, unsigned int jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->seedRandomNumbers(arg2);
}


SWIGEXPORT void D_DataManager_seedRandomNumbers__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  seed_seq *arg2 = 0 ;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (seed_seq *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "seed_seq & type is null");
    return ;
  } 
  (arg1)->seedRandomNumbers(*arg2);
}


SWIGEXPORT int D_DataManager_randomInteger(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Quackle::DataManager *arg1 = (Quackle::DataManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Quackle::DataManager *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->randomInteger(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_EndgameMove(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = 0 ;
  Quackle::EndgameMove *result = 0 ;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = (Quackle::EndgameMove *)new Quackle::EndgameMove((Quackle::Move const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_EndgameMove_move_set(void * jarg1, void * jarg2) {
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  Quackle::Move *arg2 = (Quackle::Move *) 0 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (arg1) (arg1)->move = *arg2;
}


SWIGEXPORT void * D_EndgameMove_move_get(void * jarg1) {
  void * jresult ;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  Quackle::Move *result = 0 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  result = (Quackle::Move *)& ((arg1)->move);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_EndgameMove_optimistic_set(void * jarg1, double jarg2) {
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->optimistic = arg2;
}


SWIGEXPORT double D_EndgameMove_optimistic_get(void * jarg1) {
  double jresult ;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double result;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  result = (double) ((arg1)->optimistic);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_EndgameMove_pessimistic_set(void * jarg1, double jarg2) {
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->pessimistic = arg2;
}


SWIGEXPORT double D_EndgameMove_pessimistic_get(void * jarg1) {
  double jresult ;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double result;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  result = (double) ((arg1)->pessimistic);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_EndgameMove_estimated_set(void * jarg1, double jarg2) {
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->estimated = arg2;
}


SWIGEXPORT double D_EndgameMove_estimated_get(void * jarg1) {
  double jresult ;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  double result;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  result = (double) ((arg1)->estimated);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_EndgameMove_outplay_set(void * jarg1, unsigned int jarg2) {
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->outplay = arg2;
}


SWIGEXPORT unsigned int D_EndgameMove_outplay_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  bool result;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  result = (bool) ((arg1)->outplay);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_EndgameMove(void * jarg1) {
  Quackle::EndgameMove *arg1 = (Quackle::EndgameMove *) 0 ;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_EndgameMoveList_optimisticComparator(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::EndgameMove *arg1 = 0 ;
  Quackle::EndgameMove *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::EndgameMove *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::EndgameMove const & type is null");
    return 0;
  } 
  arg2 = (Quackle::EndgameMove *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::EndgameMove const & type is null");
    return 0;
  } 
  result = (bool)Quackle::EndgameMoveList::optimisticComparator((Quackle::EndgameMove const &)*arg1,(Quackle::EndgameMove const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_EndgameMoveList() {
  void * jresult ;
  Quackle::EndgameMoveList *result = 0 ;
  
  result = (Quackle::EndgameMoveList *)new Quackle::EndgameMoveList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_EndgameMoveList(void * jarg1) {
  Quackle::EndgameMoveList *arg1 = (Quackle::EndgameMoveList *) 0 ;
  
  arg1 = (Quackle::EndgameMoveList *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Endgame() {
  void * jresult ;
  Quackle::Endgame *result = 0 ;
  
  result = (Quackle::Endgame *)new Quackle::Endgame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Endgame(void * jarg1) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Endgame_setPosition(void * jarg1, void * jarg2) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
}


SWIGEXPORT void * D_Endgame_currentPosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  result = (Quackle::GamePosition *) &(arg1)->currentPosition();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Endgame_setDispatch(void * jarg1, void * jarg2) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (Quackle::ComputerDispatch *)jarg2;
  (arg1)->setDispatch(arg2);
}


SWIGEXPORT void D_Endgame_setLogfile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false;
  (arg1)->setLogfile((std::string const &)*arg2,arg3);
}


SWIGEXPORT void D_Endgame_setLogfile__SWIG_1(void * jarg1, char * jarg2) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setLogfile((std::string const &)*arg2);
}


SWIGEXPORT char * D_Endgame_logfile(void * jarg1) {
  char * jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  std::string result;
  
  arg1 = (Quackle::Endgame *)jarg1;
  result = ((Quackle::Endgame const *)arg1)->logfile();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Endgame_logMessage(void * jarg1, char * jarg2) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  UVString *arg2 = 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  UVString arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->logMessage((UVString const &)*arg2);
}


SWIGEXPORT unsigned int D_Endgame_isLogging(void * jarg1) {
  unsigned int jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  bool result;
  
  arg1 = (Quackle::Endgame *)jarg1;
  result = (bool)((Quackle::Endgame const *)arg1)->isLogging();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Endgame_closeLogfile(void * jarg1) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  (arg1)->closeLogfile();
}


SWIGEXPORT void D_Endgame_setIncludedMoves(void * jarg1, void * jarg2) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::MoveList *arg2 = 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (Quackle::MoveList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::MoveList const & type is null");
    return ;
  } 
  (arg1)->setIncludedMoves((Quackle::MoveList const &)*arg2);
}


SWIGEXPORT void * D_Endgame_moves(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  unsigned int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (unsigned int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Endgame_endgameMoves(void * jarg1) {
  void * jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::EndgameMoveList *result = 0 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  result = (Quackle::EndgameMoveList *) &((Quackle::Endgame const *)arg1)->endgameMoves();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Endgame_solve(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  int arg2 ;
  Quackle::Move result;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->solve(arg2);
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void D_Endgame_reallyPlayOut(void * jarg1, void * jarg2, int jarg3) {
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::Move *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move & type is null");
    return ;
  } 
  arg3 = (int)jarg3;
  (arg1)->reallyPlayOut(*arg2,arg3);
}


SWIGEXPORT double D_Endgame_disappoint(void * jarg1, void * jarg2, double jarg3) {
  double jresult ;
  Quackle::Endgame *arg1 = (Quackle::Endgame *) 0 ;
  Quackle::EndgameMove *arg2 = 0 ;
  double arg3 ;
  double result;
  
  arg1 = (Quackle::Endgame *)jarg1;
  arg2 = (Quackle::EndgameMove *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::EndgameMove & type is null");
    return 0;
  } 
  arg3 = (double)jarg3;
  result = (double)(arg1)->disappoint(*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_EndgamePlayer() {
  void * jresult ;
  Quackle::EndgamePlayer *result = 0 ;
  
  result = (Quackle::EndgamePlayer *)new Quackle::EndgamePlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_EndgamePlayer(void * jarg1) {
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  
  arg1 = (Quackle::EndgamePlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_EndgamePlayer_move(void * jarg1) {
  void * jresult ;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::EndgamePlayer *)jarg1;
  result = (arg1)->move();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_EndgamePlayer_moves(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::EndgamePlayer *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_EndgamePlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::EndgamePlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_EndgamePlayer_isUserVisible(void * jarg1) {
  unsigned int jresult ;
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  bool result;
  
  arg1 = (Quackle::EndgamePlayer *)jarg1;
  result = (bool)((Quackle::EndgamePlayer const *)arg1)->isUserVisible();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_EndgamePlayer_setDispatch(void * jarg1, void * jarg2) {
  Quackle::EndgamePlayer *arg1 = (Quackle::EndgamePlayer *) 0 ;
  Quackle::ComputerDispatch *arg2 = (Quackle::ComputerDispatch *) 0 ;
  
  arg1 = (Quackle::EndgamePlayer *)jarg1;
  arg2 = (Quackle::ComputerDispatch *)jarg2;
  (arg1)->setDispatch(arg2);
}


SWIGEXPORT void D_ProbableRack_rack_set(void * jarg1, void * jarg2) {
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  Quackle::Rack *arg2 = (Quackle::Rack *) 0 ;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  arg2 = (Quackle::Rack *)jarg2;
  if (arg1) (arg1)->rack = *arg2;
}


SWIGEXPORT void * D_ProbableRack_rack_get(void * jarg1) {
  void * jresult ;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  Quackle::Rack *result = 0 ;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  result = (Quackle::Rack *)& ((arg1)->rack);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ProbableRack_probability_set(void * jarg1, double jarg2) {
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->probability = arg2;
}


SWIGEXPORT double D_ProbableRack_probability_get(void * jarg1) {
  double jresult ;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  double result;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  result = (double) ((arg1)->probability);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ProbableRack_possibility_set(void * jarg1, double jarg2) {
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->possibility = arg2;
}


SWIGEXPORT double D_ProbableRack_possibility_get(void * jarg1) {
  double jresult ;
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  double result;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  result = (double) ((arg1)->possibility);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_ProbableRack() {
  void * jresult ;
  Quackle::ProbableRack *result = 0 ;
  
  result = (Quackle::ProbableRack *)new Quackle::ProbableRack();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ProbableRack(void * jarg1) {
  Quackle::ProbableRack *arg1 = (Quackle::ProbableRack *) 0 ;
  
  arg1 = (Quackle::ProbableRack *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Enumerator(void * jarg1) {
  void * jresult ;
  Quackle::Bag *arg1 = 0 ;
  Quackle::Enumerator *result = 0 ;
  
  arg1 = (Quackle::Bag *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Bag & type is null");
    return 0;
  } 
  result = (Quackle::Enumerator *)new Quackle::Enumerator(*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Enumerator_enumerate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  Quackle::ProbableRackList *arg2 = (Quackle::ProbableRackList *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (Quackle::Enumerator *)jarg1;
  arg2 = (Quackle::ProbableRackList *)jarg2;
  arg3 = (unsigned int)jarg3;
  (arg1)->enumerate(arg2,arg3);
}


SWIGEXPORT void D_Enumerator_enumerate__SWIG_1(void * jarg1, void * jarg2) {
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  Quackle::ProbableRackList *arg2 = (Quackle::ProbableRackList *) 0 ;
  
  arg1 = (Quackle::Enumerator *)jarg1;
  arg2 = (Quackle::ProbableRackList *)jarg2;
  (arg1)->enumerate(arg2);
}


SWIGEXPORT void D_Enumerator_enumeratePossible(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  Quackle::ProbableRackList *arg2 = (Quackle::ProbableRackList *) 0 ;
  Quackle::Bag *arg3 = 0 ;
  
  arg1 = (Quackle::Enumerator *)jarg1;
  arg2 = (Quackle::ProbableRackList *)jarg2;
  arg3 = (Quackle::Bag *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Bag const & type is null");
    return ;
  } 
  (arg1)->enumeratePossible(arg2,(Quackle::Bag const &)*arg3);
}


SWIGEXPORT void D_Enumerator_normalizeProbabilities(void * jarg1) {
  Quackle::ProbableRackList *arg1 = (Quackle::ProbableRackList *) 0 ;
  
  arg1 = (Quackle::ProbableRackList *)jarg1;
  Quackle::Enumerator::normalizeProbabilities(arg1);
}


SWIGEXPORT void D_delete_Enumerator(void * jarg1) {
  Quackle::Enumerator *arg1 = (Quackle::Enumerator *) 0 ;
  
  arg1 = (Quackle::Enumerator *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_SmartBogowin() {
  void * jresult ;
  Quackle::SmartBogowin *result = 0 ;
  
  result = (Quackle::SmartBogowin *)new Quackle::SmartBogowin();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_SmartBogowin(void * jarg1) {
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_SmartBogowin_move(void * jarg1) {
  void * jresult ;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  result = (arg1)->move();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_SmartBogowin_moves(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_SmartBogowin_clone(void * jarg1) {
  void * jresult ;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_SmartBogowin_isSlow(void * jarg1) {
  unsigned int jresult ;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  bool result;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  result = (bool)((Quackle::SmartBogowin const *)arg1)->isSlow();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SmartBogowin_isUserVisible(void * jarg1) {
  unsigned int jresult ;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  bool result;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  result = (bool)((Quackle::SmartBogowin const *)arg1)->isUserVisible();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_SmartBogowin_bogopoints(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::SmartBogowin *arg1 = (Quackle::SmartBogowin *) 0 ;
  Quackle::Move *arg2 = 0 ;
  double result;
  
  arg1 = (Quackle::SmartBogowin *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move & type is null");
    return 0;
  } 
  result = (double)(arg1)->bogopoints(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Stopwatch() {
  void * jresult ;
  Quackle::Stopwatch *result = 0 ;
  
  result = (Quackle::Stopwatch *)new Quackle::Stopwatch();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Stopwatch_start(void * jarg1) {
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  
  arg1 = (Quackle::Stopwatch *)jarg1;
  (arg1)->start();
}


SWIGEXPORT int D_Stopwatch_elapsed(void * jarg1) {
  int jresult ;
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  int result;
  
  arg1 = (Quackle::Stopwatch *)jarg1;
  result = (int)((Quackle::Stopwatch const *)arg1)->elapsed();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Stopwatch_exceeded(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Quackle::Stopwatch *)jarg1;
  arg2 = (int)jarg2;
  result = (bool)((Quackle::Stopwatch const *)arg1)->exceeded(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_Stopwatch(void * jarg1) {
  Quackle::Stopwatch *arg1 = (Quackle::Stopwatch *) 0 ;
  
  arg1 = (Quackle::Stopwatch *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_ExtensionWithInfo() {
  void * jresult ;
  Quackle::ExtensionWithInfo *result = 0 ;
  
  result = (Quackle::ExtensionWithInfo *)new Quackle::ExtensionWithInfo();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ExtensionWithInfo_extensionLetterString_set(void * jarg1, void * jarg2) {
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  Quackle::LetterString *arg2 = (Quackle::LetterString *) 0 ;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (arg1) (arg1)->extensionLetterString = *arg2;
}


SWIGEXPORT void * D_ExtensionWithInfo_extensionLetterString_get(void * jarg1) {
  void * jresult ;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  Quackle::LetterString *result = 0 ;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  result = (Quackle::LetterString *)& ((arg1)->extensionLetterString);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_ExtensionWithInfo_playability_set(void * jarg1, int jarg2) {
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->playability = arg2;
}


SWIGEXPORT int D_ExtensionWithInfo_playability_get(void * jarg1) {
  int jresult ;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  int result;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  result = (int) ((arg1)->playability);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ExtensionWithInfo_probability_set(void * jarg1, double jarg2) {
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->probability = arg2;
}


SWIGEXPORT double D_ExtensionWithInfo_probability_get(void * jarg1) {
  double jresult ;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  double result;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  result = (double) ((arg1)->probability);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_ExtensionWithInfo_british_set(void * jarg1, unsigned int jarg2) {
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->british = arg2;
}


SWIGEXPORT unsigned int D_ExtensionWithInfo_british_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  bool result;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  result = (bool) ((arg1)->british);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_ExtensionWithInfo(void * jarg1) {
  Quackle::ExtensionWithInfo *arg1 = (Quackle::ExtensionWithInfo *) 0 ;
  
  arg1 = (Quackle::ExtensionWithInfo *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_WordWithInfo() {
  void * jresult ;
  Quackle::WordWithInfo *result = 0 ;
  
  result = (Quackle::WordWithInfo *)new Quackle::WordWithInfo();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_WordWithInfo_wordLetterString_set(void * jarg1, void * jarg2) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  Quackle::LetterString *arg2 = (Quackle::LetterString *) 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (arg1) (arg1)->wordLetterString = *arg2;
}


SWIGEXPORT void * D_WordWithInfo_wordLetterString_get(void * jarg1) {
  void * jresult ;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  Quackle::LetterString *result = 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  result = (Quackle::LetterString *)& ((arg1)->wordLetterString);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_WordWithInfo_playability_set(void * jarg1, int jarg2) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->playability = arg2;
}


SWIGEXPORT int D_WordWithInfo_playability_get(void * jarg1) {
  int jresult ;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  int result;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  result = (int) ((arg1)->playability);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_WordWithInfo_probability_set(void * jarg1, double jarg2) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  double arg2 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->probability = arg2;
}


SWIGEXPORT double D_WordWithInfo_probability_get(void * jarg1) {
  double jresult ;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  double result;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  result = (double) ((arg1)->probability);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_WordWithInfo_british_set(void * jarg1, unsigned int jarg2) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->british = arg2;
}


SWIGEXPORT unsigned int D_WordWithInfo_british_get(void * jarg1) {
  unsigned int jresult ;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  bool result;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  result = (bool) ((arg1)->british);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_WordWithInfo_frontExtensions_set(void * jarg1, void * jarg2) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  std::vector< Quackle::ExtensionWithInfo > *arg2 = (std::vector< Quackle::ExtensionWithInfo > *) 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  arg2 = (std::vector< Quackle::ExtensionWithInfo > *)jarg2;
  if (arg1) (arg1)->frontExtensions = *arg2;
}


SWIGEXPORT void * D_WordWithInfo_frontExtensions_get(void * jarg1) {
  void * jresult ;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  std::vector< Quackle::ExtensionWithInfo > *result = 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  result = (std::vector< Quackle::ExtensionWithInfo > *)& ((arg1)->frontExtensions);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_WordWithInfo_backExtensions_set(void * jarg1, void * jarg2) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  std::vector< Quackle::ExtensionWithInfo > *arg2 = (std::vector< Quackle::ExtensionWithInfo > *) 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  arg2 = (std::vector< Quackle::ExtensionWithInfo > *)jarg2;
  if (arg1) (arg1)->backExtensions = *arg2;
}


SWIGEXPORT void * D_WordWithInfo_backExtensions_get(void * jarg1) {
  void * jresult ;
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  std::vector< Quackle::ExtensionWithInfo > *result = 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  result = (std::vector< Quackle::ExtensionWithInfo > *)& ((arg1)->backExtensions);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_WordWithInfo(void * jarg1) {
  Quackle::WordWithInfo *arg1 = (Quackle::WordWithInfo *) 0 ;
  
  arg1 = (Quackle::WordWithInfo *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Generator__SWIG_0() {
  void * jresult ;
  Quackle::Generator *result = 0 ;
  
  result = (Quackle::Generator *)new Quackle::Generator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Generator__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::GamePosition *arg1 = 0 ;
  Quackle::Generator *result = 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return 0;
  } 
  result = (Quackle::Generator *)new Quackle::Generator((Quackle::GamePosition const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Generator(void * jarg1) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Generator_kibitz__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  (arg1)->kibitz(arg2,arg3);
}


SWIGEXPORT void D_Generator_kibitz__SWIG_1(void * jarg1, int jarg2) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  int arg2 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->kibitz(arg2);
}


SWIGEXPORT void D_Generator_kibitz__SWIG_2(void * jarg1) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  (arg1)->kibitz();
}


SWIGEXPORT void * D_Generator_kibitzList(void * jarg1) {
  void * jresult ;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::MoveList *result = 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  result = (Quackle::MoveList *) &(arg1)->kibitzList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Generator_allPossiblePlays(void * jarg1) {
  void * jresult ;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::MoveList *result = 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  result = (Quackle::MoveList *) &(arg1)->allPossiblePlays();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Generator_setPosition(void * jarg1, void * jarg2) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::GamePosition *arg2 = 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::GamePosition *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  (arg1)->setPosition((Quackle::GamePosition const &)*arg2);
}


SWIGEXPORT void * D_Generator_position(void * jarg1) {
  void * jresult ;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::GamePosition *result = 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  result = (Quackle::GamePosition *) &((Quackle::Generator const *)arg1)->position();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Generator_makeMove(void * jarg1, void * jarg2, unsigned int jarg3) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::Move *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::Move *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return ;
  } 
  arg3 = jarg3 ? true : false;
  (arg1)->makeMove((Quackle::Move const &)*arg2,arg3);
}


SWIGEXPORT unsigned int D_Generator_isAcceptableWord(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  bool result;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->isAcceptableWord((Quackle::LetterString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Generator_anagramLetters__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  int arg3 ;
  Quackle::WordList result;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  arg3 = (int)jarg3;
  result = (arg1)->anagramLetters((Quackle::LetterString const &)*arg2,arg3);
  jresult = new Quackle::WordList((const Quackle::WordList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Generator_anagramLetters__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::LetterString *arg2 = 0 ;
  Quackle::WordList result;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::LetterString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = (arg1)->anagramLetters((Quackle::LetterString const &)*arg2);
  jresult = new Quackle::WordList((const Quackle::WordList &)result); 
  return jresult;
}


SWIGEXPORT void D_Generator_storeWordInfo(void * jarg1, void * jarg2) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::WordWithInfo *arg2 = (Quackle::WordWithInfo *) 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::WordWithInfo *)jarg2;
  (arg1)->storeWordInfo(arg2);
}


SWIGEXPORT void D_Generator_storeExtensions(void * jarg1, void * jarg2) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  Quackle::WordWithInfo *arg2 = (Quackle::WordWithInfo *) 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  arg2 = (Quackle::WordWithInfo *)jarg2;
  (arg1)->storeExtensions(arg2);
}


SWIGEXPORT void D_Generator_allCrosses(void * jarg1) {
  Quackle::Generator *arg1 = (Quackle::Generator *) 0 ;
  
  arg1 = (Quackle::Generator *)jarg1;
  (arg1)->allCrosses();
}


SWIGEXPORT int D_QUACKLE_GADDAG_SEPARATOR_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned char D_GaddagNode_letter(void * jarg1) {
  unsigned char jresult ;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  Quackle::Letter result;
  
  arg1 = (Quackle::GaddagNode *)jarg1;
  result = (Quackle::Letter)((Quackle::GaddagNode const *)arg1)->letter();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_GaddagNode_isTerminal(void * jarg1) {
  unsigned int jresult ;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  bool result;
  
  arg1 = (Quackle::GaddagNode *)jarg1;
  result = (bool)((Quackle::GaddagNode const *)arg1)->isTerminal();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_GaddagNode_firstChild(void * jarg1) {
  void * jresult ;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  Quackle::GaddagNode *result = 0 ;
  
  arg1 = (Quackle::GaddagNode *)jarg1;
  result = (Quackle::GaddagNode *)((Quackle::GaddagNode const *)arg1)->firstChild();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GaddagNode_nextSibling(void * jarg1) {
  void * jresult ;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  Quackle::GaddagNode *result = 0 ;
  
  arg1 = (Quackle::GaddagNode *)jarg1;
  result = (Quackle::GaddagNode *)((Quackle::GaddagNode const *)arg1)->nextSibling();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GaddagNode_child(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::GaddagNode *result = 0 ;
  
  arg1 = (Quackle::GaddagNode *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (Quackle::GaddagNode *)((Quackle::GaddagNode const *)arg1)->child(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_GaddagNode() {
  void * jresult ;
  Quackle::GaddagNode *result = 0 ;
  
  result = (Quackle::GaddagNode *)new Quackle::GaddagNode();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_GaddagNode(void * jarg1) {
  Quackle::GaddagNode *arg1 = (Quackle::GaddagNode *) 0 ;
  
  arg1 = (Quackle::GaddagNode *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_LexiconInterpreter_loadDawg(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  ifstream *arg2 = 0 ;
  Quackle::LexiconParameters *arg3 = 0 ;
  
  arg1 = (Quackle::LexiconInterpreter *)jarg1;
  arg2 = (ifstream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "ifstream & type is null");
    return ;
  } 
  arg3 = (Quackle::LexiconParameters *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LexiconParameters & type is null");
    return ;
  } 
  (arg1)->loadDawg(*arg2,*arg3);
}


SWIGEXPORT void D_LexiconInterpreter_loadGaddag(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  ifstream *arg2 = 0 ;
  Quackle::LexiconParameters *arg3 = 0 ;
  
  arg1 = (Quackle::LexiconInterpreter *)jarg1;
  arg2 = (ifstream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "ifstream & type is null");
    return ;
  } 
  arg3 = (Quackle::LexiconParameters *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LexiconParameters & type is null");
    return ;
  } 
  (arg1)->loadGaddag(*arg2,*arg3);
}


SWIGEXPORT void D_LexiconInterpreter_dawgAt(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  unsigned int *arg4 = 0 ;
  Quackle::Letter *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  int *arg9 = 0 ;
  
  arg1 = (Quackle::LexiconInterpreter *)jarg1;
  arg2 = (unsigned char *)jarg2;
  arg3 = (int)jarg3;
  arg4 = (unsigned int *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "unsigned int & type is null");
    return ;
  } 
  arg5 = (Quackle::Letter *)jarg5;
  if (!arg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Letter & type is null");
    return ;
  } 
  arg6 = (bool *)jarg6;
  if (!arg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return ;
  } 
  arg7 = (bool *)jarg7;
  if (!arg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return ;
  } 
  arg8 = (bool *)jarg8;
  if (!arg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return ;
  } 
  arg9 = (int *)jarg9;
  if (!arg9) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "int & type is null");
    return ;
  } 
  ((Quackle::LexiconInterpreter const *)arg1)->dawgAt((unsigned char const *)arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT int D_LexiconInterpreter_versionNumber(void * jarg1) {
  int jresult ;
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  int result;
  
  arg1 = (Quackle::LexiconInterpreter *)jarg1;
  result = (int)((Quackle::LexiconInterpreter const *)arg1)->versionNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_LexiconInterpreter(void * jarg1) {
  Quackle::LexiconInterpreter *arg1 = (Quackle::LexiconInterpreter *) 0 ;
  
  arg1 = (Quackle::LexiconInterpreter *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_LexiconParameters() {
  void * jresult ;
  Quackle::LexiconParameters *result = 0 ;
  
  result = (Quackle::LexiconParameters *)new Quackle::LexiconParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_LexiconParameters(void * jarg1) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_LexiconParameters_unloadAll(void * jarg1) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  (arg1)->unloadAll();
}


SWIGEXPORT unsigned int D_LexiconParameters_hasSomething(void * jarg1) {
  unsigned int jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = (bool)((Quackle::LexiconParameters const *)arg1)->hasSomething();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LexiconParameters_loadDawg(void * jarg1, char * jarg2) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->loadDawg((std::string const &)*arg2);
}


SWIGEXPORT void D_LexiconParameters_unloadDawg(void * jarg1) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  (arg1)->unloadDawg();
}


SWIGEXPORT unsigned int D_LexiconParameters_hasDawg(void * jarg1) {
  unsigned int jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = (bool)((Quackle::LexiconParameters const *)arg1)->hasDawg();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_LexiconParameters_dawgVersion(void * jarg1) {
  int jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  int result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = (int)((Quackle::LexiconParameters const *)arg1)->dawgVersion();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LexiconParameters_loadGaddag(void * jarg1, char * jarg2) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->loadGaddag((std::string const &)*arg2);
}


SWIGEXPORT void D_LexiconParameters_unloadGaddag(void * jarg1) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  (arg1)->unloadGaddag();
}


SWIGEXPORT unsigned int D_LexiconParameters_hasGaddag(void * jarg1) {
  unsigned int jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = (bool)((Quackle::LexiconParameters const *)arg1)->hasGaddag();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_LexiconParameters_findDictionaryFile(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = Quackle::LexiconParameters::findDictionaryFile((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_LexiconParameters_hasUserDictionaryFile(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)Quackle::LexiconParameters::hasUserDictionaryFile((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_LexiconParameters_lexiconName(void * jarg1) {
  char * jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::string result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = ((Quackle::LexiconParameters const *)arg1)->lexiconName();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LexiconParameters_setLexiconName(void * jarg1, char * jarg2) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setLexiconName((std::string const &)*arg2);
}


SWIGEXPORT void D_LexiconParameters_dawgAt(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  Quackle::Letter *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  int *arg8 = 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (unsigned int *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "unsigned int & type is null");
    return ;
  } 
  arg4 = (Quackle::Letter *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Letter & type is null");
    return ;
  } 
  arg5 = (bool *)jarg5;
  if (!arg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return ;
  } 
  arg6 = (bool *)jarg6;
  if (!arg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return ;
  } 
  arg7 = (bool *)jarg7;
  if (!arg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "bool & type is null");
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "int & type is null");
    return ;
  } 
  ((Quackle::LexiconParameters const *)arg1)->dawgAt(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
}


SWIGEXPORT void * D_LexiconParameters_gaddagRoot(void * jarg1) {
  void * jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  Quackle::GaddagNode *result = 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = (Quackle::GaddagNode *)((Quackle::LexiconParameters const *)arg1)->gaddagRoot();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_LexiconParameters_hashString(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  bool arg2 ;
  std::string result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  arg2 = jarg2 ? true : false;
  result = ((Quackle::LexiconParameters const *)arg1)->hashString(arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_LexiconParameters_copyrightString(void * jarg1) {
  char * jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::string result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = ((Quackle::LexiconParameters const *)arg1)->copyrightString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_LexiconParameters_logoFileName(void * jarg1) {
  char * jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::string result;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = ((Quackle::LexiconParameters const *)arg1)->logoFileName();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_LexiconParameters_utf8Alphabet(void * jarg1) {
  void * jresult ;
  Quackle::LexiconParameters *arg1 = (Quackle::LexiconParameters *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (Quackle::LexiconParameters *)jarg1;
  result = (std::vector< std::string > *) &((Quackle::LexiconParameters const *)arg1)->utf8Alphabet();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Preendgame() {
  void * jresult ;
  Quackle::Preendgame *result = 0 ;
  
  result = (Quackle::Preendgame *)new Quackle::Preendgame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Preendgame(void * jarg1) {
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  
  arg1 = (Quackle::Preendgame *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_Preendgame_move(void * jarg1) {
  void * jresult ;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::Preendgame *)jarg1;
  result = (arg1)->move();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Preendgame_moves(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Preendgame *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Preendgame_clone(void * jarg1) {
  void * jresult ;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::Preendgame *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Preendgame_isUserVisible(void * jarg1) {
  unsigned int jresult ;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  bool result;
  
  arg1 = (Quackle::Preendgame *)jarg1;
  result = (bool)((Quackle::Preendgame const *)arg1)->isUserVisible();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Preendgame_isSlow(void * jarg1) {
  unsigned int jresult ;
  Quackle::Preendgame *arg1 = (Quackle::Preendgame *) 0 ;
  bool result;
  
  arg1 = (Quackle::Preendgame *)jarg1;
  result = (bool)((Quackle::Preendgame const *)arg1)->isSlow();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Preendgame_maximumTilesInBagToEngage() {
  int jresult ;
  int result;
  
  result = (int)Quackle::Preendgame::maximumTilesInBagToEngage();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Reporter() {
  void * jresult ;
  Quackle::Reporter *result = 0 ;
  
  result = (Quackle::Reporter *)new Quackle::Reporter();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Reporter_reportPosition(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::GamePosition *arg1 = 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  UVString *arg3 = (UVString *) 0 ;
  
  arg1 = (Quackle::GamePosition *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::GamePosition const & type is null");
    return ;
  } 
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  arg3 = (UVString *)jarg3;
  Quackle::Reporter::reportPosition((Quackle::GamePosition const &)*arg1,arg2,arg3);
}


SWIGEXPORT void D_Reporter_reportGameStatistics(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = 0 ;
  UVString *arg2 = (UVString *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Game const & type is null");
    return ;
  } 
  arg2 = (UVString *)jarg2;
  Quackle::Reporter::reportGameStatistics((Quackle::Game const &)*arg1,arg2);
}


SWIGEXPORT void D_Reporter_reportHeader(void * jarg1, void * jarg2) {
  Quackle::Game *arg1 = 0 ;
  UVString *arg2 = (UVString *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Game const & type is null");
    return ;
  } 
  arg2 = (UVString *)jarg2;
  Quackle::Reporter::reportHeader((Quackle::Game const &)*arg1,arg2);
}


SWIGEXPORT void D_Reporter_reportGame(void * jarg1, void * jarg2, void * jarg3) {
  Quackle::Game *arg1 = 0 ;
  Quackle::ComputerPlayer *arg2 = (Quackle::ComputerPlayer *) 0 ;
  UVString *arg3 = (UVString *) 0 ;
  
  arg1 = (Quackle::Game *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Game const & type is null");
    return ;
  } 
  arg2 = (Quackle::ComputerPlayer *)jarg2;
  arg3 = (UVString *)jarg3;
  Quackle::Reporter::reportGame((Quackle::Game const &)*arg1,arg2,arg3);
}


SWIGEXPORT void D_delete_Reporter(void * jarg1) {
  Quackle::Reporter *arg1 = (Quackle::Reporter *) 0 ;
  
  arg1 = (Quackle::Reporter *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Resolvent() {
  void * jresult ;
  Quackle::Resolvent *result = 0 ;
  
  result = (Quackle::Resolvent *)new Quackle::Resolvent();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Resolvent(void * jarg1) {
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  
  arg1 = (Quackle::Resolvent *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_Resolvent_move(void * jarg1) {
  void * jresult ;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  Quackle::Move result;
  
  arg1 = (Quackle::Resolvent *)jarg1;
  result = (arg1)->move();
  jresult = new Quackle::Move((const Quackle::Move &)result); 
  return jresult;
}


SWIGEXPORT void * D_Resolvent_moves(void * jarg1, int jarg2) {
  void * jresult ;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  int arg2 ;
  Quackle::MoveList result;
  
  arg1 = (Quackle::Resolvent *)jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->moves(arg2);
  jresult = new Quackle::MoveList((const Quackle::MoveList &)result); 
  return jresult;
}


SWIGEXPORT void * D_Resolvent_clone(void * jarg1) {
  void * jresult ;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::Resolvent *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Resolvent_isSlow(void * jarg1) {
  unsigned int jresult ;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  bool result;
  
  arg1 = (Quackle::Resolvent *)jarg1;
  result = (bool)((Quackle::Resolvent const *)arg1)->isSlow();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Resolvent_isUserVisible(void * jarg1) {
  unsigned int jresult ;
  Quackle::Resolvent *arg1 = (Quackle::Resolvent *) 0 ;
  bool result;
  
  arg1 = (Quackle::Resolvent *)jarg1;
  result = (bool)((Quackle::Resolvent const *)arg1)->isUserVisible();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_InferringPlayer() {
  void * jresult ;
  Quackle::InferringPlayer *result = 0 ;
  
  result = (Quackle::InferringPlayer *)new Quackle::InferringPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_InferringPlayer(void * jarg1) {
  Quackle::InferringPlayer *arg1 = (Quackle::InferringPlayer *) 0 ;
  
  arg1 = (Quackle::InferringPlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_InferringPlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::InferringPlayer *arg1 = (Quackle::InferringPlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::InferringPlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TorontoPlayer() {
  void * jresult ;
  Quackle::TorontoPlayer *result = 0 ;
  
  result = (Quackle::TorontoPlayer *)new Quackle::TorontoPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TorontoPlayer(void * jarg1) {
  Quackle::TorontoPlayer *arg1 = (Quackle::TorontoPlayer *) 0 ;
  
  arg1 = (Quackle::TorontoPlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TorontoPlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::TorontoPlayer *arg1 = (Quackle::TorontoPlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::TorontoPlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_FiveMinutePlayer() {
  void * jresult ;
  Quackle::FiveMinutePlayer *result = 0 ;
  
  result = (Quackle::FiveMinutePlayer *)new Quackle::FiveMinutePlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_FiveMinutePlayer(void * jarg1) {
  Quackle::FiveMinutePlayer *arg1 = (Quackle::FiveMinutePlayer *) 0 ;
  
  arg1 = (Quackle::FiveMinutePlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_FiveMinutePlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::FiveMinutePlayer *arg1 = (Quackle::FiveMinutePlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::FiveMinutePlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TwentySecondPlayer() {
  void * jresult ;
  Quackle::TwentySecondPlayer *result = 0 ;
  
  result = (Quackle::TwentySecondPlayer *)new Quackle::TwentySecondPlayer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TwentySecondPlayer(void * jarg1) {
  Quackle::TwentySecondPlayer *arg1 = (Quackle::TwentySecondPlayer *) 0 ;
  
  arg1 = (Quackle::TwentySecondPlayer *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TwentySecondPlayer_clone(void * jarg1) {
  void * jresult ;
  Quackle::TwentySecondPlayer *arg1 = (Quackle::TwentySecondPlayer *) 0 ;
  Quackle::ComputerPlayer *result = 0 ;
  
  arg1 = (Quackle::TwentySecondPlayer *)jarg1;
  result = (Quackle::ComputerPlayer *)(arg1)->clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StrategyParameters() {
  void * jresult ;
  Quackle::StrategyParameters *result = 0 ;
  
  result = (Quackle::StrategyParameters *)new Quackle::StrategyParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StrategyParameters_initialize(void * jarg1, char * jarg2) {
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->initialize((std::string const &)*arg2);
}


SWIGEXPORT unsigned int D_StrategyParameters_hasSyn2(void * jarg1) {
  unsigned int jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasSyn2();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StrategyParameters_hasWorths(void * jarg1) {
  unsigned int jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasWorths();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StrategyParameters_hasVcPlace(void * jarg1) {
  unsigned int jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasVcPlace();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StrategyParameters_hasBogowin(void * jarg1) {
  unsigned int jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasBogowin();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StrategyParameters_hasSuperleaves(void * jarg1) {
  unsigned int jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  bool result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  result = (bool)((Quackle::StrategyParameters const *)arg1)->hasSuperleaves();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_StrategyParameters_syn2(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  double jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  Quackle::Letter arg2 ;
  Quackle::Letter arg3 ;
  double result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  arg3 = (Quackle::Letter)jarg3;
  result = (double)((Quackle::StrategyParameters const *)arg1)->syn2(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_StrategyParameters_tileWorth(void * jarg1, unsigned char jarg2) {
  double jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  Quackle::Letter arg2 ;
  double result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  arg2 = (Quackle::Letter)jarg2;
  result = (double)((Quackle::StrategyParameters const *)arg1)->tileWorth(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_StrategyParameters_vcPlace(void * jarg1, int jarg2, int jarg3, int jarg4) {
  double jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (double)(arg1)->vcPlace(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_StrategyParameters_bogowin(void * jarg1, int jarg2, int jarg3, int jarg4) {
  double jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (double)(arg1)->bogowin(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_StrategyParameters_superleave(void * jarg1, void * jarg2) {
  double jresult ;
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  Quackle::LetterString arg2 ;
  Quackle::LetterString *argp2 ;
  double result;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  argp2 = (Quackle::LetterString *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Quackle::LetterString");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->superleave(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_StrategyParameters(void * jarg1) {
  Quackle::StrategyParameters *arg1 = (Quackle::StrategyParameters *) 0 ;
  
  arg1 = (Quackle::StrategyParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_FlexibleAlphabetParameters() {
  void * jresult ;
  QuackleIO::FlexibleAlphabetParameters *result = 0 ;
  
  result = (QuackleIO::FlexibleAlphabetParameters *)new QuackleIO::FlexibleAlphabetParameters();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_FlexibleAlphabetParameters_load(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  QuackleIO::FlexibleAlphabetParameters *arg1 = (QuackleIO::FlexibleAlphabetParameters *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  
  arg1 = (QuackleIO::FlexibleAlphabetParameters *)jarg1;
  arg2 = (QString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->load((QString const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_FlexibleAlphabetParameters(void * jarg1) {
  QuackleIO::FlexibleAlphabetParameters *arg1 = (QuackleIO::FlexibleAlphabetParameters *) 0 ;
  
  arg1 = (QuackleIO::FlexibleAlphabetParameters *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_UtilSettings() {
  void * jresult ;
  QuackleIO::UtilSettings *result = 0 ;
  
  result = (QuackleIO::UtilSettings *)new QuackleIO::UtilSettings();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_UtilSettings_self() {
  void * jresult ;
  QuackleIO::UtilSettings *result = 0 ;
  
  result = (QuackleIO::UtilSettings *)QuackleIO::UtilSettings::self();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_UtilSettings_octothorpBritish_set(void * jarg1, unsigned int jarg2) {
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->octothorpBritish = arg2;
}


SWIGEXPORT unsigned int D_UtilSettings_octothorpBritish_get(void * jarg1) {
  unsigned int jresult ;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool result;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  result = (bool) ((arg1)->octothorpBritish);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_UtilSettings_vowelFirst_set(void * jarg1, unsigned int jarg2) {
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->vowelFirst = arg2;
}


SWIGEXPORT unsigned int D_UtilSettings_vowelFirst_get(void * jarg1) {
  unsigned int jresult ;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool result;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  result = (bool) ((arg1)->vowelFirst);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_UtilSettings_scoreInvalidAsZero_set(void * jarg1, unsigned int jarg2) {
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->scoreInvalidAsZero = arg2;
}


SWIGEXPORT unsigned int D_UtilSettings_scoreInvalidAsZero_get(void * jarg1) {
  unsigned int jresult ;
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  bool result;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  result = (bool) ((arg1)->scoreInvalidAsZero);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_UtilSettings(void * jarg1) {
  QuackleIO::UtilSettings *arg1 = (QuackleIO::UtilSettings *) 0 ;
  
  arg1 = (QuackleIO::UtilSettings *)jarg1;
  delete arg1;
}


SWIGEXPORT char * D_Util_qstringToString(void * jarg1) {
  char * jresult ;
  QString *arg1 = 0 ;
  UVString result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::qstringToString((QString const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Util_encode(void * jarg1) {
  void * jresult ;
  QString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::encode((QString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_nonBlankEncode(void * jarg1) {
  void * jresult ;
  QString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::nonBlankEncode((QString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_uvStringToQString(char * jarg1) {
  void * jresult ;
  UVString *arg1 = 0 ;
  QString result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  UVString arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = QuackleIO::Util::uvStringToQString((std::string const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_letterStringToQString(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  QString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::letterStringToQString((Quackle::FixedLengthString const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_letterToQString(unsigned char jarg1) {
  void * jresult ;
  Quackle::Letter *arg1 = 0 ;
  Quackle::Letter temp1 ;
  QString result;
  
  temp1 = (Quackle::Letter)jarg1;
  arg1 = &temp1; 
  result = QuackleIO::Util::letterToQString((unsigned char const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT char * D_Util_qstringToStdString(void * jarg1) {
  char * jresult ;
  QString *arg1 = 0 ;
  std::string result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::qstringToStdString((QString const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Util_stdStringToQString(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  QString result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = QuackleIO::Util::stdStringToQString((std::string const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_moveToDetailedString(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = 0 ;
  QString result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::moveToDetailedString((Quackle::Move const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_moveToSensitiveString(void * jarg1) {
  void * jresult ;
  Quackle::Move *arg1 = 0 ;
  QString result;
  
  arg1 = (Quackle::Move *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Move const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::moveToSensitiveString((Quackle::Move const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_alphagram__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::alphagram((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_alphagram__SWIG_1(void * jarg1) {
  void * jresult ;
  QString *arg1 = 0 ;
  QString result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::alphagram((QString const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_arrangeLettersForUser__SWIG_0(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::arrangeLettersForUser((Quackle::FixedLengthString const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_arrangeLettersForUser__SWIG_1(void * jarg1) {
  void * jresult ;
  Quackle::Rack *arg1 = 0 ;
  Quackle::LetterString result;
  
  arg1 = (Quackle::Rack *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Rack const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::arrangeLettersForUser((Quackle::Rack const &)*arg1);
  jresult = new Quackle::LetterString((const Quackle::LetterString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_arrangeLettersForUser__SWIG_2(void * jarg1) {
  void * jresult ;
  QString *arg1 = 0 ;
  QString result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::arrangeLettersForUser((QString const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_makeRack(void * jarg1) {
  void * jresult ;
  QString *arg1 = 0 ;
  Quackle::Rack result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::makeRack((QString const &)*arg1);
  jresult = new Quackle::Rack((const Quackle::Rack &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_sanitizeUserVisibleLetterString(void * jarg1) {
  void * jresult ;
  QString *arg1 = 0 ;
  QString result;
  
  arg1 = (QString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::sanitizeUserVisibleLetterString((QString const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_Util_symbolsFor(void * jarg1) {
  void * jresult ;
  Quackle::LetterString *arg1 = 0 ;
  QString result;
  
  arg1 = (Quackle::LetterString *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::LetterString const & type is null");
    return 0;
  } 
  result = QuackleIO::Util::symbolsFor((Quackle::FixedLengthString const &)*arg1);
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_Util() {
  void * jresult ;
  QuackleIO::Util *result = 0 ;
  
  result = (QuackleIO::Util *)new QuackleIO::Util();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Util(void * jarg1) {
  QuackleIO::Util *arg1 = (QuackleIO::Util *) 0 ;
  
  arg1 = (QuackleIO::Util *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_delete_Logania(void * jarg1) {
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  
  arg1 = (QuackleIO::Logania *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_Logania_read(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  QTextStream *arg2 = 0 ;
  int arg3 ;
  Quackle::Game *result = 0 ;
  
  arg1 = (QuackleIO::Logania *)jarg1;
  arg2 = (QTextStream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QTextStream & type is null");
    return 0;
  } 
  arg3 = (int)jarg3;
  result = (Quackle::Game *)(arg1)->read(*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Logania_canRead(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  QTextStream *arg2 = 0 ;
  bool result;
  
  arg1 = (QuackleIO::Logania *)jarg1;
  arg2 = (QTextStream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QTextStream & type is null");
    return 0;
  } 
  result = (bool)((QuackleIO::Logania const *)arg1)->canRead(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Logania_write(void * jarg1, void * jarg2, void * jarg3) {
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  Quackle::Game *arg2 = 0 ;
  QTextStream *arg3 = 0 ;
  
  arg1 = (QuackleIO::Logania *)jarg1;
  arg2 = (Quackle::Game *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Game const & type is null");
    return ;
  } 
  arg3 = (QTextStream *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QTextStream & type is null");
    return ;
  } 
  (arg1)->write((Quackle::Game const &)*arg2,*arg3);
}


SWIGEXPORT void * D_Logania_filter(void * jarg1) {
  void * jresult ;
  QuackleIO::Logania *arg1 = (QuackleIO::Logania *) 0 ;
  QString result;
  
  arg1 = (QuackleIO::Logania *)jarg1;
  result = ((QuackleIO::Logania const *)arg1)->filter();
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_GCGIO() {
  void * jresult ;
  QuackleIO::GCGIO *result = 0 ;
  
  result = (QuackleIO::GCGIO *)new QuackleIO::GCGIO();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_GCGIO(void * jarg1) {
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  
  arg1 = (QuackleIO::GCGIO *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_GCGIO_read__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  Quackle::Game *result = 0 ;
  
  arg1 = (QuackleIO::GCGIO *)jarg1;
  arg2 = (QString *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QString const & type is null");
    return 0;
  } 
  arg3 = (int)jarg3;
  result = (Quackle::Game *)(arg1)->read((QString const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_GCGIO_read__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QTextStream *arg2 = 0 ;
  int arg3 ;
  Quackle::Game *result = 0 ;
  
  arg1 = (QuackleIO::GCGIO *)jarg1;
  arg2 = (QTextStream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QTextStream & type is null");
    return 0;
  } 
  arg3 = (int)jarg3;
  result = (Quackle::Game *)(arg1)->read(*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_GCGIO_canRead(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QTextStream *arg2 = 0 ;
  bool result;
  
  arg1 = (QuackleIO::GCGIO *)jarg1;
  arg2 = (QTextStream *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QTextStream & type is null");
    return 0;
  } 
  result = (bool)((QuackleIO::GCGIO const *)arg1)->canRead(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_GCGIO_write(void * jarg1, void * jarg2, void * jarg3) {
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  Quackle::Game *arg2 = 0 ;
  QTextStream *arg3 = 0 ;
  
  arg1 = (QuackleIO::GCGIO *)jarg1;
  arg2 = (Quackle::Game *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Quackle::Game const & type is null");
    return ;
  } 
  arg3 = (QTextStream *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "QTextStream & type is null");
    return ;
  } 
  (arg1)->write((Quackle::Game const &)*arg2,*arg3);
}


SWIGEXPORT void * D_GCGIO_filter(void * jarg1) {
  void * jresult ;
  QuackleIO::GCGIO *arg1 = (QuackleIO::GCGIO *) 0 ;
  QString result;
  
  arg1 = (QuackleIO::GCGIO *)jarg1;
  result = ((QuackleIO::GCGIO const *)arg1)->filter();
  jresult = new QString((const QString &)result); 
  return jresult;
}


SWIGEXPORT Quackle::AlphabetParameters * D_EnglishAlphabetParameters_Upcast(Quackle::AlphabetParameters *objectRef) {
    return (Quackle::AlphabetParameters *)objectRef;
}

SWIGEXPORT std::vector< Quackle::Move > * D_MoveList_Upcast(std::vector< Quackle::Move > *objectRef) {
    return (std::vector< Quackle::Move > *)objectRef;
}

SWIGEXPORT Quackle::BoardParameters * D_EnglishBoard_Upcast(Quackle::BoardParameters *objectRef) {
    return (Quackle::BoardParameters *)objectRef;
}

SWIGEXPORT Quackle::Evaluator * D_ScorePlusLeaveEvaluator_Upcast(Quackle::Evaluator *objectRef) {
    return (Quackle::Evaluator *)objectRef;
}

SWIGEXPORT Quackle::ScorePlusLeaveEvaluator * D_CatchallEvaluator_Upcast(Quackle::ScorePlusLeaveEvaluator *objectRef) {
    return (Quackle::ScorePlusLeaveEvaluator *)objectRef;
}

SWIGEXPORT std::vector< Quackle::Player > * D_PlayerList_Upcast(std::vector< Quackle::Player > *objectRef) {
    return (std::vector< Quackle::Player > *)objectRef;
}

SWIGEXPORT std::vector< Quackle::GamePosition > * D_History_Upcast(std::vector< Quackle::GamePosition > *objectRef) {
    return (std::vector< Quackle::GamePosition > *)objectRef;
}

SWIGEXPORT Quackle::GameParameters * D_EnglishParameters_Upcast(Quackle::GameParameters *objectRef) {
    return (Quackle::GameParameters *)objectRef;
}

SWIGEXPORT Quackle::ComputerDispatch * D_ScalingDispatch_Upcast(Quackle::ComputerDispatch *objectRef) {
    return (Quackle::ComputerDispatch *)objectRef;
}

SWIGEXPORT Quackle::ComputerPlayer * D_StaticPlayer_Upcast(Quackle::ComputerPlayer *objectRef) {
    return (Quackle::ComputerPlayer *)objectRef;
}

SWIGEXPORT Quackle::PlayerList * D_ComputerPlayerCollection_Upcast(Quackle::PlayerList *objectRef) {
    return (Quackle::PlayerList *)objectRef;
}

SWIGEXPORT Quackle::ComputerPlayer * D_EndgamePlayer_Upcast(Quackle::ComputerPlayer *objectRef) {
    return (Quackle::ComputerPlayer *)objectRef;
}

SWIGEXPORT Quackle::ComputerPlayer * D_SmartBogowin_Upcast(Quackle::ComputerPlayer *objectRef) {
    return (Quackle::ComputerPlayer *)objectRef;
}

SWIGEXPORT Quackle::ComputerPlayer * D_Preendgame_Upcast(Quackle::ComputerPlayer *objectRef) {
    return (Quackle::ComputerPlayer *)objectRef;
}

SWIGEXPORT Quackle::ComputerPlayer * D_Resolvent_Upcast(Quackle::ComputerPlayer *objectRef) {
    return (Quackle::ComputerPlayer *)objectRef;
}

SWIGEXPORT Quackle::Resolvent * D_InferringPlayer_Upcast(Quackle::Resolvent *objectRef) {
    return (Quackle::Resolvent *)objectRef;
}

SWIGEXPORT Quackle::Resolvent * D_TorontoPlayer_Upcast(Quackle::Resolvent *objectRef) {
    return (Quackle::Resolvent *)objectRef;
}

SWIGEXPORT Quackle::Resolvent * D_FiveMinutePlayer_Upcast(Quackle::Resolvent *objectRef) {
    return (Quackle::Resolvent *)objectRef;
}

SWIGEXPORT Quackle::Resolvent * D_TwentySecondPlayer_Upcast(Quackle::Resolvent *objectRef) {
    return (Quackle::Resolvent *)objectRef;
}

SWIGEXPORT Quackle::AlphabetParameters * D_FlexibleAlphabetParameters_Upcast(Quackle::AlphabetParameters *objectRef) {
    return (Quackle::AlphabetParameters *)objectRef;
}

SWIGEXPORT QuackleIO::Logania * D_GCGIO_Upcast(QuackleIO::Logania *objectRef) {
    return (QuackleIO::Logania *)objectRef;
}

#ifdef __cplusplus
}
#endif

