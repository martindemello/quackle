/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module quackle;

static import quackle_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;

static import std.algorithm;
static import std.exception;
static import std.range;
static import std.traits;


int FIXED_STRING_MAXIMUM_LENGTH() @property {
  auto ret = quackle_im.FIXED_STRING_MAXIMUM_LENGTH_get();
  return ret;
}

class FixedLengthString {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_FixedLengthString(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_FixedLengthString__SWIG_0(), true);
  }

  public this(string s, uint n) {
    this(quackle_im.new_FixedLengthString__SWIG_1((s ? std.string.toStringz(s) : null), n), true);
  }

  public this(uint n, char c) {
    this(quackle_im.new_FixedLengthString__SWIG_2(n, c), true);
  }

  public this(string s) {
    this(quackle_im.new_FixedLengthString__SWIG_3((s ? std.string.toStringz(s) : null)), true);
  }

  public this(FixedLengthString s) {
    this(quackle_im.new_FixedLengthString__SWIG_4(FixedLengthString.swigGetCPtr(s)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string begin() const {
    string ret = std.conv.to!string(quackle_im.FixedLengthString_begin__SWIG_0(cast(void*)swigCPtr));
    return ret;
  }

  public string end() const {
    string ret = std.conv.to!string(quackle_im.FixedLengthString_end__SWIG_0(cast(void*)swigCPtr));
    return ret;
  }

  public void erase(string i) {
    quackle_im.FixedLengthString_erase(cast(void*)swigCPtr, (i ? std.string.toStringz(i) : null));
  }

  public uint length() const {
    auto ret = quackle_im.FixedLengthString_length(cast(void*)swigCPtr);
    return ret;
  }

  public FixedLengthString substr(uint pos, uint n) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.FixedLengthString_substr(cast(void*)swigCPtr, pos, n), true);
    return ret;
  }

  public bool empty() const {
    bool ret = quackle_im.FixedLengthString_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public uint size() const {
    auto ret = quackle_im.FixedLengthString_size(cast(void*)swigCPtr);
    return ret;
  }

  public void clear() {
    quackle_im.FixedLengthString_clear(cast(void*)swigCPtr);
  }

  public void push_back(char c) {
    quackle_im.FixedLengthString_push_back(cast(void*)swigCPtr, c);
  }

  public void pop_back() {
    quackle_im.FixedLengthString_pop_back(cast(void*)swigCPtr);
  }

  public string constData() const {
    string ret = std.conv.to!string(quackle_im.FixedLengthString_constData(cast(void*)swigCPtr));
    return ret;
  }

  public int compare(FixedLengthString s) const {
    auto ret = quackle_im.FixedLengthString_compare(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(s));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public FixedLengthString swigOpAddAssign(char c) {
    FixedLengthString ret = new FixedLengthString(quackle_im.FixedLengthString_swigOpAddAssign__SWIG_0(cast(void*)swigCPtr, c), false);
    return ret;
  }

  public FixedLengthString swigOpAddAssign(FixedLengthString s) {
    FixedLengthString ret = new FixedLengthString(quackle_im.FixedLengthString_swigOpAddAssign__SWIG_1(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(s)), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public char opIndex(uint n) const {
    auto ret = quackle_im.FixedLengthString_opIndex(cast(void*)swigCPtr, n);
    return ret;
  }

  public static uint maxSize() @property {
    auto ret = quackle_im.FixedLengthString_maxSize_get();
    return ret;
  }
}

FixedLengthString swigOpAdd(FixedLengthString lhs, FixedLengthString rhs) {
  FixedLengthString ret = new FixedLengthString(quackle_im.swigOpAdd__SWIG_0(FixedLengthString.swigGetCPtr(lhs), FixedLengthString.swigGetCPtr(rhs)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

FixedLengthString swigOpAdd(char lhs, FixedLengthString rhs) {
  FixedLengthString ret = new FixedLengthString(quackle_im.swigOpAdd__SWIG_1(lhs, FixedLengthString.swigGetCPtr(rhs)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

FixedLengthString swigOpAdd(FixedLengthString lhs, char rhs) {
  FixedLengthString ret = new FixedLengthString(quackle_im.swigOpAdd__SWIG_2(FixedLengthString.swigGetCPtr(lhs), rhs), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

bool swigOpLt(FixedLengthString lhs, FixedLengthString rhs) {
  bool ret = quackle_im.swigOpLt__SWIG_0(FixedLengthString.swigGetCPtr(lhs), FixedLengthString.swigGetCPtr(rhs)) ? true : false;
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

int QUACKLE_USE_WCHAR_FOR_USER_VISIBLE() @property {
  auto ret = quackle_im.QUACKLE_USE_WCHAR_FOR_USER_VISIBLE_get();
  return ret;
}

int QUACKLE_MAXIMUM_ALPHABET_SIZE() @property {
  auto ret = quackle_im.QUACKLE_MAXIMUM_ALPHABET_SIZE_get();
  return ret;
}

int QUACKLE_MINIMUM_ALPHABET_SIZE() @property {
  auto ret = quackle_im.QUACKLE_MINIMUM_ALPHABET_SIZE_get();
  return ret;
}

string QUACKLE_NULL_MARK_TEXT() @property {
  string ret = std.conv.to!string(quackle_im.QUACKLE_NULL_MARK_TEXT_get());
  return ret;
}

int QUACKLE_NULL_MARK() @property {
  auto ret = quackle_im.QUACKLE_NULL_MARK_get();
  return ret;
}

int QUACKLE_BLANK_MARK() @property {
  auto ret = quackle_im.QUACKLE_BLANK_MARK_get();
  return ret;
}

int QUACKLE_PLAYED_THRU_MARK() @property {
  auto ret = quackle_im.QUACKLE_PLAYED_THRU_MARK_get();
  return ret;
}

int QUACKLE_PLAYTHRU_START_MARK() @property {
  auto ret = quackle_im.QUACKLE_PLAYTHRU_START_MARK_get();
  return ret;
}

int QUACKLE_PLAYTHRU_END_MARK() @property {
  auto ret = quackle_im.QUACKLE_PLAYTHRU_END_MARK_get();
  return ret;
}

int QUACKLE_FIRST_LETTER() @property {
  auto ret = quackle_im.QUACKLE_FIRST_LETTER_get();
  return ret;
}

int QUACKLE_BLANK_OFFSET() @property {
  auto ret = quackle_im.QUACKLE_BLANK_OFFSET_get();
  return ret;
}

int LETTER_STRING_MAXIMUM_LENGTH() @property {
  auto ret = quackle_im.LETTER_STRING_MAXIMUM_LENGTH_get();
  return ret;
}

FixedLengthString left(FixedLengthString letterString, int number) {
  FixedLengthString ret = new FixedLengthString(quackle_im.left(FixedLengthString.swigGetCPtr(letterString), number), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

FixedLengthString alphabetize(FixedLengthString letterString) {
  FixedLengthString ret = new FixedLengthString(quackle_im.alphabetize(FixedLengthString.swigGetCPtr(letterString)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

FixedLengthString clearBlankness(FixedLengthString letterString) {
  FixedLengthString ret = new FixedLengthString(quackle_im.clearBlankness(FixedLengthString.swigGetCPtr(letterString)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

FixedLengthString setBlankness(FixedLengthString letterString) {
  FixedLengthString ret = new FixedLengthString(quackle_im.setBlankness(FixedLengthString.swigGetCPtr(letterString)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

FixedLengthString usedTiles(FixedLengthString letterString) {
  FixedLengthString ret = new FixedLengthString(quackle_im.usedTiles(FixedLengthString.swigGetCPtr(letterString)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

void counts(FixedLengthString letterString, string countsArray) {
  quackle_im.counts__SWIG_0(FixedLengthString.swigGetCPtr(letterString), (countsArray ? std.string.toStringz(countsArray) : null));
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
}

void counts(string letterString, string countsArray) {
  quackle_im.counts__SWIG_1((letterString ? std.string.toStringz(letterString) : null), (countsArray ? std.string.toStringz(countsArray) : null));
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
}

ubyte back(FixedLengthString letterString) {
  auto ret = quackle_im.back(FixedLengthString.swigGetCPtr(letterString));
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

void pop_back(FixedLengthString letterString) {
  quackle_im.pop_back(FixedLengthString.swigGetCPtr(letterString));
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
}

ubyte front(FixedLengthString letterString) {
  auto ret = quackle_im.front(FixedLengthString.swigGetCPtr(letterString));
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

void pop_front(FixedLengthString letterString) {
  quackle_im.pop_front(FixedLengthString.swigGetCPtr(letterString));
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
}

FixedLengthString allButFront(FixedLengthString letterString) {
  FixedLengthString ret = new FixedLengthString(quackle_im.allButFront(FixedLengthString.swigGetCPtr(letterString)), true);
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

class LetterParameter {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_LetterParameter(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_LetterParameter__SWIG_0(), true);
  }

  public this(ubyte letter) {
    this(quackle_im.new_LetterParameter__SWIG_1(letter), true);
  }

  public this(ubyte letter, string text, string blankText, int score, int count, bool isVowel) {
    this(quackle_im.new_LetterParameter__SWIG_2(letter, (text ? std.string.toStringz(text) : null), (blankText ? std.string.toStringz(blankText) : null), score, count, isVowel), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(ubyte letter, string text, string blankText, int score, int count) {
    this(quackle_im.new_LetterParameter__SWIG_3(letter, (text ? std.string.toStringz(text) : null), (blankText ? std.string.toStringz(blankText) : null), score, count), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(ubyte letter, string text, string blankText, int score) {
    this(quackle_im.new_LetterParameter__SWIG_4(letter, (text ? std.string.toStringz(text) : null), (blankText ? std.string.toStringz(blankText) : null), score), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(ubyte letter, string text, string blankText) {
    this(quackle_im.new_LetterParameter__SWIG_5(letter, (text ? std.string.toStringz(text) : null), (blankText ? std.string.toStringz(blankText) : null)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string text() const {
    string ret = std.conv.to!string(quackle_im.LetterParameter_text(cast(void*)swigCPtr));
    return ret;
  }

  public void setText(string text) {
    quackle_im.LetterParameter_setText(cast(void*)swigCPtr, (text ? std.string.toStringz(text) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string blankText() const {
    string ret = std.conv.to!string(quackle_im.LetterParameter_blankText(cast(void*)swigCPtr));
    return ret;
  }

  public void setBlankText(string blankText) {
    quackle_im.LetterParameter_setBlankText(cast(void*)swigCPtr, (blankText ? std.string.toStringz(blankText) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public ubyte letter() const {
    auto ret = quackle_im.LetterParameter_letter(cast(void*)swigCPtr);
    return ret;
  }

  public void setLetter(ubyte letter) {
    quackle_im.LetterParameter_setLetter(cast(void*)swigCPtr, letter);
  }

  public int score() const {
    auto ret = quackle_im.LetterParameter_score(cast(void*)swigCPtr);
    return ret;
  }

  public void setScore(int score) {
    quackle_im.LetterParameter_setScore(cast(void*)swigCPtr, score);
  }

  public int count() const {
    auto ret = quackle_im.LetterParameter_count(cast(void*)swigCPtr);
    return ret;
  }

  public void setCount(int count) {
    quackle_im.LetterParameter_setCount(cast(void*)swigCPtr, count);
  }

  public bool isVowel() const {
    bool ret = quackle_im.LetterParameter_isVowel(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setVowel(bool isVowel) {
    quackle_im.LetterParameter_setVowel(cast(void*)swigCPtr, isVowel);
  }
}

class AlphabetParameters {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_AlphabetParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_AlphabetParameters(), true);
  }

  public int length() const {
    auto ret = quackle_im.AlphabetParameters_length(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte firstLetter() const {
    auto ret = quackle_im.AlphabetParameters_firstLetter(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte lastLetter() const {
    auto ret = quackle_im.AlphabetParameters_lastLetter(cast(void*)swigCPtr);
    return ret;
  }

  public void setAlphabet(LetterParameterVector alphabet) {
    quackle_im.AlphabetParameters_setAlphabet(cast(void*)swigCPtr, LetterParameterVector.swigGetCPtr(alphabet));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public LetterParameter letterParameter(ubyte letter) const {
    LetterParameter ret = new LetterParameter(quackle_im.AlphabetParameters_letterParameter(cast(void*)swigCPtr, letter), false);
    return ret;
  }

  public void setLetterParameter(ubyte letter, LetterParameter letterParameter) {
    quackle_im.AlphabetParameters_setLetterParameter(cast(void*)swigCPtr, letter, LetterParameter.swigGetCPtr(letterParameter));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static LetterParameterVector emptyAlphabet() {
    LetterParameterVector ret = new LetterParameterVector(quackle_im.AlphabetParameters_emptyAlphabet(), true);
    return ret;
  }

  public void setCount(ubyte letter, int count) {
    quackle_im.AlphabetParameters_setCount(cast(void*)swigCPtr, letter, count);
  }

  public void setScore(ubyte letter, int score) {
    quackle_im.AlphabetParameters_setScore(cast(void*)swigCPtr, letter, score);
  }

  public bool isBlankLetter(ubyte letter) const {
    bool ret = quackle_im.AlphabetParameters_isBlankLetter(cast(void*)swigCPtr, letter) ? true : false;
    return ret;
  }

  public ubyte clearBlankness(ubyte letter) const {
    auto ret = quackle_im.AlphabetParameters_clearBlankness__SWIG_0(cast(void*)swigCPtr, letter);
    return ret;
  }

  public FixedLengthString clearBlankness(FixedLengthString letterString) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.AlphabetParameters_clearBlankness__SWIG_1(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letterString)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public ubyte setBlankness(ubyte letter) const {
    auto ret = quackle_im.AlphabetParameters_setBlankness(cast(void*)swigCPtr, letter);
    return ret;
  }

  public bool isPlainLetter(ubyte letter) const {
    bool ret = quackle_im.AlphabetParameters_isPlainLetter(cast(void*)swigCPtr, letter) ? true : false;
    return ret;
  }

  public bool isSomeLetter(ubyte letter) const {
    bool ret = quackle_im.AlphabetParameters_isSomeLetter(cast(void*)swigCPtr, letter) ? true : false;
    return ret;
  }

  public int count(ubyte letter) const {
    auto ret = quackle_im.AlphabetParameters_count(cast(void*)swigCPtr, letter);
    return ret;
  }

  public int score(ubyte letter) const {
    auto ret = quackle_im.AlphabetParameters_score(cast(void*)swigCPtr, letter);
    return ret;
  }

  public bool isVowel(ubyte letter) const {
    bool ret = quackle_im.AlphabetParameters_isVowel(cast(void*)swigCPtr, letter) ? true : false;
    return ret;
  }

  public string userVisible(FixedLengthString letterString) const {
    string ret = std.conv.to!string(quackle_im.AlphabetParameters_userVisible__SWIG_0(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letterString)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string userVisible(ubyte letter) const {
    string ret = std.conv.to!string(quackle_im.AlphabetParameters_userVisible__SWIG_1(cast(void*)swigCPtr, letter));
    return ret;
  }

  public FixedLengthString encode(string word, SWIGTYPE_p_std__string leftover) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.AlphabetParameters_encode__SWIG_0(cast(void*)swigCPtr, (word ? std.string.toStringz(word) : null), SWIGTYPE_p_std__string.swigGetCPtr(leftover)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public FixedLengthString encode(string word) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.AlphabetParameters_encode__SWIG_1(cast(void*)swigCPtr, (word ? std.string.toStringz(word) : null)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string alphabetName() const {
    string ret = std.conv.to!string(quackle_im.AlphabetParameters_alphabetName(cast(void*)swigCPtr));
    return ret;
  }

  public void setAlphabetName(string name) {
    quackle_im.AlphabetParameters_setAlphabetName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static string findAlphabetFile(string alphabet) {
    string ret = std.conv.to!string(quackle_im.AlphabetParameters_findAlphabetFile((alphabet ? std.string.toStringz(alphabet) : null)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class EnglishAlphabetParameters : AlphabetParameters {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.EnglishAlphabetParameters_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_EnglishAlphabetParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_EnglishAlphabetParameters(), true);
  }
}

class MoveVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_MoveVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  alias size_t KeyType;
  alias Move ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private MoveVector _outer;
    private size_t _a, _b;

    this(MoveVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(MoveVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref Move value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref Move value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }

  public bool empty() const {
    bool ret = quackle_im.MoveVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    quackle_im.MoveVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(Move x) {
    quackle_im.MoveVector_push_back(cast(void*)swigCPtr, Move.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    quackle_im.MoveVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = quackle_im.MoveVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = quackle_im.MoveVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    quackle_im.MoveVector_reserve(cast(void*)swigCPtr, n);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_MoveVector__SWIG_0(), true);
  }

  public this(MoveVector other) {
    this(quackle_im.new_MoveVector__SWIG_1(MoveVector.swigGetCPtr(other)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(quackle_im.new_MoveVector__SWIG_2(capacity), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Move remove() {
    Move ret = new Move(quackle_im.MoveVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public Move remove(size_t index) {
    Move ret = new Move(quackle_im.MoveVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    quackle_im.MoveVector_removeBack(cast(void*)swigCPtr, how_many);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    quackle_im.MoveVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, Move x) {
    quackle_im.MoveVector_insertAt(cast(void*)swigCPtr, index, Move.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Move getElement(size_t index) {
    Move ret = new Move(quackle_im.MoveVector_getElement(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, Move val) {
    quackle_im.MoveVector_setElement(cast(void*)swigCPtr, index, Move.swigGetCPtr(val));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class PlayerVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_PlayerVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  alias size_t KeyType;
  alias Player ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private PlayerVector _outer;
    private size_t _a, _b;

    this(PlayerVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(PlayerVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref Player value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref Player value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }

  public bool empty() const {
    bool ret = quackle_im.PlayerVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    quackle_im.PlayerVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(Player x) {
    quackle_im.PlayerVector_push_back(cast(void*)swigCPtr, Player.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    quackle_im.PlayerVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = quackle_im.PlayerVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = quackle_im.PlayerVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    quackle_im.PlayerVector_reserve(cast(void*)swigCPtr, n);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_PlayerVector__SWIG_0(), true);
  }

  public this(PlayerVector other) {
    this(quackle_im.new_PlayerVector__SWIG_1(PlayerVector.swigGetCPtr(other)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(quackle_im.new_PlayerVector__SWIG_2(capacity), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Player remove() {
    Player ret = new Player(quackle_im.PlayerVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public Player remove(size_t index) {
    Player ret = new Player(quackle_im.PlayerVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    quackle_im.PlayerVector_removeBack(cast(void*)swigCPtr, how_many);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    quackle_im.PlayerVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, Player x) {
    quackle_im.PlayerVector_insertAt(cast(void*)swigCPtr, index, Player.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Player getElement(size_t index) {
    Player ret = new Player(quackle_im.PlayerVector_getElement(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, Player val) {
    quackle_im.PlayerVector_setElement(cast(void*)swigCPtr, index, Player.swigGetCPtr(val));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class ProbableRackList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ProbableRackList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  alias size_t KeyType;
  alias ProbableRack ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private ProbableRackList _outer;
    private size_t _a, _b;

    this(ProbableRackList data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(ProbableRackList)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref ProbableRack value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref ProbableRack value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }

  public bool empty() const {
    bool ret = quackle_im.ProbableRackList_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    quackle_im.ProbableRackList_clear(cast(void*)swigCPtr);
  }

  public void push_back(ProbableRack x) {
    quackle_im.ProbableRackList_push_back(cast(void*)swigCPtr, ProbableRack.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    quackle_im.ProbableRackList_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = quackle_im.ProbableRackList_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = quackle_im.ProbableRackList_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    quackle_im.ProbableRackList_reserve(cast(void*)swigCPtr, n);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_ProbableRackList__SWIG_0(), true);
  }

  public this(ProbableRackList other) {
    this(quackle_im.new_ProbableRackList__SWIG_1(ProbableRackList.swigGetCPtr(other)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(quackle_im.new_ProbableRackList__SWIG_2(capacity), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public ProbableRack remove() {
    ProbableRack ret = new ProbableRack(quackle_im.ProbableRackList_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public ProbableRack remove(size_t index) {
    ProbableRack ret = new ProbableRack(quackle_im.ProbableRackList_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    quackle_im.ProbableRackList_removeBack(cast(void*)swigCPtr, how_many);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    quackle_im.ProbableRackList_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, ProbableRack x) {
    quackle_im.ProbableRackList_insertAt(cast(void*)swigCPtr, index, ProbableRack.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public ProbableRack getElement(size_t index) {
    ProbableRack ret = new ProbableRack(quackle_im.ProbableRackList_getElement(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, ProbableRack val) {
    quackle_im.ProbableRackList_setElement(cast(void*)swigCPtr, index, ProbableRack.swigGetCPtr(val));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class PositionList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_PositionList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  alias size_t KeyType;
  alias GamePosition ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private PositionList _outer;
    private size_t _a, _b;

    this(PositionList data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(PositionList)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref GamePosition value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref GamePosition value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }

  public bool empty() const {
    bool ret = quackle_im.PositionList_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    quackle_im.PositionList_clear(cast(void*)swigCPtr);
  }

  public void push_back(GamePosition x) {
    quackle_im.PositionList_push_back(cast(void*)swigCPtr, GamePosition.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    quackle_im.PositionList_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = quackle_im.PositionList_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = quackle_im.PositionList_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    quackle_im.PositionList_reserve(cast(void*)swigCPtr, n);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_PositionList__SWIG_0(), true);
  }

  public this(PositionList other) {
    this(quackle_im.new_PositionList__SWIG_1(PositionList.swigGetCPtr(other)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(quackle_im.new_PositionList__SWIG_2(capacity), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GamePosition remove() {
    GamePosition ret = new GamePosition(quackle_im.PositionList_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public GamePosition remove(size_t index) {
    GamePosition ret = new GamePosition(quackle_im.PositionList_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    quackle_im.PositionList_removeBack(cast(void*)swigCPtr, how_many);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    quackle_im.PositionList_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, GamePosition x) {
    quackle_im.PositionList_insertAt(cast(void*)swigCPtr, index, GamePosition.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GamePosition getElement(size_t index) {
    GamePosition ret = new GamePosition(quackle_im.PositionList_getElement(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, GamePosition val) {
    quackle_im.PositionList_setElement(cast(void*)swigCPtr, index, GamePosition.swigGetCPtr(val));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class LetterParameterVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_LetterParameterVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  alias size_t KeyType;
  alias LetterParameter ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private LetterParameterVector _outer;
    private size_t _a, _b;

    this(LetterParameterVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(LetterParameterVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref LetterParameter value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref LetterParameter value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }

  public bool empty() const {
    bool ret = quackle_im.LetterParameterVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    quackle_im.LetterParameterVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(LetterParameter x) {
    quackle_im.LetterParameterVector_push_back(cast(void*)swigCPtr, LetterParameter.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    quackle_im.LetterParameterVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = quackle_im.LetterParameterVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = quackle_im.LetterParameterVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    quackle_im.LetterParameterVector_reserve(cast(void*)swigCPtr, n);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_LetterParameterVector__SWIG_0(), true);
  }

  public this(LetterParameterVector other) {
    this(quackle_im.new_LetterParameterVector__SWIG_1(LetterParameterVector.swigGetCPtr(other)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(quackle_im.new_LetterParameterVector__SWIG_2(capacity), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public LetterParameter remove() {
    LetterParameter ret = new LetterParameter(quackle_im.LetterParameterVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public LetterParameter remove(size_t index) {
    LetterParameter ret = new LetterParameter(quackle_im.LetterParameterVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    quackle_im.LetterParameterVector_removeBack(cast(void*)swigCPtr, how_many);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    quackle_im.LetterParameterVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, LetterParameter x) {
    quackle_im.LetterParameterVector_insertAt(cast(void*)swigCPtr, index, LetterParameter.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public LetterParameter getElement(size_t index) {
    LetterParameter ret = new LetterParameter(quackle_im.LetterParameterVector_getElement(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, LetterParameter val) {
    quackle_im.LetterParameterVector_setElement(cast(void*)swigCPtr, index, LetterParameter.swigGetCPtr(val));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class LetterStringVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_LetterStringVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  alias size_t KeyType;
  alias FixedLengthString ValueType;

  this(ValueType[] values...) {
    this();
    reserve(values.length);
    foreach (e; values) {
      this ~= e;
    }
  }

  struct Range {
    private LetterStringVector _outer;
    private size_t _a, _b;

    this(LetterStringVector data, size_t a, size_t b) {
      _outer = data;
      _a = a;
      _b = b;
    }

    @property bool empty() const {
      assert((cast(LetterStringVector)_outer).length >= _b);
      return _a >= _b;
    }

    @property Range save() {
      return this;
    }

    @property ValueType front() {
      std.exception.enforce(!empty);
      return _outer[_a];
    }

    @property void front(ValueType value) {
      std.exception.enforce(!empty);
      _outer[_a] = std.algorithm.move(value);
    }

    void popFront() {
      std.exception.enforce(!empty);
      ++_a;
    }

    void opIndexAssign(ValueType value, size_t i) {
      i += _a;
      std.exception.enforce(i < _b && _b <= _outer.length);
      _outer[i] = value;
    }

    void opIndexOpAssign(string op)(ValueType value, size_t i) {
      std.exception.enforce(_outer && _a + i < _b && _b <= _outer.length);
      auto element = _outer[i];
      mixin("element "~op~"= value;");
      _outer[i] = element;
    }
  }

  // TODO: dup?

  Range opSlice() {
    return Range(this, 0, length);
  }

  Range opSlice(size_t a, size_t b) {
    std.exception.enforce(a <= b && b <= length);
    return Range(this, a, b);
  }

  size_t opDollar() const {
    return length;
  }

  @property ValueType front() {
    std.exception.enforce(!empty);
    return getElement(0);
  }

  @property void front(ValueType value) {
    std.exception.enforce(!empty);
    setElement(0, value);
  }

  @property ValueType back() {
    std.exception.enforce(!empty);
    return getElement(length - 1);
  }

  @property void back(ValueType value) {
    std.exception.enforce(!empty);
    setElement(length - 1, value);
  }

  ValueType opIndex(size_t i) {
    return getElement(i);
  }

  void opIndexAssign(ValueType value, size_t i) {
    setElement(i, value);
  }

  void opIndexOpAssign(string op)(ValueType value, size_t i) {
    auto element = this[i];
    mixin("element "~op~"= value;");
    this[i] = element;
  }

  ValueType[] opBinary(string op, Stuff)(Stuff stuff) if (op == "~") {
    ValueType[] result;
    result ~= this[];
    assert(result.length == length);
    result ~= stuff[];
    return result;
  }

  void opOpAssign(string op, Stuff)(Stuff stuff) if (op == "~") {
    static if (is(typeof(insertBack(stuff)))) {
      insertBack(stuff);
    } else if (is(typeof(insertBack(stuff[])))) {
      insertBack(stuff[]);
    } else {
      static assert(false, "Cannot append " ~ Stuff.stringof ~ " to " ~ typeof(this).stringof);
    }
  }

  alias size length;

  alias remove removeAny;
  alias removeAny stableRemoveAny;

  size_t insertBack(Stuff)(Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)){
    push_back(stuff);
    return 1;
  }
  size_t insertBack(Stuff)(Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(std.range.ElementType!Stuff, ValueType)) {
    size_t itemCount;
    foreach(item; stuff) {
      insertBack(item);
      ++itemCount;
    }
    return itemCount;
  }
  alias insertBack insert;

  alias pop_back removeBack;
  alias pop_back stableRemoveBack;

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a < length);
    insertAt(r._a, stuff);
    return 1;
  }

  size_t insertBefore(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff && std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    std.exception.enforce(r._outer.swigCPtr == swigCPtr && r._a <= length);

    size_t insertCount;
    foreach(i, item; stuff) {
      insertAt(r._a + i, item);
      ++insertCount;
    }

    return insertCount;
  }

  size_t insertAfter(Stuff)(Range r, Stuff stuff) {
    // TODO: optimize
    immutable offset = r._a + r.length;
    std.exception.enforce(offset <= length);
    auto result = insertBack(stuff);
    std.algorithm.bringToFront(this[offset .. length - result],
      this[length - result .. length]);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.range.isInputRange!Stuff &&
      std.traits.isImplicitlyConvertible!(ElementType!Stuff, ValueType)) {
    immutable offset = r._a;
    std.exception.enforce(offset <= length);
    size_t result;
    for (; !stuff.empty; stuff.popFront()) {
      if (r.empty) {
        // append the rest
        return result + insertBack(stuff);
      }
      r.front = stuff.front;
      r.popFront();
      ++result;
    }
    // Remove remaining stuff in r
    remove(r);
    return result;
  }

  size_t replace(Stuff)(Range r, Stuff stuff)
  if (std.traits.isImplicitlyConvertible!(Stuff, ValueType))
  {
      if (r.empty)
      {
          insertBefore(r, stuff);
      }
      else
      {
          r.front = stuff;
          r.popFront();
          remove(r);
      }
      return 1;
  }

  Range linearRemove(Range r) {
    std.exception.enforce(r._a <= r._b && r._b <= length);
    immutable tailLength = length - r._b;
    linearRemove(r._a, r._b);
    return this[length - tailLength .. length];
  }
  alias remove stableLinearRemove;

  int opApply(int delegate(ref FixedLengthString value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);
      result = dg(value);
      setElement(i, value);
    }
    return result;
  }

  int opApply(int delegate(ref size_t index, ref FixedLengthString value) dg) {
    int result;

    size_t currentSize = size();
    for (size_t i = 0; i < currentSize; ++i) {
      auto value = getElement(i);

      // Workaround for http://d.puremagic.com/issues/show_bug.cgi?id=2443.
      auto index = i;

      result = dg(index, value);
      setElement(i, value);
    }
    return result;
  }

  public bool empty() const {
    bool ret = quackle_im.LetterStringVector_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void clear() {
    quackle_im.LetterStringVector_clear(cast(void*)swigCPtr);
  }

  public void push_back(FixedLengthString x) {
    quackle_im.LetterStringVector_push_back(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void pop_back() {
    quackle_im.LetterStringVector_pop_back(cast(void*)swigCPtr);
  }

  public size_t size() const {
    auto ret = quackle_im.LetterStringVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public size_t capacity() const {
    auto ret = quackle_im.LetterStringVector_capacity(cast(void*)swigCPtr);
    return ret;
  }

  public void reserve(size_t n) {
    quackle_im.LetterStringVector_reserve(cast(void*)swigCPtr, n);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_LetterStringVector__SWIG_0(), true);
  }

  public this(LetterStringVector other) {
    this(quackle_im.new_LetterStringVector__SWIG_1(LetterStringVector.swigGetCPtr(other)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(size_t capacity) {
    this(quackle_im.new_LetterStringVector__SWIG_2(capacity), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public FixedLengthString remove() {
    FixedLengthString ret = new FixedLengthString(quackle_im.LetterStringVector_remove__SWIG_0(cast(void*)swigCPtr), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public FixedLengthString remove(size_t index) {
    FixedLengthString ret = new FixedLengthString(quackle_im.LetterStringVector_remove__SWIG_1(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void removeBack(size_t how_many) {
    quackle_im.LetterStringVector_removeBack(cast(void*)swigCPtr, how_many);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void linearRemove(size_t start_index, size_t end_index) {
    quackle_im.LetterStringVector_linearRemove(cast(void*)swigCPtr, start_index, end_index);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void insertAt(size_t index, FixedLengthString x) {
    quackle_im.LetterStringVector_insertAt(cast(void*)swigCPtr, index, FixedLengthString.swigGetCPtr(x));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public FixedLengthString getElement(size_t index) {
    FixedLengthString ret = new FixedLengthString(quackle_im.LetterStringVector_getElement(cast(void*)swigCPtr, index), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setElement(size_t index, FixedLengthString val) {
    quackle_im.LetterStringVector_setElement(cast(void*)swigCPtr, index, FixedLengthString.swigGetCPtr(val));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class Move {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Move(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum Action {
    Place = 0,
    PlaceError,
    Exchange,
    BlindExchange,
    Pass,
    UnusedTilesBonus,
    UnusedTilesBonusError,
    TimePenalty,
    Nonmove
  }

  public void score(int value) @property {
    quackle_im.Move_score_set(cast(void*)swigCPtr, value);
  }

  public int score() @property const {
    auto ret = quackle_im.Move_score_get(cast(void*)swigCPtr);
    return ret;
  }

  public void isBingo(bool value) @property {
    quackle_im.Move_isBingo_set(cast(void*)swigCPtr, value);
  }

  public bool isBingo() @property const {
    bool ret = quackle_im.Move_isBingo_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int effectiveScore() const {
    auto ret = quackle_im.Move_effectiveScore(cast(void*)swigCPtr);
    return ret;
  }

  public void equity(double value) @property {
    quackle_im.Move_equity_set(cast(void*)swigCPtr, value);
  }

  public double equity() @property const {
    auto ret = quackle_im.Move_equity_get(cast(void*)swigCPtr);
    return ret;
  }

  public void win(double value) @property {
    quackle_im.Move_win_set(cast(void*)swigCPtr, value);
  }

  public double win() @property const {
    auto ret = quackle_im.Move_win_get(cast(void*)swigCPtr);
    return ret;
  }

  public void possibleWin(double value) @property {
    quackle_im.Move_possibleWin_set(cast(void*)swigCPtr, value);
  }

  public double possibleWin() @property const {
    auto ret = quackle_im.Move_possibleWin_get(cast(void*)swigCPtr);
    return ret;
  }

  public void action(Move.Action value) @property {
    quackle_im.Move_action_set(cast(void*)swigCPtr, cast(int)value);
  }

  public Move.Action action() @property const {
    Move.Action ret = cast(Move.Action)quackle_im.Move_action_get(cast(void*)swigCPtr);
    return ret;
  }

  public void horizontal(bool value) @property {
    quackle_im.Move_horizontal_set(cast(void*)swigCPtr, value);
  }

  public bool horizontal() @property const {
    bool ret = quackle_im.Move_horizontal_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void startrow(int value) @property {
    quackle_im.Move_startrow_set(cast(void*)swigCPtr, value);
  }

  public int startrow() @property const {
    auto ret = quackle_im.Move_startrow_get(cast(void*)swigCPtr);
    return ret;
  }

  public void startcol(int value) @property {
    quackle_im.Move_startcol_set(cast(void*)swigCPtr, value);
  }

  public int startcol() @property const {
    auto ret = quackle_im.Move_startcol_get(cast(void*)swigCPtr);
    return ret;
  }

  public bool isAMove() const {
    bool ret = quackle_im.Move_isAMove(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setTiles(FixedLengthString tiles) {
    quackle_im.Move_setTiles(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(tiles));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setPrettyTiles(FixedLengthString prettyTiles) {
    quackle_im.Move_setPrettyTiles(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(prettyTiles));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public FixedLengthString prettyTiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Move_prettyTiles(cast(void*)swigCPtr), false);
    return ret;
  }

  public FixedLengthString usedTiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Move_usedTiles(cast(void*)swigCPtr), true);
    return ret;
  }

  public FixedLengthString wordTiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Move_wordTiles(cast(void*)swigCPtr), true);
    return ret;
  }

  public FixedLengthString wordTilesWithNoPlayThru() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Move_wordTilesWithNoPlayThru(cast(void*)swigCPtr), true);
    return ret;
  }

  public FixedLengthString tiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Move_tiles(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool isChallengedPhoney() const {
    bool ret = quackle_im.Move_isChallengedPhoney(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setIsChallengedPhoney(bool isChallengedPhoney) {
    quackle_im.Move_setIsChallengedPhoney(cast(void*)swigCPtr, isChallengedPhoney);
  }

  public int scoreAddition() const {
    auto ret = quackle_im.Move_scoreAddition(cast(void*)swigCPtr);
    return ret;
  }

  public void setScoreAddition(int scoreAddition) {
    quackle_im.Move_setScoreAddition(cast(void*)swigCPtr, scoreAddition);
  }

  public static bool isAlreadyOnBoard(ubyte letter) {
    bool ret = quackle_im.Move_isAlreadyOnBoard(letter) ? true : false;
    return ret;
  }

  public string xml() const {
    string ret = std.conv.to!string(quackle_im.Move_xml(cast(void*)swigCPtr));
    return ret;
  }

  public override string toString() const {
    string ret = std.conv.to!string(quackle_im.Move_toString(cast(void*)swigCPtr));
    return ret;
  }

  public string debugString() const {
    string ret = std.conv.to!string(quackle_im.Move_debugString(cast(void*)swigCPtr));
    return ret;
  }

  public string positionString() const {
    string ret = std.conv.to!string(quackle_im.Move_positionString(cast(void*)swigCPtr));
    return ret;
  }

  public static Move createPlaceMove(string placeString, FixedLengthString word) {
    Move ret = new Move(quackle_im.Move_createPlaceMove__SWIG_0((placeString ? std.string.toStringz(placeString) : null), FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Move createPlaceMove(int zeroIndexedRow, int zeroIndexedColumn, bool horizontal, FixedLengthString word) {
    Move ret = new Move(quackle_im.Move_createPlaceMove__SWIG_1(zeroIndexedRow, zeroIndexedColumn, horizontal, FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Move createChallengedPhoney(string placeString, FixedLengthString word) {
    Move ret = new Move(quackle_im.Move_createChallengedPhoney__SWIG_0((placeString ? std.string.toStringz(placeString) : null), FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Move createChallengedPhoney(int zeroIndexedRow, int zeroIndexedColumn, bool horizontal, FixedLengthString word) {
    Move ret = new Move(quackle_im.Move_createChallengedPhoney__SWIG_1(zeroIndexedRow, zeroIndexedColumn, horizontal, FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Move createExchangeMove(FixedLengthString tilesToExchange, bool isBlind) {
    Move ret = new Move(quackle_im.Move_createExchangeMove(FixedLengthString.swigGetCPtr(tilesToExchange), isBlind), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Move createUnusedTilesBonus(FixedLengthString unusedTiles, int bonus) {
    Move ret = new Move(quackle_im.Move_createUnusedTilesBonus(FixedLengthString.swigGetCPtr(unusedTiles), bonus), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Move createTimePenalty(int penalty) {
    Move ret = new Move(quackle_im.Move_createTimePenalty(penalty), true);
    return ret;
  }

  public static Move createPassMove() {
    Move ret = new Move(quackle_im.Move_createPassMove(), true);
    return ret;
  }

  public static Move createNonmove() {
    Move ret = new Move(quackle_im.Move_createNonmove(), true);
    return ret;
  }

  public this() {
    this(quackle_im.new_Move(), true);
  }
}

bool swigOpLt(Move move1, Move move2) {
  bool ret = quackle_im.swigOpLt__SWIG_1(Move.swigGetCPtr(move1), Move.swigGetCPtr(move2)) ? true : false;
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

class MoveList : MoveVector {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.MoveList_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_MoveList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum SortType {
    Equity,
    Score,
    Alphabetical,
    Win
  }

  public static void sort(MoveList list, MoveList.SortType type) {
    quackle_im.MoveList_sort__SWIG_0(MoveList.swigGetCPtr(list), cast(int)type);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void sort(MoveList list) {
    quackle_im.MoveList_sort__SWIG_1(MoveList.swigGetCPtr(list));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void sortNonReverse(MoveList list, MoveList.SortType type) {
    quackle_im.MoveList_sortNonReverse__SWIG_0(MoveList.swigGetCPtr(list), cast(int)type);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void sortNonReverse(MoveList list) {
    quackle_im.MoveList_sortNonReverse__SWIG_1(MoveList.swigGetCPtr(list));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static bool winComparator(Move move1, Move move2) {
    bool ret = quackle_im.MoveList_winComparator(Move.swigGetCPtr(move1), Move.swigGetCPtr(move2)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static bool equityComparator(Move move1, Move move2) {
    bool ret = quackle_im.MoveList_equityComparator(Move.swigGetCPtr(move1), Move.swigGetCPtr(move2)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static bool scoreComparator(Move move1, Move move2) {
    bool ret = quackle_im.MoveList_scoreComparator(Move.swigGetCPtr(move1), Move.swigGetCPtr(move2)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static bool alphabeticalComparator(Move move1, Move move2) {
    bool ret = quackle_im.MoveList_alphabeticalComparator(Move.swigGetCPtr(move1), Move.swigGetCPtr(move2)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static bool wordPosComparator(Move move1, Move move2) {
    bool ret = quackle_im.MoveList_wordPosComparator(Move.swigGetCPtr(move1), Move.swigGetCPtr(move2)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool contains(Move move) const {
    bool ret = quackle_im.MoveList_contains(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_MoveList(), true);
  }
}

class Rack {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Rack(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Rack__SWIG_0(), true);
  }

  public this(FixedLengthString tiles) {
    this(quackle_im.new_Rack__SWIG_1(FixedLengthString.swigGetCPtr(tiles)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setTiles(FixedLengthString tiles) {
    quackle_im.Rack_setTiles(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(tiles));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public FixedLengthString tiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Rack_tiles(cast(void*)swigCPtr), false);
    return ret;
  }

  public FixedLengthString alphaTiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Rack_alphaTiles(cast(void*)swigCPtr), true);
    return ret;
  }

  public bool empty() const {
    bool ret = quackle_im.Rack_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool equals(Rack rack) const {
    bool ret = quackle_im.Rack_equals(cast(void*)swigCPtr, Rack.swigGetCPtr(rack)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint size() const {
    auto ret = quackle_im.Rack_size(cast(void*)swigCPtr);
    return ret;
  }

  public bool unload(FixedLengthString used) {
    bool ret = quackle_im.Rack_unload(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(used)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void load(FixedLengthString tiles) {
    quackle_im.Rack_load(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(tiles));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool contains(FixedLengthString used) const {
    bool ret = quackle_im.Rack_contains(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(used)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void shuffle() {
    quackle_im.Rack_shuffle(cast(void*)swigCPtr);
  }

  public int score() const {
    auto ret = quackle_im.Rack_score(cast(void*)swigCPtr);
    return ret;
  }

  public string xml() const {
    string ret = std.conv.to!string(quackle_im.Rack_xml(cast(void*)swigCPtr));
    return ret;
  }

  public override string toString() const {
    string ret = std.conv.to!string(quackle_im.Rack_toString(cast(void*)swigCPtr));
    return ret;
  }
}

class Bag {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Bag(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Bag__SWIG_0(), true);
  }

  public this(FixedLengthString contents) {
    this(quackle_im.new_Bag__SWIG_1(FixedLengthString.swigGetCPtr(contents)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void clear() {
    quackle_im.Bag_clear(cast(void*)swigCPtr);
  }

  public void exch(Move move, Rack rack) {
    quackle_im.Bag_exch(cast(void*)swigCPtr, Move.swigGetCPtr(move), Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public ubyte pluck() {
    auto ret = quackle_im.Bag_pluck(cast(void*)swigCPtr);
    return ret;
  }

  public bool removeLetters(FixedLengthString letters) {
    bool ret = quackle_im.Bag_removeLetters__SWIG_0(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letters)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool removeLetters(string letters) {
    bool ret = quackle_im.Bag_removeLetters__SWIG_1(cast(void*)swigCPtr, (letters ? std.string.toStringz(letters) : null)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool removeLetter(ubyte letter) {
    bool ret = quackle_im.Bag_removeLetter(cast(void*)swigCPtr, letter) ? true : false;
    return ret;
  }

  public void letterCounts(string countsArray) const {
    quackle_im.Bag_letterCounts(cast(void*)swigCPtr, (countsArray ? std.string.toStringz(countsArray) : null));
  }

  public void toss(FixedLengthString letters) {
    quackle_im.Bag_toss__SWIG_0(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letters));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void toss(string letters) {
    quackle_im.Bag_toss__SWIG_1(cast(void*)swigCPtr, (letters ? std.string.toStringz(letters) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void toss(Rack rack) {
    quackle_im.Bag_toss__SWIG_2(cast(void*)swigCPtr, Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void refill(Rack rack) {
    quackle_im.Bag_refill__SWIG_0(cast(void*)swigCPtr, Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public FixedLengthString refill(Rack rack, FixedLengthString drawingOrder) {
    FixedLengthString ret = new FixedLengthString(quackle_im.Bag_refill__SWIG_1(cast(void*)swigCPtr, Rack.swigGetCPtr(rack), FixedLengthString.swigGetCPtr(drawingOrder)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void prepareFullBag() {
    quackle_im.Bag_prepareFullBag(cast(void*)swigCPtr);
  }

  public int fullBagTileCount() {
    auto ret = quackle_im.Bag_fullBagTileCount(cast(void*)swigCPtr);
    return ret;
  }

  public bool empty() const {
    bool ret = quackle_im.Bag_empty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int size() const {
    auto ret = quackle_im.Bag_size(cast(void*)swigCPtr);
    return ret;
  }

  public string tiles() const {
    string ret = std.conv.to!string(quackle_im.Bag_tiles(cast(void*)swigCPtr));
    return ret;
  }

  public string shuffledTiles() const {
    string ret = std.conv.to!string(quackle_im.Bag_shuffledTiles(cast(void*)swigCPtr));
    return ret;
  }

  public FixedLengthString someShuffledTiles() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Bag_someShuffledTiles(cast(void*)swigCPtr), true);
    return ret;
  }

  public static double probabilityOfDrawingFromFullBag(FixedLengthString letters) {
    auto ret = quackle_im.Bag_probabilityOfDrawingFromFullBag(FixedLengthString.swigGetCPtr(letters));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static double probabilityOfDrawingFromBag(FixedLengthString letters, Bag bag) {
    auto ret = quackle_im.Bag_probabilityOfDrawingFromBag(FixedLengthString.swigGetCPtr(letters), Bag.swigGetCPtr(bag));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double probabilityOfDrawing(FixedLengthString letters) {
    auto ret = quackle_im.Bag_probabilityOfDrawing(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letters));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override string toString() const {
    string ret = std.conv.to!string(quackle_im.Bag_toString(cast(void*)swigCPtr));
    return ret;
  }
}

int QUACKLE_MAXIMUM_BOARD_SIZE() @property {
  auto ret = quackle_im.QUACKLE_MAXIMUM_BOARD_SIZE_get();
  return ret;
}

int QUACKLE_MINIMUM_BOARD_SIZE() @property {
  auto ret = quackle_im.QUACKLE_MINIMUM_BOARD_SIZE_get();
  return ret;
}

class Board {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Board(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum TileType {
    LetterTile = 0,
    BonusSquareTile,
    NothingTile
  }

  enum BonusSquareType {
    LetterBonus = 0,
    WordBonus,
    NoBonus
  }

  public this() {
    this(quackle_im.new_Board__SWIG_0(), true);
  }

  public this(int width, int height) {
    this(quackle_im.new_Board__SWIG_1(width, height), true);
  }

  public void prepareEmptyBoard() {
    quackle_im.Board_prepareEmptyBoard(cast(void*)swigCPtr);
  }

  public int width() const {
    auto ret = quackle_im.Board_width(cast(void*)swigCPtr);
    return ret;
  }

  public int height() const {
    auto ret = quackle_im.Board_height(cast(void*)swigCPtr);
    return ret;
  }

  public Bag tilesNotOnBoard() const {
    Bag ret = new Bag(quackle_im.Board_tilesNotOnBoard(cast(void*)swigCPtr), true);
    return ret;
  }

  public Bag tilesOnBoard() const {
    Bag ret = new Bag(quackle_im.Board_tilesOnBoard(cast(void*)swigCPtr), true);
    return ret;
  }

  public bool isEmpty() const {
    bool ret = quackle_im.Board_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void makeMove(Move move) {
    quackle_im.Board_makeMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public MoveList allWordsFormedBy(Move move) const {
    MoveList ret = new MoveList(quackle_im.Board_allWordsFormedBy(cast(void*)swigCPtr, Move.swigGetCPtr(move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool isConnected(Move move) const {
    bool ret = quackle_im.Board_isConnected(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool isUnacceptableOpeningMove(Move move) const {
    bool ret = quackle_im.Board_isUnacceptableOpeningMove(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void updateBritishness() {
    quackle_im.Board_updateBritishness(cast(void*)swigCPtr);
  }

  public int score(Move move, bool* isBingo) const {
    auto ret = quackle_im.Board_score__SWIG_0(cast(void*)swigCPtr, Move.swigGetCPtr(move), cast(void*)isBingo);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public int score(Move move) const {
    auto ret = quackle_im.Board_score__SWIG_1(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public FixedLengthString prettyTilesOfMove(Move move, bool markPlayThruTiles) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Board_prettyTilesOfMove__SWIG_0(cast(void*)swigCPtr, Move.swigGetCPtr(move), markPlayThruTiles), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public FixedLengthString prettyTilesOfMove(Move move) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Board_prettyTilesOfMove__SWIG_1(cast(void*)swigCPtr, Move.swigGetCPtr(move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public FixedLengthString sanitizedTilesOfMove(Move move) const {
    FixedLengthString ret = new FixedLengthString(quackle_im.Board_sanitizedTilesOfMove(cast(void*)swigCPtr, Move.swigGetCPtr(move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override string toString() const {
    string ret = std.conv.to!string(quackle_im.Board_toString(cast(void*)swigCPtr));
    return ret;
  }

  public string htmlBoard(int tileSize) const {
    string ret = std.conv.to!string(quackle_im.Board_htmlBoard(cast(void*)swigCPtr, tileSize));
    return ret;
  }

  public string htmlKey() const {
    string ret = std.conv.to!string(quackle_im.Board_htmlKey(cast(void*)swigCPtr));
    return ret;
  }

  public SWIGTYPE_p_Quackle__Board__TileInformation tileInformation(int row, int col) const {
    SWIGTYPE_p_Quackle__Board__TileInformation ret = new SWIGTYPE_p_Quackle__Board__TileInformation(quackle_im.Board_tileInformation(cast(void*)swigCPtr, row, col), true);
    return ret;
  }

  public ubyte letter(int row, int col) const {
    auto ret = quackle_im.Board_letter(cast(void*)swigCPtr, row, col);
    return ret;
  }

  public bool isBlank(int row, int col) const {
    bool ret = quackle_im.Board_isBlank(cast(void*)swigCPtr, row, col) ? true : false;
    return ret;
  }

  public bool isBritish(int row, int col) const {
    bool ret = quackle_im.Board_isBritish(cast(void*)swigCPtr, row, col) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_bitsetT_55_t vcross(int row, int col) const {
    SWIGTYPE_p_bitsetT_55_t ret = new SWIGTYPE_p_bitsetT_55_t(quackle_im.Board_vcross(cast(void*)swigCPtr, row, col), false);
    return ret;
  }

  public void setVCross(int row, int col, SWIGTYPE_p_bitsetT_55_t vcross) {
    quackle_im.Board_setVCross(cast(void*)swigCPtr, row, col, SWIGTYPE_p_bitsetT_55_t.swigGetCPtr(vcross));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_bitsetT_55_t hcross(int row, int col) const {
    SWIGTYPE_p_bitsetT_55_t ret = new SWIGTYPE_p_bitsetT_55_t(quackle_im.Board_hcross(cast(void*)swigCPtr, row, col), false);
    return ret;
  }

  public void setHCross(int row, int col, SWIGTYPE_p_bitsetT_55_t hcross) {
    quackle_im.Board_setHCross(cast(void*)swigCPtr, row, col, SWIGTYPE_p_bitsetT_55_t.swigGetCPtr(hcross));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class BoardParameters {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_BoardParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum LetterMultiplier {
    sls = 1,
    dls = 2,
    tls = 3,
    qls = 4,
    lsCount = qls
  }

  enum WordMultiplier {
    sws = 1,
    dws = 2,
    tws = 3,
    qws = 4,
    wsCount = qws
  }

  public this() {
    this(quackle_im.new_BoardParameters(), true);
  }

  public void Serialize(SWIGTYPE_p_ostream stream) {
    quackle_im.BoardParameters_Serialize(cast(void*)swigCPtr, SWIGTYPE_p_ostream.swigGetCPtr(stream));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static BoardParameters Deserialize(SWIGTYPE_p_istream stream) {
    void* cPtr = quackle_im.BoardParameters_Deserialize(SWIGTYPE_p_istream.swigGetCPtr(stream));
    BoardParameters ret = (cPtr is null) ? null : new BoardParameters(cPtr, false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public int width() const {
    auto ret = quackle_im.BoardParameters_width(cast(void*)swigCPtr);
    return ret;
  }

  public void setWidth(int width) {
    quackle_im.BoardParameters_setWidth(cast(void*)swigCPtr, width);
  }

  public int height() const {
    auto ret = quackle_im.BoardParameters_height(cast(void*)swigCPtr);
    return ret;
  }

  public void setHeight(int width) {
    quackle_im.BoardParameters_setHeight(cast(void*)swigCPtr, width);
  }

  public int startRow() const {
    auto ret = quackle_im.BoardParameters_startRow(cast(void*)swigCPtr);
    return ret;
  }

  public void setStartRow(int startRow) {
    quackle_im.BoardParameters_setStartRow(cast(void*)swigCPtr, startRow);
  }

  public int startColumn() const {
    auto ret = quackle_im.BoardParameters_startColumn(cast(void*)swigCPtr);
    return ret;
  }

  public void setStartColumn(int startRow) {
    quackle_im.BoardParameters_setStartColumn(cast(void*)swigCPtr, startRow);
  }

  public int letterMultiplier(int row, int column) const {
    auto ret = quackle_im.BoardParameters_letterMultiplier(cast(void*)swigCPtr, row, column);
    return ret;
  }

  public void setLetterMultiplier(int row, int column, BoardParameters.LetterMultiplier multiplier) {
    quackle_im.BoardParameters_setLetterMultiplier(cast(void*)swigCPtr, row, column, cast(int)multiplier);
  }

  public int wordMultiplier(int row, int column) const {
    auto ret = quackle_im.BoardParameters_wordMultiplier(cast(void*)swigCPtr, row, column);
    return ret;
  }

  public void setWordMultiplier(int row, int column, BoardParameters.WordMultiplier multiplier) {
    quackle_im.BoardParameters_setWordMultiplier(cast(void*)swigCPtr, row, column, cast(int)multiplier);
  }

  public string name() const {
    string ret = std.conv.to!string(quackle_im.BoardParameters_name(cast(void*)swigCPtr));
    return ret;
  }

  public void setName(string name) {
    quackle_im.BoardParameters_setName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class EnglishBoard : BoardParameters {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.EnglishBoard_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_EnglishBoard(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_EnglishBoard(), true);
  }
}

class Evaluator {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Evaluator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public double equity(GamePosition position, Move move) const {
    auto ret = quackle_im.Evaluator_equity(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double playerConsideration(GamePosition position, Move move) const {
    auto ret = quackle_im.Evaluator_playerConsideration(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double sharedConsideration(GamePosition position, Move move) const {
    auto ret = quackle_im.Evaluator_sharedConsideration(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double leaveValue(FixedLengthString leave) const {
    auto ret = quackle_im.Evaluator_leaveValue(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(leave));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_Evaluator(), true);
  }
}

class ScorePlusLeaveEvaluator : Evaluator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.ScorePlusLeaveEvaluator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ScorePlusLeaveEvaluator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override double equity(GamePosition position, Move move) const {
    auto ret = quackle_im.ScorePlusLeaveEvaluator_equity(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override double playerConsideration(GamePosition position, Move move) const {
    auto ret = quackle_im.ScorePlusLeaveEvaluator_playerConsideration(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override double sharedConsideration(GamePosition position, Move move) const {
    auto ret = quackle_im.ScorePlusLeaveEvaluator_sharedConsideration(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override double leaveValue(FixedLengthString leave) const {
    auto ret = quackle_im.ScorePlusLeaveEvaluator_leaveValue(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(leave));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_ScorePlusLeaveEvaluator(), true);
  }
}

class CatchallEvaluator : ScorePlusLeaveEvaluator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.CatchallEvaluator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_CatchallEvaluator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override double equity(GamePosition position, Move move) const {
    auto ret = quackle_im.CatchallEvaluator_equity(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double endgameResult(GamePosition position, Move move) const {
    auto ret = quackle_im.CatchallEvaluator_endgameResult(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position), Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_CatchallEvaluator(), true);
  }
}

class Player {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Player(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum PlayerType {
    ComputerPlayerType = 0,
    HumanPlayerType = 1
  }

  public this() {
    this(quackle_im.new_Player__SWIG_0(), true);
  }

  public this(string name, int playerType, int id) {
    this(quackle_im.new_Player__SWIG_1((name ? std.string.toStringz(name) : null), playerType, id), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(string name, int playerType) {
    this(quackle_im.new_Player__SWIG_2((name ? std.string.toStringz(name) : null), playerType), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(string name) {
    this(quackle_im.new_Player__SWIG_3((name ? std.string.toStringz(name) : null)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setName(string newName) {
    quackle_im.Player_setName(cast(void*)swigCPtr, (newName ? std.string.toStringz(newName) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string name() const {
    string ret = std.conv.to!string(quackle_im.Player_name(cast(void*)swigCPtr));
    return ret;
  }

  public void setAbbreviatedName(string newAbbreviatedName) {
    quackle_im.Player_setAbbreviatedName(cast(void*)swigCPtr, (newAbbreviatedName ? std.string.toStringz(newAbbreviatedName) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string abbreviatedName() const {
    string ret = std.conv.to!string(quackle_im.Player_abbreviatedName(cast(void*)swigCPtr));
    return ret;
  }

  public void setType(int playerType) {
    quackle_im.Player_setType(cast(void*)swigCPtr, playerType);
  }

  public int type() const {
    auto ret = quackle_im.Player_type(cast(void*)swigCPtr);
    return ret;
  }

  public void setComputerPlayer(ComputerPlayer computerPlayer) {
    quackle_im.Player_setComputerPlayer(cast(void*)swigCPtr, ComputerPlayer.swigGetCPtr(computerPlayer));
  }

  public ComputerPlayer computerPlayer() const {
    void* cPtr = quackle_im.Player_computerPlayer(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public int id() const {
    auto ret = quackle_im.Player_id(cast(void*)swigCPtr);
    return ret;
  }

  public void setId(int id) {
    quackle_im.Player_setId(cast(void*)swigCPtr, id);
  }

  public void setRack(Rack newRack) {
    quackle_im.Player_setRack__SWIG_0(cast(void*)swigCPtr, Rack.swigGetCPtr(newRack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setRack(FixedLengthString rack) {
    quackle_im.Player_setRack__SWIG_1(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Rack rack() const {
    Rack ret = new Rack(quackle_im.Player_rack(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setScore(int score) {
    quackle_im.Player_setScore(cast(void*)swigCPtr, score);
  }

  public int score() const {
    auto ret = quackle_im.Player_score(cast(void*)swigCPtr);
    return ret;
  }

  public void addToScore(int addition) {
    quackle_im.Player_addToScore(cast(void*)swigCPtr, addition);
  }

  public Rack drawnLetters() const {
    Rack ret = new Rack(quackle_im.Player_drawnLetters(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setDrawnLetters(Rack drawnLetters) {
    quackle_im.Player_setDrawnLetters(cast(void*)swigCPtr, Rack.swigGetCPtr(drawnLetters));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool racksAreKnown() const {
    bool ret = quackle_im.Player_racksAreKnown(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setRacksAreKnown(bool racksAreKnown) {
    quackle_im.Player_setRacksAreKnown(cast(void*)swigCPtr, racksAreKnown);
  }

  public bool positionallyEqual(Player otherPlayer) const {
    bool ret = quackle_im.Player_positionallyEqual(cast(void*)swigCPtr, Player.swigGetCPtr(otherPlayer)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string storeInformationToString() const {
    string ret = std.conv.to!string(quackle_im.Player_storeInformationToString(cast(void*)swigCPtr));
    return ret;
  }

  public void loadInformationFromString(string info) {
    quackle_im.Player_loadInformationFromString(cast(void*)swigCPtr, (info ? std.string.toStringz(info) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static Player makePlayerFromString(string info) {
    Player ret = new Player(quackle_im.Player_makePlayerFromString((info ? std.string.toStringz(info) : null)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

bool swigOpLt(Player player1, Player player2) {
  bool ret = quackle_im.swigOpLt__SWIG_2(Player.swigGetCPtr(player1), Player.swigGetCPtr(player2)) ? true : false;
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

class PlayerList : PlayerVector {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.PlayerList_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_PlayerList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_PlayerList(), true);
  }

  public Player playerForId(int id, out bool OUTPUT) const {
    Player ret = new Player(quackle_im.PlayerList_playerForId(cast(void*)swigCPtr, id, OUTPUT), false);
    return ret;
  }

  public Player playerForName(string name, out bool OUTPUT) const {
    Player ret = new Player(quackle_im.PlayerList_playerForName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), OUTPUT), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class HistoryLocation {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_HistoryLocation(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(int playerId, int turnNumber) {
    this(quackle_im.new_HistoryLocation(playerId, turnNumber), true);
  }

  public int playerId() const {
    auto ret = quackle_im.HistoryLocation_playerId(cast(void*)swigCPtr);
    return ret;
  }

  public int turnNumber() const {
    auto ret = quackle_im.HistoryLocation_turnNumber(cast(void*)swigCPtr);
    return ret;
  }
}

bool swigOpLt(HistoryLocation hl1, HistoryLocation hl2) {
  bool ret = quackle_im.swigOpLt__SWIG_3(HistoryLocation.swigGetCPtr(hl1), HistoryLocation.swigGetCPtr(hl2)) ? true : false;
  if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  return ret;
}

class GamePosition {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_GamePosition(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum MoveValidity {
    ValidMove = 0x0000,
    InvalidTiles = 0x0001,
    TooLateExchange = 0x0002,
    InvalidPlace = 0x0004,
    InvalidOpeningPlace = 0x0008,
    UnacceptableWord = 0x0010,
    InvalidAction = 0x0020
  }

  enum OverdrawValidity {
    ValidOverdraw = 0x0000,
    InvalidOverdrawNumber = 0x0001,
    OverdrawnTilesNotUnseen = 0x0002
  }

  public this(PlayerList players) {
    this(quackle_im.new_GamePosition__SWIG_0(PlayerList.swigGetCPtr(players)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this(GamePosition position) {
    this(quackle_im.new_GamePosition__SWIG_1(GamePosition.swigGetCPtr(position)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public this() {
    this(quackle_im.new_GamePosition__SWIG_2(), true);
  }

  public void kibitz(int nmoves) {
    quackle_im.GamePosition_kibitz__SWIG_0(cast(void*)swigCPtr, nmoves);
  }

  public void kibitz() {
    quackle_im.GamePosition_kibitz__SWIG_1(cast(void*)swigCPtr);
  }

  public MoveList moves() const {
    MoveList ret = new MoveList(quackle_im.GamePosition_moves(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setMoves(MoveList moves) {
    quackle_im.GamePosition_setMoves(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Move staticBestMove() {
    Move ret = new Move(quackle_im.GamePosition_staticBestMove(cast(void*)swigCPtr), false);
    return ret;
  }

  public void removeMove(Move move) {
    quackle_im.GamePosition_removeMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void removeAllMoves() {
    quackle_im.GamePosition_removeAllMoves(cast(void*)swigCPtr);
  }

  public void addMove(Move move) {
    quackle_im.GamePosition_addMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void makeSureMoveListContainsMoves(MoveList moves) {
    quackle_im.GamePosition_makeSureMoveListContainsMoves(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void kibitzAs(ComputerPlayer computerPlayer, int nmoves) {
    quackle_im.GamePosition_kibitzAs(cast(void*)swigCPtr, ComputerPlayer.swigGetCPtr(computerPlayer), nmoves);
  }

  public void ensureMovePrettiness(Move move) {
    quackle_im.GamePosition_ensureMovePrettiness(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void ensureMoveTilesDoNotIncludePlayThru(Move move) {
    quackle_im.GamePosition_ensureMoveTilesDoNotIncludePlayThru(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void addAndSetMoveMade(Move move) {
    quackle_im.GamePosition_addAndSetMoveMade(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public int validateMove(Move move) const {
    auto ret = quackle_im.GamePosition_validateMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool formsAcceptableWords(Move move) const {
    bool ret = quackle_im.GamePosition_formsAcceptableWords(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public MoveList allWordsFormedBy(Move move) const {
    MoveList ret = new MoveList(quackle_im.GamePosition_allWordsFormedBy(cast(void*)swigCPtr, Move.swigGetCPtr(move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool isConnected(Move move) const {
    bool ret = quackle_im.GamePosition_isConnected(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool isAcceptableWord(FixedLengthString word) const {
    bool ret = quackle_im.GamePosition_isAcceptableWord(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(word)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool exchangeAllowed() const {
    bool ret = quackle_im.GamePosition_exchangeAllowed(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int handleOverdraw(FixedLengthString letters, FixedLengthString throwback) const {
    auto ret = quackle_im.GamePosition_handleOverdraw(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letters), FixedLengthString.swigGetCPtr(throwback));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void makeMove(Move move, bool maintainBoard) {
    quackle_im.GamePosition_makeMove__SWIG_0(cast(void*)swigCPtr, Move.swigGetCPtr(move), maintainBoard);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void makeMove(Move move) {
    quackle_im.GamePosition_makeMove__SWIG_1(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void ensureBoardIsPreparedForAnalysis() {
    quackle_im.GamePosition_ensureBoardIsPreparedForAnalysis(cast(void*)swigCPtr);
  }

  public void scoreMove(Move move) {
    quackle_im.GamePosition_scoreMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public double calculateEquity(Move move) {
    auto ret = quackle_im.GamePosition_calculateEquity(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public int calculateScore(Move move) {
    auto ret = quackle_im.GamePosition_calculateScore(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double calculatePlayerConsideration(Move move) {
    auto ret = quackle_im.GamePosition_calculatePlayerConsideration(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double leaveValue(FixedLengthString leave) const {
    auto ret = quackle_im.GamePosition_leaveValue(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(leave));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public double calculateSharedConsideration(Move move) {
    auto ret = quackle_im.GamePosition_calculateSharedConsideration(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBoard(Board board) {
    quackle_im.GamePosition_setBoard(cast(void*)swigCPtr, Board.swigGetCPtr(board));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Board board() const {
    Board ret = new Board(quackle_im.GamePosition_board(cast(void*)swigCPtr), false);
    return ret;
  }

  public Bag bag() const {
    Bag ret = new Bag(quackle_im.GamePosition_bag(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setDrawingOrder(FixedLengthString drawingOrder) {
    quackle_im.GamePosition_setDrawingOrder(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(drawingOrder));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public FixedLengthString drawingOrder() const {
    FixedLengthString ret = new FixedLengthString(quackle_im.GamePosition_drawingOrder(cast(void*)swigCPtr), false);
    return ret;
  }

  public Bag unseenBag() const {
    Bag ret = new Bag(quackle_im.GamePosition_unseenBag(cast(void*)swigCPtr), true);
    return ret;
  }

  public Bag unseenBagFromPlayerPerspective(Player player) const {
    Bag ret = new Bag(quackle_im.GamePosition_unseenBagFromPlayerPerspective(cast(void*)swigCPtr, Player.swigGetCPtr(player)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ensureProperBag() const {
    quackle_im.GamePosition_ensureProperBag(cast(void*)swigCPtr);
  }

  public void setEmptyBoard() {
    quackle_im.GamePosition_setEmptyBoard(cast(void*)swigCPtr);
  }

  public Player currentPlayer() const {
    Player ret = new Player(quackle_im.GamePosition_currentPlayer__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool setCurrentPlayer(int playerID) {
    bool ret = quackle_im.GamePosition_setCurrentPlayer(cast(void*)swigCPtr, playerID) ? true : false;
    return ret;
  }

  public Player playerOnTurn() const {
    Player ret = new Player(quackle_im.GamePosition_playerOnTurn__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool setPlayerOnTurn(int playerID) {
    bool ret = quackle_im.GamePosition_setPlayerOnTurn(cast(void*)swigCPtr, playerID) ? true : false;
    return ret;
  }

  public Player humanPlayer() const {
    Player ret = new Player(quackle_im.GamePosition_humanPlayer(cast(void*)swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Quackle__PlayerList__const_iterator nextPlayer() const {
    SWIGTYPE_p_Quackle__PlayerList__const_iterator ret = new SWIGTYPE_p_Quackle__PlayerList__const_iterator(quackle_im.GamePosition_nextPlayer(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Quackle__PlayerList__const_iterator nextPlayerOfType(Player.PlayerType type, bool* found) const {
    SWIGTYPE_p_Quackle__PlayerList__const_iterator ret = new SWIGTYPE_p_Quackle__PlayerList__const_iterator(quackle_im.GamePosition_nextPlayerOfType(cast(void*)swigCPtr, cast(int)type, cast(void*)found), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public SWIGTYPE_p_Quackle__PlayerList__const_iterator playerWithAbbreviatedName(string abbreviatedName, bool* found) const {
    SWIGTYPE_p_Quackle__PlayerList__const_iterator ret = new SWIGTYPE_p_Quackle__PlayerList__const_iterator(quackle_im.GamePosition_playerWithAbbreviatedName(cast(void*)swigCPtr, (abbreviatedName ? std.string.toStringz(abbreviatedName) : null), cast(void*)found), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public PlayerList players() const {
    PlayerList ret = new PlayerList(quackle_im.GamePosition_players(cast(void*)swigCPtr), false);
    return ret;
  }

  public PlayerList endgameAdjustedScores() const {
    PlayerList ret = new PlayerList(quackle_im.GamePosition_endgameAdjustedScores(cast(void*)swigCPtr), true);
    return ret;
  }

  public PlayerList leadingPlayers() const {
    PlayerList ret = new PlayerList(quackle_im.GamePosition_leadingPlayers(cast(void*)swigCPtr), true);
    return ret;
  }

  public int spread() const {
    auto ret = quackle_im.GamePosition_spread__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public int spread(int playerID) const {
    auto ret = quackle_im.GamePosition_spread__SWIG_1(cast(void*)swigCPtr, playerID);
    return ret;
  }

  public bool gameOver() const {
    bool ret = quackle_im.GamePosition_gameOver(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void adjustScoresToFinishGame() {
    quackle_im.GamePosition_adjustScoresToFinishGame(cast(void*)swigCPtr);
  }

  public void adjustScoresToFinishPassedOutGame() {
    quackle_im.GamePosition_adjustScoresToFinishPassedOutGame(cast(void*)swigCPtr);
  }

  public bool doesMoveEndGame(Move move) const {
    bool ret = quackle_im.GamePosition_doesMoveEndGame(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public int deadwood(FixedLengthString tiles) const {
    auto ret = quackle_im.GamePosition_deadwood(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(tiles));
    return ret;
  }

  public void replenishAndSetRack(Rack previousRack) {
    quackle_im.GamePosition_replenishAndSetRack__SWIG_0(cast(void*)swigCPtr, Rack.swigGetCPtr(previousRack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void replenishAndSetRack(Rack previousRack, Player player) {
    quackle_im.GamePosition_replenishAndSetRack__SWIG_1(cast(void*)swigCPtr, Rack.swigGetCPtr(previousRack), Player.swigGetCPtr(player));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setCurrentPlayerRack(Rack rack, bool adjustBag) {
    quackle_im.GamePosition_setCurrentPlayerRack__SWIG_0(cast(void*)swigCPtr, Rack.swigGetCPtr(rack), adjustBag);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setCurrentPlayerRack(Rack rack) {
    quackle_im.GamePosition_setCurrentPlayerRack__SWIG_1(cast(void*)swigCPtr, Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setPlayerRack(int playerID, Rack rack, bool adjustBag) {
    quackle_im.GamePosition_setPlayerRack__SWIG_0(cast(void*)swigCPtr, playerID, Rack.swigGetCPtr(rack), adjustBag);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setPlayerRack(int playerID, Rack rack) {
    quackle_im.GamePosition_setPlayerRack__SWIG_1(cast(void*)swigCPtr, playerID, Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setOppRack(Rack rack, bool adjustBag) {
    quackle_im.GamePosition_setOppRack__SWIG_0(cast(void*)swigCPtr, Rack.swigGetCPtr(rack), adjustBag);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setOppRack(Rack rack) {
    quackle_im.GamePosition_setOppRack__SWIG_1(cast(void*)swigCPtr, Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Rack oppRack() {
    Rack ret = new Rack(quackle_im.GamePosition_oppRack(cast(void*)swigCPtr), true);
    return ret;
  }

  public bool canSetCurrentPlayerRackWithoutBagExpansion(Rack rack) const {
    bool ret = quackle_im.GamePosition_canSetCurrentPlayerRackWithoutBagExpansion(cast(void*)swigCPtr, Rack.swigGetCPtr(rack)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool canSetPlayerRackWithoutBagExpansion(int playerID, Rack rack) const {
    bool ret = quackle_im.GamePosition_canSetPlayerRackWithoutBagExpansion(cast(void*)swigCPtr, playerID, Rack.swigGetCPtr(rack)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void resetBag() {
    quackle_im.GamePosition_resetBag(cast(void*)swigCPtr);
  }

  public void setBag(Bag bag) {
    quackle_im.GamePosition_setBag(cast(void*)swigCPtr, Bag.swigGetCPtr(bag));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setMoveMade(Move move) {
    quackle_im.GamePosition_setMoveMade(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Move moveMade() const {
    Move ret = new Move(quackle_im.GamePosition_moveMade(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setCommittedMove(Move move) {
    quackle_im.GamePosition_setCommittedMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Move committedMove() const {
    Move ret = new Move(quackle_im.GamePosition_committedMove(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setTileBonus(string player, FixedLengthString allegedTiles, int allegedTileBonus) {
    quackle_im.GamePosition_setTileBonus(cast(void*)swigCPtr, (player ? std.string.toStringz(player) : null), FixedLengthString.swigGetCPtr(allegedTiles), allegedTileBonus);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void prepareForCommit() {
    quackle_im.GamePosition_prepareForCommit(cast(void*)swigCPtr);
  }

  public Board boardAfterMoveMade() const {
    Board ret = new Board(quackle_im.GamePosition_boardAfterMoveMade(cast(void*)swigCPtr), true);
    return ret;
  }

  public void resetMoveMade() {
    quackle_im.GamePosition_resetMoveMade(cast(void*)swigCPtr);
  }

  public bool incrementTurn(History history) {
    bool ret = quackle_im.GamePosition_incrementTurn__SWIG_0(cast(void*)swigCPtr, History.swigGetCPtr(history)) ? true : false;
    return ret;
  }

  public bool incrementTurn() {
    bool ret = quackle_im.GamePosition_incrementTurn__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int turnNumber() const {
    auto ret = quackle_im.GamePosition_turnNumber(cast(void*)swigCPtr);
    return ret;
  }

  public void setNestedness(uint nestedness) {
    quackle_im.GamePosition_setNestedness(cast(void*)swigCPtr, nestedness);
  }

  public void incrementNestedness() {
    quackle_im.GamePosition_incrementNestedness(cast(void*)swigCPtr);
  }

  public uint nestedness() const {
    auto ret = quackle_im.GamePosition_nestedness(cast(void*)swigCPtr);
    return ret;
  }

  public string nestednessIndentation() const {
    string ret = std.conv.to!string(quackle_im.GamePosition_nestednessIndentation(cast(void*)swigCPtr));
    return ret;
  }

  public int scorelessTurnsInARow() const {
    auto ret = quackle_im.GamePosition_scorelessTurnsInARow(cast(void*)swigCPtr);
    return ret;
  }

  public HistoryLocation location() const {
    HistoryLocation ret = new HistoryLocation(quackle_im.GamePosition_location(cast(void*)swigCPtr), true);
    return ret;
  }

  public string explanatoryNote() const {
    string ret = std.conv.to!string(quackle_im.GamePosition_explanatoryNote(cast(void*)swigCPtr));
    return ret;
  }

  public void setExplanatoryNote(string explanatoryNote) {
    quackle_im.GamePosition_setExplanatoryNote(cast(void*)swigCPtr, (explanatoryNote ? std.string.toStringz(explanatoryNote) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Board underlyingBoardReference() {
    Board ret = new Board(quackle_im.GamePosition_underlyingBoardReference(cast(void*)swigCPtr), false);
    return ret;
  }
}

class History : PositionList {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.History_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_History(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_History(), true);
  }

  public PlayerList players() const {
    PlayerList ret = new PlayerList(quackle_im.History_players(cast(void*)swigCPtr), false);
    return ret;
  }

  public Player lastPlayer() const {
    Player ret = new Player(quackle_im.History_lastPlayer(cast(void*)swigCPtr), false);
    return ret;
  }

  public GamePosition lastPosition() const {
    GamePosition ret = new GamePosition(quackle_im.History_lastPosition(cast(void*)swigCPtr), false);
    return ret;
  }

  public int maximumTurnNumber() const {
    auto ret = quackle_im.History_maximumTurnNumber(cast(void*)swigCPtr);
    return ret;
  }

  public HistoryLocation lastLocation() const {
    HistoryLocation ret = new HistoryLocation(quackle_im.History_lastLocation(cast(void*)swigCPtr), true);
    return ret;
  }

  public HistoryLocation currentLocation() const {
    HistoryLocation ret = new HistoryLocation(quackle_im.History_currentLocation(cast(void*)swigCPtr), true);
    return ret;
  }

  public GamePosition currentPosition() const {
    GamePosition ret = new GamePosition(quackle_im.History_currentPosition__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public PositionList positionsFacedBy(int playerID) const {
    PositionList ret = new PositionList(quackle_im.History_positionsFacedBy(cast(void*)swigCPtr, playerID), true);
    return ret;
  }

  public GamePosition nextPosition(bool* exists) const {
    GamePosition ret = new GamePosition(quackle_im.History_nextPosition__SWIG_0(cast(void*)swigCPtr, cast(void*)exists), false);
    return ret;
  }

  public GamePosition nextPosition() const {
    GamePosition ret = new GamePosition(quackle_im.History_nextPosition__SWIG_1(cast(void*)swigCPtr), false);
    return ret;
  }

  public GamePosition nextPositionFacedBy(int playerID, bool* exists) const {
    GamePosition ret = new GamePosition(quackle_im.History_nextPositionFacedBy__SWIG_0(cast(void*)swigCPtr, playerID, cast(void*)exists), false);
    return ret;
  }

  public GamePosition nextPositionFacedBy(int playerID) const {
    GamePosition ret = new GamePosition(quackle_im.History_nextPositionFacedBy__SWIG_1(cast(void*)swigCPtr, playerID), false);
    return ret;
  }

  public GamePosition previousPosition(bool* exists) const {
    GamePosition ret = new GamePosition(quackle_im.History_previousPosition__SWIG_0(cast(void*)swigCPtr, cast(void*)exists), false);
    return ret;
  }

  public GamePosition previousPosition() const {
    GamePosition ret = new GamePosition(quackle_im.History_previousPosition__SWIG_1(cast(void*)swigCPtr), false);
    return ret;
  }

  public GamePosition firstPosition(bool* exists) const {
    GamePosition ret = new GamePosition(quackle_im.History_firstPosition__SWIG_0(cast(void*)swigCPtr, cast(void*)exists), false);
    return ret;
  }

  public GamePosition firstPosition() const {
    GamePosition ret = new GamePosition(quackle_im.History_firstPosition__SWIG_1(cast(void*)swigCPtr), false);
    return ret;
  }

  public GamePosition positionAt(HistoryLocation location, bool* exists) const {
    GamePosition ret = new GamePosition(quackle_im.History_positionAt__SWIG_0(cast(void*)swigCPtr, HistoryLocation.swigGetCPtr(location), cast(void*)exists), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public GamePosition positionAt(HistoryLocation location) const {
    GamePosition ret = new GamePosition(quackle_im.History_positionAt__SWIG_1(cast(void*)swigCPtr, HistoryLocation.swigGetCPtr(location)), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class Game {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Game(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Game(), true);
  }

  public void reset() {
    quackle_im.Game_reset(cast(void*)swigCPtr);
  }

  public void setPlayers(PlayerList list) {
    quackle_im.Game_setPlayers(cast(void*)swigCPtr, PlayerList.swigGetCPtr(list));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public PlayerList players() const {
    PlayerList ret = new PlayerList(quackle_im.Game_players(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool hasPositions() const {
    bool ret = quackle_im.Game_hasPositions(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public History history() const {
    History ret = new History(quackle_im.Game_history(cast(void*)swigCPtr), false);
    return ret;
  }

  public void addPosition() {
    quackle_im.Game_addPosition(cast(void*)swigCPtr);
  }

  public GamePosition currentPosition() const {
    GamePosition ret = new GamePosition(quackle_im.Game_currentPosition__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setCurrentPosition(HistoryLocation location) {
    quackle_im.Game_setCurrentPosition__SWIG_0(cast(void*)swigCPtr, HistoryLocation.swigGetCPtr(location));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setCurrentPosition(GamePosition position) {
    quackle_im.Game_setCurrentPosition__SWIG_1(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void associateComputerPlayer(int playerId, ComputerPlayer computerPlayer) {
    quackle_im.Game_associateComputerPlayer(cast(void*)swigCPtr, playerId, ComputerPlayer.swigGetCPtr(computerPlayer));
  }

  public ComputerPlayer computerPlayer(int playerId) {
    void* cPtr = quackle_im.Game_computerPlayer(cast(void*)swigCPtr, playerId);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public void setDefaultComputerPlayer(ComputerPlayer computerPlayer) {
    quackle_im.Game_setDefaultComputerPlayer(cast(void*)swigCPtr, ComputerPlayer.swigGetCPtr(computerPlayer));
  }

  public void associateKnownComputerPlayers() {
    quackle_im.Game_associateKnownComputerPlayers(cast(void*)swigCPtr);
  }

  public ComputerPlayer defaultComputerPlayer() {
    void* cPtr = quackle_im.Game_defaultComputerPlayer(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public Move haveComputerPlay(ComputerPlayer computerPlayer) {
    Move ret = new Move(quackle_im.Game_haveComputerPlay__SWIG_0(cast(void*)swigCPtr, ComputerPlayer.swigGetCPtr(computerPlayer)), true);
    return ret;
  }

  public Move haveComputerPlay() {
    Move ret = new Move(quackle_im.Game_haveComputerPlay__SWIG_1(cast(void*)swigCPtr), true);
    return ret;
  }

  public void advanceToNoncomputerPlayer() {
    quackle_im.Game_advanceToNoncomputerPlayer(cast(void*)swigCPtr);
  }

  public void setCandidate(Move move) {
    quackle_im.Game_setCandidate(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Move candidate() const {
    Move ret = new Move(quackle_im.Game_candidate(cast(void*)swigCPtr), false);
    return ret;
  }

  public void resetCandidature() {
    quackle_im.Game_resetCandidature(cast(void*)swigCPtr);
  }

  public void commitCandidate(bool maintainBoard) {
    quackle_im.Game_commitCandidate__SWIG_0(cast(void*)swigCPtr, maintainBoard);
  }

  public void commitCandidate() {
    quackle_im.Game_commitCandidate__SWIG_1(cast(void*)swigCPtr);
  }

  public void commitMove(Move move) {
    quackle_im.Game_commitMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string description() const {
    string ret = std.conv.to!string(quackle_im.Game_description(cast(void*)swigCPtr));
    return ret;
  }

  public void setDescription(string description) {
    quackle_im.Game_setDescription(cast(void*)swigCPtr, (description ? std.string.toStringz(description) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string title() const {
    string ret = std.conv.to!string(quackle_im.Game_title(cast(void*)swigCPtr));
    return ret;
  }

  public void setTitle(string title) {
    quackle_im.Game_setTitle(cast(void*)swigCPtr, (title ? std.string.toStringz(title) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class GameParameters {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_GameParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_GameParameters(), true);
  }

  public int minimumTilesForExchange() const {
    auto ret = quackle_im.GameParameters_minimumTilesForExchange(cast(void*)swigCPtr);
    return ret;
  }

  public void setMinimumTilesForExchange(int minimumTilesForExchange) {
    quackle_im.GameParameters_setMinimumTilesForExchange(cast(void*)swigCPtr, minimumTilesForExchange);
  }

  public int numberOfScorelessTurnsThatEndsGame() const {
    auto ret = quackle_im.GameParameters_numberOfScorelessTurnsThatEndsGame(cast(void*)swigCPtr);
    return ret;
  }

  public void setNumberOfScorelessTurnsThatEndsGame(int numberOfScorelessTurnsThatEndsGame) {
    quackle_im.GameParameters_setNumberOfScorelessTurnsThatEndsGame(cast(void*)swigCPtr, numberOfScorelessTurnsThatEndsGame);
  }

  public int bingoBonus() const {
    auto ret = quackle_im.GameParameters_bingoBonus(cast(void*)swigCPtr);
    return ret;
  }

  public void setBingoBonus(int bingoBonus) {
    quackle_im.GameParameters_setBingoBonus(cast(void*)swigCPtr, bingoBonus);
  }

  public int rackSize() const {
    auto ret = quackle_im.GameParameters_rackSize(cast(void*)swigCPtr);
    return ret;
  }

  public void setRackSize(int rackSize) {
    quackle_im.GameParameters_setRackSize(cast(void*)swigCPtr, rackSize);
  }

  public uint overdrawPenalty() const {
    auto ret = quackle_im.GameParameters_overdrawPenalty(cast(void*)swigCPtr);
    return ret;
  }

  public void setOverdrawPenalty(uint overdrawPenalty) {
    quackle_im.GameParameters_setOverdrawPenalty(cast(void*)swigCPtr, overdrawPenalty);
  }
}

class EnglishParameters : GameParameters {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.EnglishParameters_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_EnglishParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_EnglishParameters(), true);
  }
}

class AveragedValue {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_AveragedValue(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_AveragedValue(), true);
  }

  public void incorporateValue(double newValue) {
    quackle_im.AveragedValue_incorporateValue(cast(void*)swigCPtr, newValue);
  }

  public void clear() {
    quackle_im.AveragedValue_clear(cast(void*)swigCPtr);
  }

  public SWIGTYPE_p_long_double valueSum() const {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(quackle_im.AveragedValue_valueSum(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_long_double squaredValueSum() const {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(quackle_im.AveragedValue_squaredValueSum(cast(void*)swigCPtr), true);
    return ret;
  }

  public core.stdc.config.c_long incorporatedValues() const {
    auto ret = quackle_im.AveragedValue_incorporatedValues(cast(void*)swigCPtr);
    return ret;
  }

  public bool hasValues() const {
    bool ret = quackle_im.AveragedValue_hasValues(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public double averagedValue() const {
    auto ret = quackle_im.AveragedValue_averagedValue(cast(void*)swigCPtr);
    return ret;
  }

  public double standardDeviation() const {
    auto ret = quackle_im.AveragedValue_standardDeviation(cast(void*)swigCPtr);
    return ret;
  }
}

class PositionStatistics {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_PositionStatistics(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum StatisticType {
    StatisticScore,
    StatisticBingos
  }

  public AveragedValue getStatistic(PositionStatistics.StatisticType type) const {
    AveragedValue ret = new AveragedValue(quackle_im.PositionStatistics_getStatistic(cast(void*)swigCPtr, cast(int)type), true);
    return ret;
  }

  public void score(AveragedValue value) @property {
    quackle_im.PositionStatistics_score_set(cast(void*)swigCPtr, AveragedValue.swigGetCPtr(value));
  }

  public AveragedValue score() @property const {
    void* cPtr = quackle_im.PositionStatistics_score_get(cast(void*)swigCPtr);
    AveragedValue ret = (cPtr is null) ? null : new AveragedValue(cPtr, false);
    return ret;
  }

  public void bingos(AveragedValue value) @property {
    quackle_im.PositionStatistics_bingos_set(cast(void*)swigCPtr, AveragedValue.swigGetCPtr(value));
  }

  public AveragedValue bingos() @property const {
    void* cPtr = quackle_im.PositionStatistics_bingos_get(cast(void*)swigCPtr);
    AveragedValue ret = (cPtr is null) ? null : new AveragedValue(cPtr, false);
    return ret;
  }

  public this() {
    this(quackle_im.new_PositionStatistics(), true);
  }
}

class Level {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Level(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void setNumberScores(uint number) {
    quackle_im.Level_setNumberScores(cast(void*)swigCPtr, number);
  }

  public void statistics(SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_t value) @property {
    quackle_im.Level_statistics_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_t statistics() @property const {
    void* cPtr = quackle_im.Level_statistics_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_t(cPtr, false);
    return ret;
  }

  public this() {
    this(quackle_im.new_Level(), true);
  }
}

class LevelList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_LevelList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void setNumberLevels(uint number) {
    quackle_im.LevelList_setNumberLevels(cast(void*)swigCPtr, number);
  }

  public this() {
    this(quackle_im.new_LevelList(), true);
  }
}

class SimmedMove {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_SimmedMove(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Move _move) {
    this(quackle_im.new_SimmedMove(Move.swigGetCPtr(_move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public double calculateEquity() const {
    auto ret = quackle_im.SimmedMove_calculateEquity(cast(void*)swigCPtr);
    return ret;
  }

  public double calculateWinPercentage() const {
    auto ret = quackle_im.SimmedMove_calculateWinPercentage(cast(void*)swigCPtr);
    return ret;
  }

  public void clear() {
    quackle_im.SimmedMove_clear(cast(void*)swigCPtr);
  }

  public bool includeInSimulation() const {
    bool ret = quackle_im.SimmedMove_includeInSimulation(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setIncludeInSimulation(bool includeInSimulation) {
    quackle_im.SimmedMove_setIncludeInSimulation(cast(void*)swigCPtr, includeInSimulation);
  }

  public core.stdc.config.c_long id() const {
    auto ret = quackle_im.SimmedMove_id(cast(void*)swigCPtr);
    return ret;
  }

  public void move(Move value) @property {
    quackle_im.SimmedMove_move_set(cast(void*)swigCPtr, Move.swigGetCPtr(value));
  }

  public Move move() @property const {
    void* cPtr = quackle_im.SimmedMove_move_get(cast(void*)swigCPtr);
    Move ret = (cPtr is null) ? null : new Move(cPtr, false);
    return ret;
  }

  public void levels(LevelList value) @property {
    quackle_im.SimmedMove_levels_set(cast(void*)swigCPtr, LevelList.swigGetCPtr(value));
  }

  public LevelList levels() @property const {
    void* cPtr = quackle_im.SimmedMove_levels_get(cast(void*)swigCPtr);
    LevelList ret = (cPtr is null) ? null : new LevelList(cPtr, false);
    return ret;
  }

  public void residual(AveragedValue value) @property {
    quackle_im.SimmedMove_residual_set(cast(void*)swigCPtr, AveragedValue.swigGetCPtr(value));
  }

  public AveragedValue residual() @property const {
    void* cPtr = quackle_im.SimmedMove_residual_get(cast(void*)swigCPtr);
    AveragedValue ret = (cPtr is null) ? null : new AveragedValue(cPtr, false);
    return ret;
  }

  public void gameSpread(AveragedValue value) @property {
    quackle_im.SimmedMove_gameSpread_set(cast(void*)swigCPtr, AveragedValue.swigGetCPtr(value));
  }

  public AveragedValue gameSpread() @property const {
    void* cPtr = quackle_im.SimmedMove_gameSpread_get(cast(void*)swigCPtr);
    AveragedValue ret = (cPtr is null) ? null : new AveragedValue(cPtr, false);
    return ret;
  }

  public void wins(AveragedValue value) @property {
    quackle_im.SimmedMove_wins_set(cast(void*)swigCPtr, AveragedValue.swigGetCPtr(value));
  }

  public AveragedValue wins() @property const {
    void* cPtr = quackle_im.SimmedMove_wins_get(cast(void*)swigCPtr);
    AveragedValue ret = (cPtr is null) ? null : new AveragedValue(cPtr, false);
    return ret;
  }

  public PositionStatistics getPositionStatistics(int level, int playerIndex) const {
    PositionStatistics ret = new PositionStatistics(quackle_im.SimmedMove_getPositionStatistics(cast(void*)swigCPtr, level, playerIndex), true);
    return ret;
  }
}

class SimmedMoveMessage {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_SimmedMoveMessage(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void id(core.stdc.config.c_long value) @property {
    quackle_im.SimmedMoveMessage_id_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_long id() @property const {
    auto ret = quackle_im.SimmedMoveMessage_id_get(cast(void*)swigCPtr);
    return ret;
  }

  public void move(Move value) @property {
    quackle_im.SimmedMoveMessage_move_set(cast(void*)swigCPtr, Move.swigGetCPtr(value));
  }

  public Move move() @property const {
    void* cPtr = quackle_im.SimmedMoveMessage_move_get(cast(void*)swigCPtr);
    Move ret = (cPtr is null) ? null : new Move(cPtr, false);
    return ret;
  }

  public void levels(LevelList value) @property {
    quackle_im.SimmedMoveMessage_levels_set(cast(void*)swigCPtr, LevelList.swigGetCPtr(value));
  }

  public LevelList levels() @property const {
    void* cPtr = quackle_im.SimmedMoveMessage_levels_get(cast(void*)swigCPtr);
    LevelList ret = (cPtr is null) ? null : new LevelList(cPtr, false);
    return ret;
  }

  public void score(SWIGTYPE_p_std__vectorT_double_t value) @property {
    quackle_im.SimmedMoveMessage_score_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_double_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_double_t score() @property const {
    void* cPtr = quackle_im.SimmedMoveMessage_score_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_double_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
    return ret;
  }

  public void bingos(SWIGTYPE_p_std__vectorT_double_t value) @property {
    quackle_im.SimmedMoveMessage_bingos_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_double_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_double_t bingos() @property const {
    void* cPtr = quackle_im.SimmedMoveMessage_bingos_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_double_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_double_t(cPtr, false);
    return ret;
  }

  public void residual(double value) @property {
    quackle_im.SimmedMoveMessage_residual_set(cast(void*)swigCPtr, value);
  }

  public double residual() @property const {
    auto ret = quackle_im.SimmedMoveMessage_residual_get(cast(void*)swigCPtr);
    return ret;
  }

  public void gameSpread(double value) @property {
    quackle_im.SimmedMoveMessage_gameSpread_set(cast(void*)swigCPtr, value);
  }

  public double gameSpread() @property const {
    auto ret = quackle_im.SimmedMoveMessage_gameSpread_get(cast(void*)swigCPtr);
    return ret;
  }

  public void wins(double value) @property {
    quackle_im.SimmedMoveMessage_wins_set(cast(void*)swigCPtr, value);
  }

  public double wins() @property const {
    auto ret = quackle_im.SimmedMoveMessage_wins_get(cast(void*)swigCPtr);
    return ret;
  }

  public void bogowin(bool value) @property {
    quackle_im.SimmedMoveMessage_bogowin_set(cast(void*)swigCPtr, value);
  }

  public bool bogowin() @property const {
    bool ret = quackle_im.SimmedMoveMessage_bogowin_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void xmlIndent(string value) @property {
    quackle_im.SimmedMoveMessage_xmlIndent_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string xmlIndent() @property const {
    string ret = std.conv.to!string(quackle_im.SimmedMoveMessage_xmlIndent_get(cast(void*)swigCPtr));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_SimmedMoveMessage(), true);
  }
}

class SimmedMoveConstants {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_SimmedMoveConstants(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void game(Game value) @property {
    quackle_im.SimmedMoveConstants_game_set(cast(void*)swigCPtr, Game.swigGetCPtr(value));
  }

  public Game game() @property const {
    void* cPtr = quackle_im.SimmedMoveConstants_game_get(cast(void*)swigCPtr);
    Game ret = (cPtr is null) ? null : new Game(cPtr, false);
    return ret;
  }

  public void startPlayerId(int value) @property {
    quackle_im.SimmedMoveConstants_startPlayerId_set(cast(void*)swigCPtr, value);
  }

  public int startPlayerId() @property const {
    auto ret = quackle_im.SimmedMoveConstants_startPlayerId_get(cast(void*)swigCPtr);
    return ret;
  }

  public void playerCount(int value) @property {
    quackle_im.SimmedMoveConstants_playerCount_set(cast(void*)swigCPtr, value);
  }

  public int playerCount() @property const {
    auto ret = quackle_im.SimmedMoveConstants_playerCount_get(cast(void*)swigCPtr);
    return ret;
  }

  public void decimalTurns(int value) @property {
    quackle_im.SimmedMoveConstants_decimalTurns_set(cast(void*)swigCPtr, value);
  }

  public int decimalTurns() @property const {
    auto ret = quackle_im.SimmedMoveConstants_decimalTurns_get(cast(void*)swigCPtr);
    return ret;
  }

  public void levelCount(int value) @property {
    quackle_im.SimmedMoveConstants_levelCount_set(cast(void*)swigCPtr, value);
  }

  public int levelCount() @property const {
    auto ret = quackle_im.SimmedMoveConstants_levelCount_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ignoreOppos(bool value) @property {
    quackle_im.SimmedMoveConstants_ignoreOppos_set(cast(void*)swigCPtr, value);
  }

  public bool ignoreOppos() @property const {
    bool ret = quackle_im.SimmedMoveConstants_ignoreOppos_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void isLogging(bool value) @property {
    quackle_im.SimmedMoveConstants_isLogging_set(cast(void*)swigCPtr, value);
  }

  public bool isLogging() @property const {
    bool ret = quackle_im.SimmedMoveConstants_isLogging_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public this() {
    this(quackle_im.new_SimmedMoveConstants(), true);
  }
}

class SimmedMoveMessageQueue {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_SimmedMoveMessageQueue(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_SimmedMoveMessageQueue(), true);
  }

  public void push(SimmedMoveMessage msg) {
    quackle_im.SimmedMoveMessageQueue_push(cast(void*)swigCPtr, SimmedMoveMessage.swigGetCPtr(msg));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void send_terminate_all() {
    quackle_im.SimmedMoveMessageQueue_send_terminate_all(cast(void*)swigCPtr);
  }

  public void send_terminate_one(SWIGTYPE_p_std__thread__id id) {
    quackle_im.SimmedMoveMessageQueue_send_terminate_one(cast(void*)swigCPtr, SWIGTYPE_p_std__thread__id.swigGetCPtr(id));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public SimmedMoveConstants constants() {
    SimmedMoveConstants ret = new SimmedMoveConstants(quackle_im.SimmedMoveMessageQueue_constants(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setConstants(SimmedMoveConstants constants) {
    quackle_im.SimmedMoveMessageQueue_setConstants(cast(void*)swigCPtr, SimmedMoveConstants.swigGetCPtr(constants));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class Simulator {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Simulator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Simulator(), true);
  }

  public void setPosition(GamePosition position) {
    quackle_im.Simulator_setPosition(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GamePosition currentPosition() {
    GamePosition ret = new GamePosition(quackle_im.Simulator_currentPosition__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public History history() const {
    History ret = new History(quackle_im.Simulator_history(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setLogfile(string logfile, bool append) {
    quackle_im.Simulator_setLogfile__SWIG_0(cast(void*)swigCPtr, (logfile ? std.string.toStringz(logfile) : null), append);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setLogfile(string logfile) {
    quackle_im.Simulator_setLogfile__SWIG_1(cast(void*)swigCPtr, (logfile ? std.string.toStringz(logfile) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string logfile() const {
    string ret = std.conv.to!string(quackle_im.Simulator_logfile(cast(void*)swigCPtr));
    return ret;
  }

  public void setDispatch(ComputerDispatch dispatch) {
    quackle_im.Simulator_setDispatch(cast(void*)swigCPtr, ComputerDispatch.swigGetCPtr(dispatch));
  }

  public ComputerDispatch dispatch() const {
    void* cPtr = quackle_im.Simulator_dispatch(cast(void*)swigCPtr);
    ComputerDispatch ret = (cPtr is null) ? null : new ComputerDispatch(cPtr, false);
    return ret;
  }

  public void logMessage(string message) {
    quackle_im.Simulator_logMessage(cast(void*)swigCPtr, (message ? std.string.toStringz(message) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool isLogging() const {
    bool ret = quackle_im.Simulator_isLogging(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void closeLogfile() {
    quackle_im.Simulator_closeLogfile(cast(void*)swigCPtr);
  }

  public void setIncludedMoves(MoveList moves) {
    quackle_im.Simulator_setIncludedMoves(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void makeSureConsideredMovesAreIncluded() {
    quackle_im.Simulator_makeSureConsideredMovesAreIncluded(cast(void*)swigCPtr);
  }

  public void moveConsideredMovesToBeginning(MoveList moves) const {
    quackle_im.Simulator_moveConsideredMovesToBeginning(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setConsideredMoves(MoveList moves) {
    quackle_im.Simulator_setConsideredMoves(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public MoveList consideredMoves() const {
    MoveList ret = new MoveList(quackle_im.Simulator_consideredMoves(cast(void*)swigCPtr), false);
    return ret;
  }

  public void addConsideredMove(Move move) {
    quackle_im.Simulator_addConsideredMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool isConsideredMove(Move move) const {
    bool ret = quackle_im.Simulator_isConsideredMove(cast(void*)swigCPtr, Move.swigGetCPtr(move)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void pruneTo(double equityThreshold, int maxNumberOfMoves) {
    quackle_im.Simulator_pruneTo(cast(void*)swigCPtr, equityThreshold, maxNumberOfMoves);
  }

  public void setIgnoreOppos(bool ignore) {
    quackle_im.Simulator_setIgnoreOppos(cast(void*)swigCPtr, ignore);
  }

  public bool ignoreOppos() const {
    bool ret = quackle_im.Simulator_ignoreOppos(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static void simThreadFunc(SimmedMoveMessageQueue incoming, SimmedMoveMessageQueue outgoing) {
    quackle_im.Simulator_simThreadFunc(SimmedMoveMessageQueue.swigGetCPtr(incoming), SimmedMoveMessageQueue.swigGetCPtr(outgoing));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setThreadCount(size_t count) {
    quackle_im.Simulator_setThreadCount(cast(void*)swigCPtr, count);
  }

  public void resetNumbers() {
    quackle_im.Simulator_resetNumbers(cast(void*)swigCPtr);
  }

  public void simulate(int plies, int iterations) {
    quackle_im.Simulator_simulate__SWIG_0(cast(void*)swigCPtr, plies, iterations);
  }

  public void simulate(int plies) {
    quackle_im.Simulator_simulate__SWIG_1(cast(void*)swigCPtr, plies);
  }

  public static void simulateOnePosition(SimmedMoveMessage message, SimmedMoveConstants constants) {
    quackle_im.Simulator_simulateOnePosition(SimmedMoveMessage.swigGetCPtr(message), SimmedMoveConstants.swigGetCPtr(constants));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void incorporateMessage(SimmedMoveMessage message) {
    quackle_im.Simulator_incorporateMessage(cast(void*)swigCPtr, SimmedMoveMessage.swigGetCPtr(message));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setPartialOppoRack(Rack rack) {
    quackle_im.Simulator_setPartialOppoRack(cast(void*)swigCPtr, Rack.swigGetCPtr(rack));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public Rack partialOppoRack() const {
    Rack ret = new Rack(quackle_im.Simulator_partialOppoRack(cast(void*)swigCPtr), false);
    return ret;
  }

  public void randomizeOppoRacks() {
    quackle_im.Simulator_randomizeOppoRacks(cast(void*)swigCPtr);
  }

  public void randomizeDrawingOrder() {
    quackle_im.Simulator_randomizeDrawingOrder(cast(void*)swigCPtr);
  }

  public int iterations() const {
    auto ret = quackle_im.Simulator_iterations(cast(void*)swigCPtr);
    return ret;
  }

  public bool hasSimulationResults() const {
    bool ret = quackle_im.Simulator_hasSimulationResults(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Quackle__SimmedMove_t simmedMoves() const {
    SWIGTYPE_p_std__vectorT_Quackle__SimmedMove_t ret = new SWIGTYPE_p_std__vectorT_Quackle__SimmedMove_t(quackle_im.Simulator_simmedMoves(cast(void*)swigCPtr), false);
    return ret;
  }

  public MoveList moves(bool prune, bool byWin) const {
    MoveList ret = new MoveList(quackle_im.Simulator_moves__SWIG_0(cast(void*)swigCPtr, prune, byWin), true);
    return ret;
  }

  public MoveList moves(bool prune) const {
    MoveList ret = new MoveList(quackle_im.Simulator_moves__SWIG_1(cast(void*)swigCPtr, prune), true);
    return ret;
  }

  public MoveList moves() const {
    MoveList ret = new MoveList(quackle_im.Simulator_moves__SWIG_2(cast(void*)swigCPtr), true);
    return ret;
  }

  public SimmedMove simmedMoveForMove(Move move) const {
    SimmedMove ret = new SimmedMove(quackle_im.Simulator_simmedMoveForMove(cast(void*)swigCPtr, Move.swigGetCPtr(move)), false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public int numLevels() const {
    auto ret = quackle_im.Simulator_numLevels(cast(void*)swigCPtr);
    return ret;
  }

  public int numPlayersAtLevel(int levelIndex) const {
    auto ret = quackle_im.Simulator_numPlayersAtLevel(cast(void*)swigCPtr, levelIndex);
    return ret;
  }
}

int QUACKLE_NULL_COMPUTER_PLAYER_ID() @property {
  auto ret = quackle_im.QUACKLE_NULL_COMPUTER_PLAYER_ID_get();
  return ret;
}

int QUACKLE_STATIC_COMPUTER_PLAYER_ID() @property {
  auto ret = quackle_im.QUACKLE_STATIC_COMPUTER_PLAYER_ID_get();
  return ret;
}

class ComputerParameters {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ComputerParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void secondsPerTurn(int value) @property {
    quackle_im.ComputerParameters_secondsPerTurn_set(cast(void*)swigCPtr, value);
  }

  public int secondsPerTurn() @property const {
    auto ret = quackle_im.ComputerParameters_secondsPerTurn_get(cast(void*)swigCPtr);
    return ret;
  }

  public void inferring(bool value) @property {
    quackle_im.ComputerParameters_inferring_set(cast(void*)swigCPtr, value);
  }

  public bool inferring() @property const {
    bool ret = quackle_im.ComputerParameters_inferring_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public this() {
    this(quackle_im.new_ComputerParameters(), true);
  }
}

class ComputerDispatch {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ComputerDispatch(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool shouldAbort() {
    bool ret = quackle_im.ComputerDispatch_shouldAbort(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void signalFractionDone(double fractionDone) {
    quackle_im.ComputerDispatch_signalFractionDone(cast(void*)swigCPtr, fractionDone);
  }
}

class ScalingDispatch : ComputerDispatch {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.ScalingDispatch_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ScalingDispatch(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(ComputerDispatch shadow, double scale, double addition) {
    this(quackle_im.new_ScalingDispatch(ComputerDispatch.swigGetCPtr(shadow), scale, addition), true);
  }

  public override bool shouldAbort() {
    bool ret = quackle_im.ScalingDispatch_shouldAbort(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public override void signalFractionDone(double fractionDone) {
    quackle_im.ScalingDispatch_signalFractionDone(cast(void*)swigCPtr, fractionDone);
  }
}

class ComputerPlayer {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ComputerPlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void setParameters(ComputerParameters parameters) {
    quackle_im.ComputerPlayer_setParameters(cast(void*)swigCPtr, ComputerParameters.swigGetCPtr(parameters));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public ComputerParameters parameters() const {
    ComputerParameters ret = new ComputerParameters(quackle_im.ComputerPlayer_parameters(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setPosition(GamePosition position) {
    quackle_im.ComputerPlayer_setPosition(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GamePosition currentPosition() {
    GamePosition ret = new GamePosition(quackle_im.ComputerPlayer_currentPosition__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public bool shouldAbort() {
    bool ret = quackle_im.ComputerPlayer_shouldAbort(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void signalFractionDone(double fractionDone) {
    quackle_im.ComputerPlayer_signalFractionDone(cast(void*)swigCPtr, fractionDone);
  }

  public void considerMove(Move move) {
    quackle_im.ComputerPlayer_considerMove(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setConsideredMoves(MoveList moves) {
    quackle_im.ComputerPlayer_setConsideredMoves(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string name() const {
    string ret = std.conv.to!string(quackle_im.ComputerPlayer_name(cast(void*)swigCPtr));
    return ret;
  }

  public int id() const {
    auto ret = quackle_im.ComputerPlayer_id(cast(void*)swigCPtr);
    return ret;
  }

  public Move move() {
    Move ret = new Move(quackle_im.ComputerPlayer_move(cast(void*)swigCPtr), true);
    return ret;
  }

  public ComputerPlayer clone() {
    void* cPtr = quackle_im.ComputerPlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public MoveList moves(int nmoves) {
    MoveList ret = new MoveList(quackle_im.ComputerPlayer_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }

  public bool isSlow() const {
    bool ret = quackle_im.ComputerPlayer_isSlow(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isUserVisible() const {
    bool ret = quackle_im.ComputerPlayer_isUserVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public ComputerDispatch dispatch() const {
    void* cPtr = quackle_im.ComputerPlayer_dispatch(cast(void*)swigCPtr);
    ComputerDispatch ret = (cPtr is null) ? null : new ComputerDispatch(cPtr, false);
    return ret;
  }

  public void setDispatch(ComputerDispatch dispatch) {
    quackle_im.ComputerPlayer_setDispatch(cast(void*)swigCPtr, ComputerDispatch.swigGetCPtr(dispatch));
  }
}

class StaticPlayer : ComputerPlayer {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.StaticPlayer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_StaticPlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_StaticPlayer(), true);
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.StaticPlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public override Move move() {
    Move ret = new Move(quackle_im.StaticPlayer_move(cast(void*)swigCPtr), true);
    return ret;
  }

  public override MoveList moves(int nmoves) {
    MoveList ret = new MoveList(quackle_im.StaticPlayer_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }
}

class ComputerPlayerCollection : PlayerList {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.ComputerPlayerCollection_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ComputerPlayerCollection(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_ComputerPlayerCollection(), true);
  }

  public void addPlayer(ComputerPlayer computerPlayer) {
    quackle_im.ComputerPlayerCollection_addPlayer(cast(void*)swigCPtr, ComputerPlayer.swigGetCPtr(computerPlayer));
  }

  public static Player createPlayer(ComputerPlayer computerPlayer) {
    Player ret = new Player(quackle_im.ComputerPlayerCollection_createPlayer(ComputerPlayer.swigGetCPtr(computerPlayer)), true);
    return ret;
  }

  public static ComputerPlayerCollection fullCollection() {
    ComputerPlayerCollection ret = new ComputerPlayerCollection(quackle_im.ComputerPlayerCollection_fullCollection(), true);
    return ret;
  }
}

class DataManager {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_DataManager(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_DataManager(), true);
  }

  public static DataManager self() {
    void* cPtr = quackle_im.DataManager_self();
    DataManager ret = (cPtr is null) ? null : new DataManager(cPtr, false);
    return ret;
  }

  public static bool exists() {
    bool ret = quackle_im.DataManager_exists() ? true : false;
    return ret;
  }

  public bool isGood() const {
    bool ret = quackle_im.DataManager_isGood(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public Evaluator evaluator() {
    void* cPtr = quackle_im.DataManager_evaluator(cast(void*)swigCPtr);
    Evaluator ret = (cPtr is null) ? null : new Evaluator(cPtr, false);
    return ret;
  }

  public void setEvaluator(Evaluator evaluator) {
    quackle_im.DataManager_setEvaluator(cast(void*)swigCPtr, Evaluator.swigGetCPtr(evaluator));
  }

  public GameParameters parameters() {
    void* cPtr = quackle_im.DataManager_parameters(cast(void*)swigCPtr);
    GameParameters ret = (cPtr is null) ? null : new GameParameters(cPtr, false);
    return ret;
  }

  public void setParameters(GameParameters parameters) {
    quackle_im.DataManager_setParameters(cast(void*)swigCPtr, GameParameters.swigGetCPtr(parameters));
  }

  public AlphabetParameters alphabetParameters() {
    void* cPtr = quackle_im.DataManager_alphabetParameters(cast(void*)swigCPtr);
    AlphabetParameters ret = (cPtr is null) ? null : new AlphabetParameters(cPtr, false);
    return ret;
  }

  public void setAlphabetParameters(AlphabetParameters alphabetParameters) {
    quackle_im.DataManager_setAlphabetParameters(cast(void*)swigCPtr, AlphabetParameters.swigGetCPtr(alphabetParameters));
  }

  public BoardParameters boardParameters() {
    void* cPtr = quackle_im.DataManager_boardParameters(cast(void*)swigCPtr);
    BoardParameters ret = (cPtr is null) ? null : new BoardParameters(cPtr, false);
    return ret;
  }

  public void setBoardParameters(BoardParameters boardParameters) {
    quackle_im.DataManager_setBoardParameters(cast(void*)swigCPtr, BoardParameters.swigGetCPtr(boardParameters));
  }

  public LexiconParameters lexiconParameters() {
    void* cPtr = quackle_im.DataManager_lexiconParameters(cast(void*)swigCPtr);
    LexiconParameters ret = (cPtr is null) ? null : new LexiconParameters(cPtr, false);
    return ret;
  }

  public void setLexiconParameters(LexiconParameters lexiconParameters) {
    quackle_im.DataManager_setLexiconParameters(cast(void*)swigCPtr, LexiconParameters.swigGetCPtr(lexiconParameters));
  }

  public StrategyParameters strategyParameters() {
    void* cPtr = quackle_im.DataManager_strategyParameters(cast(void*)swigCPtr);
    StrategyParameters ret = (cPtr is null) ? null : new StrategyParameters(cPtr, false);
    return ret;
  }

  public void setStrategyParameters(StrategyParameters strategyParameters) {
    quackle_im.DataManager_setStrategyParameters(cast(void*)swigCPtr, StrategyParameters.swigGetCPtr(strategyParameters));
  }

  public PlayerList computerPlayers() const {
    PlayerList ret = new PlayerList(quackle_im.DataManager_computerPlayers(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setComputerPlayers(PlayerList playerList) {
    quackle_im.DataManager_setComputerPlayers(cast(void*)swigCPtr, PlayerList.swigGetCPtr(playerList));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void cleanupComputerPlayers() {
    quackle_im.DataManager_cleanupComputerPlayers(cast(void*)swigCPtr);
  }

  public string findDataFile(string subDirectory, string lexicon, string file) {
    string ret = std.conv.to!string(quackle_im.DataManager_findDataFile__SWIG_0(cast(void*)swigCPtr, (subDirectory ? std.string.toStringz(subDirectory) : null), (lexicon ? std.string.toStringz(lexicon) : null), (file ? std.string.toStringz(file) : null)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string findDataFile(string subDirectory, string file) {
    string ret = std.conv.to!string(quackle_im.DataManager_findDataFile__SWIG_1(cast(void*)swigCPtr, (subDirectory ? std.string.toStringz(subDirectory) : null), (file ? std.string.toStringz(file) : null)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool hasUserDataFile(string subDirectory, string file) {
    bool ret = quackle_im.DataManager_hasUserDataFile(cast(void*)swigCPtr, (subDirectory ? std.string.toStringz(subDirectory) : null), (file ? std.string.toStringz(file) : null)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string makeDataFilename(string subDirectory, string lexicon, string file, bool user) {
    string ret = std.conv.to!string(quackle_im.DataManager_makeDataFilename__SWIG_0(cast(void*)swigCPtr, (subDirectory ? std.string.toStringz(subDirectory) : null), (lexicon ? std.string.toStringz(lexicon) : null), (file ? std.string.toStringz(file) : null), user));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string makeDataFilename(string subDirectory, string file, bool user) {
    string ret = std.conv.to!string(quackle_im.DataManager_makeDataFilename__SWIG_1(cast(void*)swigCPtr, (subDirectory ? std.string.toStringz(subDirectory) : null), (file ? std.string.toStringz(file) : null), user));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void setBackupLexicon(string backupLexicon) {
    quackle_im.DataManager_setBackupLexicon(cast(void*)swigCPtr, (backupLexicon ? std.string.toStringz(backupLexicon) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string backupLexicon() {
    string ret = std.conv.to!string(quackle_im.DataManager_backupLexicon(cast(void*)swigCPtr));
    return ret;
  }

  public void setAppDataDirectory(string directory) {
    quackle_im.DataManager_setAppDataDirectory(cast(void*)swigCPtr, (directory ? std.string.toStringz(directory) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string appDataDirectory() {
    string ret = std.conv.to!string(quackle_im.DataManager_appDataDirectory(cast(void*)swigCPtr));
    return ret;
  }

  public void setUserDataDirectory(string directory) {
    quackle_im.DataManager_setUserDataDirectory(cast(void*)swigCPtr, (directory ? std.string.toStringz(directory) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string userDataDirectory() {
    string ret = std.conv.to!string(quackle_im.DataManager_userDataDirectory(cast(void*)swigCPtr));
    return ret;
  }

  public void seedRandomNumbers(uint seed) {
    quackle_im.DataManager_seedRandomNumbers__SWIG_0(cast(void*)swigCPtr, seed);
  }

  public void seedRandomNumbers(SWIGTYPE_p_seed_seq seed) {
    quackle_im.DataManager_seedRandomNumbers__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_seed_seq.swigGetCPtr(seed));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public int randomInteger(int low, int high) {
    auto ret = quackle_im.DataManager_randomInteger(cast(void*)swigCPtr, low, high);
    return ret;
  }
}

class EndgameMove {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_EndgameMove(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Move _move) {
    this(quackle_im.new_EndgameMove(Move.swigGetCPtr(_move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void move(Move value) @property {
    quackle_im.EndgameMove_move_set(cast(void*)swigCPtr, Move.swigGetCPtr(value));
  }

  public Move move() @property const {
    void* cPtr = quackle_im.EndgameMove_move_get(cast(void*)swigCPtr);
    Move ret = (cPtr is null) ? null : new Move(cPtr, false);
    return ret;
  }

  public void optimistic(double value) @property {
    quackle_im.EndgameMove_optimistic_set(cast(void*)swigCPtr, value);
  }

  public double optimistic() @property const {
    auto ret = quackle_im.EndgameMove_optimistic_get(cast(void*)swigCPtr);
    return ret;
  }

  public void pessimistic(double value) @property {
    quackle_im.EndgameMove_pessimistic_set(cast(void*)swigCPtr, value);
  }

  public double pessimistic() @property const {
    auto ret = quackle_im.EndgameMove_pessimistic_get(cast(void*)swigCPtr);
    return ret;
  }

  public void estimated(double value) @property {
    quackle_im.EndgameMove_estimated_set(cast(void*)swigCPtr, value);
  }

  public double estimated() @property const {
    auto ret = quackle_im.EndgameMove_estimated_get(cast(void*)swigCPtr);
    return ret;
  }

  public void outplay(bool value) @property {
    quackle_im.EndgameMove_outplay_set(cast(void*)swigCPtr, value);
  }

  public bool outplay() @property const {
    bool ret = quackle_im.EndgameMove_outplay_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class EndgameMoveList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_EndgameMoveList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public static bool optimisticComparator(EndgameMove move1, EndgameMove move2) {
    bool ret = quackle_im.EndgameMoveList_optimisticComparator(EndgameMove.swigGetCPtr(move1), EndgameMove.swigGetCPtr(move2)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_EndgameMoveList(), true);
  }
}

class Endgame {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Endgame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Endgame(), true);
  }

  public void setPosition(GamePosition position) {
    quackle_im.Endgame_setPosition(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GamePosition currentPosition() {
    GamePosition ret = new GamePosition(quackle_im.Endgame_currentPosition__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setDispatch(ComputerDispatch dispatch) {
    quackle_im.Endgame_setDispatch(cast(void*)swigCPtr, ComputerDispatch.swigGetCPtr(dispatch));
  }

  public void setLogfile(string logfile, bool append) {
    quackle_im.Endgame_setLogfile__SWIG_0(cast(void*)swigCPtr, (logfile ? std.string.toStringz(logfile) : null), append);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void setLogfile(string logfile) {
    quackle_im.Endgame_setLogfile__SWIG_1(cast(void*)swigCPtr, (logfile ? std.string.toStringz(logfile) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public string logfile() const {
    string ret = std.conv.to!string(quackle_im.Endgame_logfile(cast(void*)swigCPtr));
    return ret;
  }

  public void logMessage(string message) {
    quackle_im.Endgame_logMessage(cast(void*)swigCPtr, (message ? std.string.toStringz(message) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool isLogging() const {
    bool ret = quackle_im.Endgame_isLogging(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void closeLogfile() {
    quackle_im.Endgame_closeLogfile(cast(void*)swigCPtr);
  }

  public void setIncludedMoves(MoveList moves) {
    quackle_im.Endgame_setIncludedMoves(cast(void*)swigCPtr, MoveList.swigGetCPtr(moves));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public MoveList moves(uint nmoves) {
    MoveList ret = new MoveList(quackle_im.Endgame_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }

  public EndgameMoveList endgameMoves() const {
    EndgameMoveList ret = new EndgameMoveList(quackle_im.Endgame_endgameMoves(cast(void*)swigCPtr), false);
    return ret;
  }

  public Move solve(int nestedness) {
    Move ret = new Move(quackle_im.Endgame_solve(cast(void*)swigCPtr, nestedness), true);
    return ret;
  }

  public void reallyPlayOut(Move move, int nestedness) {
    quackle_im.Endgame_reallyPlayOut(cast(void*)swigCPtr, Move.swigGetCPtr(move), nestedness);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public double disappoint(EndgameMove hope, double bestPessimistic) {
    auto ret = quackle_im.Endgame_disappoint(cast(void*)swigCPtr, EndgameMove.swigGetCPtr(hope), bestPessimistic);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class EndgamePlayer : ComputerPlayer {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.EndgamePlayer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_EndgamePlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_EndgamePlayer(), true);
  }

  public override Move move() {
    Move ret = new Move(quackle_im.EndgamePlayer_move(cast(void*)swigCPtr), true);
    return ret;
  }

  public override MoveList moves(int nmoves) {
    MoveList ret = new MoveList(quackle_im.EndgamePlayer_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.EndgamePlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public override bool isUserVisible() const {
    bool ret = quackle_im.EndgamePlayer_isUserVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public override void setDispatch(ComputerDispatch dispatch) {
    quackle_im.EndgamePlayer_setDispatch(cast(void*)swigCPtr, ComputerDispatch.swigGetCPtr(dispatch));
  }
}

class ProbableRack {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ProbableRack(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void rack(Rack value) @property {
    quackle_im.ProbableRack_rack_set(cast(void*)swigCPtr, Rack.swigGetCPtr(value));
  }

  public Rack rack() @property const {
    void* cPtr = quackle_im.ProbableRack_rack_get(cast(void*)swigCPtr);
    Rack ret = (cPtr is null) ? null : new Rack(cPtr, false);
    return ret;
  }

  public void probability(double value) @property {
    quackle_im.ProbableRack_probability_set(cast(void*)swigCPtr, value);
  }

  public double probability() @property const {
    auto ret = quackle_im.ProbableRack_probability_get(cast(void*)swigCPtr);
    return ret;
  }

  public void possibility(double value) @property {
    quackle_im.ProbableRack_possibility_set(cast(void*)swigCPtr, value);
  }

  public double possibility() @property const {
    auto ret = quackle_im.ProbableRack_possibility_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(quackle_im.new_ProbableRack(), true);
  }
}

class Enumerator {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Enumerator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Bag B) {
    this(quackle_im.new_Enumerator(Bag.swigGetCPtr(B)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void enumerate(ProbableRackList racks, uint rackSize) {
    quackle_im.Enumerator_enumerate__SWIG_0(cast(void*)swigCPtr, ProbableRackList.swigGetCPtr(racks), rackSize);
  }

  public void enumerate(ProbableRackList racks) {
    quackle_im.Enumerator_enumerate__SWIG_1(cast(void*)swigCPtr, ProbableRackList.swigGetCPtr(racks));
  }

  public void enumeratePossible(ProbableRackList racks, Bag bag) {
    quackle_im.Enumerator_enumeratePossible(cast(void*)swigCPtr, ProbableRackList.swigGetCPtr(racks), Bag.swigGetCPtr(bag));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void normalizeProbabilities(ProbableRackList racks) {
    quackle_im.Enumerator_normalizeProbabilities(ProbableRackList.swigGetCPtr(racks));
  }
}

class SmartBogowin : ComputerPlayer {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.SmartBogowin_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_SmartBogowin(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_SmartBogowin(), true);
  }

  public override Move move() {
    Move ret = new Move(quackle_im.SmartBogowin_move(cast(void*)swigCPtr), true);
    return ret;
  }

  public override MoveList moves(int nmoves) {
    MoveList ret = new MoveList(quackle_im.SmartBogowin_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.SmartBogowin_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public override bool isSlow() const {
    bool ret = quackle_im.SmartBogowin_isSlow(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public override bool isUserVisible() const {
    bool ret = quackle_im.SmartBogowin_isUserVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public double bogopoints(Move move) {
    auto ret = quackle_im.SmartBogowin_bogopoints(cast(void*)swigCPtr, Move.swigGetCPtr(move));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class Stopwatch {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Stopwatch(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Stopwatch(), true);
  }

  public void start() {
    quackle_im.Stopwatch_start(cast(void*)swigCPtr);
  }

  public int elapsed() const {
    auto ret = quackle_im.Stopwatch_elapsed(cast(void*)swigCPtr);
    return ret;
  }

  public bool exceeded(int seconds) const {
    bool ret = quackle_im.Stopwatch_exceeded(cast(void*)swigCPtr, seconds) ? true : false;
    return ret;
  }
}

class ExtensionWithInfo {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_ExtensionWithInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_ExtensionWithInfo(), true);
  }

  public void extensionLetterString(FixedLengthString value) @property {
    quackle_im.ExtensionWithInfo_extensionLetterString_set(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(value));
  }

  public FixedLengthString extensionLetterString() @property const {
    void* cPtr = quackle_im.ExtensionWithInfo_extensionLetterString_get(cast(void*)swigCPtr);
    FixedLengthString ret = (cPtr is null) ? null : new FixedLengthString(cPtr, false);
    return ret;
  }

  public void playability(int value) @property {
    quackle_im.ExtensionWithInfo_playability_set(cast(void*)swigCPtr, value);
  }

  public int playability() @property const {
    auto ret = quackle_im.ExtensionWithInfo_playability_get(cast(void*)swigCPtr);
    return ret;
  }

  public void probability(double value) @property {
    quackle_im.ExtensionWithInfo_probability_set(cast(void*)swigCPtr, value);
  }

  public double probability() @property const {
    auto ret = quackle_im.ExtensionWithInfo_probability_get(cast(void*)swigCPtr);
    return ret;
  }

  public void british(bool value) @property {
    quackle_im.ExtensionWithInfo_british_set(cast(void*)swigCPtr, value);
  }

  public bool british() @property const {
    bool ret = quackle_im.ExtensionWithInfo_british_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class WordWithInfo {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_WordWithInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_WordWithInfo(), true);
  }

  public void wordLetterString(FixedLengthString value) @property {
    quackle_im.WordWithInfo_wordLetterString_set(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(value));
  }

  public FixedLengthString wordLetterString() @property const {
    void* cPtr = quackle_im.WordWithInfo_wordLetterString_get(cast(void*)swigCPtr);
    FixedLengthString ret = (cPtr is null) ? null : new FixedLengthString(cPtr, false);
    return ret;
  }

  public void playability(int value) @property {
    quackle_im.WordWithInfo_playability_set(cast(void*)swigCPtr, value);
  }

  public int playability() @property const {
    auto ret = quackle_im.WordWithInfo_playability_get(cast(void*)swigCPtr);
    return ret;
  }

  public void probability(double value) @property {
    quackle_im.WordWithInfo_probability_set(cast(void*)swigCPtr, value);
  }

  public double probability() @property const {
    auto ret = quackle_im.WordWithInfo_probability_get(cast(void*)swigCPtr);
    return ret;
  }

  public void british(bool value) @property {
    quackle_im.WordWithInfo_british_set(cast(void*)swigCPtr, value);
  }

  public bool british() @property const {
    bool ret = quackle_im.WordWithInfo_british_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void frontExtensions(SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t value) @property {
    quackle_im.WordWithInfo_frontExtensions_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t frontExtensions() @property const {
    void* cPtr = quackle_im.WordWithInfo_frontExtensions_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t(cPtr, false);
    return ret;
  }

  public void backExtensions(SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t value) @property {
    quackle_im.WordWithInfo_backExtensions_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t backExtensions() @property const {
    void* cPtr = quackle_im.WordWithInfo_backExtensions_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t(cPtr, false);
    return ret;
  }
}

class Generator {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Generator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum KibitzFlags {
    RegularKibitz = 0x0000,
    CannotExchange = 0x0001
  }

  enum AnagramFlags {
    AnagramRearrange = 0x0000,
    NoRequireAllLetters = 0x0001,
    AddAnyLetters = 0x0002,
    ClearBlanknesses = 0x0004,
    SingleMatch = 0x0008
  }

  public this() {
    this(quackle_im.new_Generator__SWIG_0(), true);
  }

  public this(GamePosition position) {
    this(quackle_im.new_Generator__SWIG_1(GamePosition.swigGetCPtr(position)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void kibitz(int kibitzLength, int flags) {
    quackle_im.Generator_kibitz__SWIG_0(cast(void*)swigCPtr, kibitzLength, flags);
  }

  public void kibitz(int kibitzLength) {
    quackle_im.Generator_kibitz__SWIG_1(cast(void*)swigCPtr, kibitzLength);
  }

  public void kibitz() {
    quackle_im.Generator_kibitz__SWIG_2(cast(void*)swigCPtr);
  }

  public MoveList kibitzList() {
    MoveList ret = new MoveList(quackle_im.Generator_kibitzList(cast(void*)swigCPtr), false);
    return ret;
  }

  public MoveList allPossiblePlays() {
    MoveList ret = new MoveList(quackle_im.Generator_allPossiblePlays(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setPosition(GamePosition position) {
    quackle_im.Generator_setPosition(cast(void*)swigCPtr, GamePosition.swigGetCPtr(position));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GamePosition position() const {
    GamePosition ret = new GamePosition(quackle_im.Generator_position(cast(void*)swigCPtr), false);
    return ret;
  }

  public void makeMove(Move move, bool regenerateCrosses) {
    quackle_im.Generator_makeMove(cast(void*)swigCPtr, Move.swigGetCPtr(move), regenerateCrosses);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool isAcceptableWord(FixedLengthString word) {
    bool ret = quackle_im.Generator_isAcceptableWord(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(word)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public LetterStringVector anagramLetters(FixedLengthString letters, int flags) {
    LetterStringVector ret = new LetterStringVector(quackle_im.Generator_anagramLetters__SWIG_0(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letters), flags), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public LetterStringVector anagramLetters(FixedLengthString letters) {
    LetterStringVector ret = new LetterStringVector(quackle_im.Generator_anagramLetters__SWIG_1(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(letters)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void storeWordInfo(WordWithInfo wordWithInfo) {
    quackle_im.Generator_storeWordInfo(cast(void*)swigCPtr, WordWithInfo.swigGetCPtr(wordWithInfo));
  }

  public void storeExtensions(WordWithInfo wordWithInfo) {
    quackle_im.Generator_storeExtensions(cast(void*)swigCPtr, WordWithInfo.swigGetCPtr(wordWithInfo));
  }

  public void allCrosses() {
    quackle_im.Generator_allCrosses(cast(void*)swigCPtr);
  }
}

int QUACKLE_GADDAG_SEPARATOR() @property {
  auto ret = quackle_im.QUACKLE_GADDAG_SEPARATOR_get();
  return ret;
}

class GaddagNode {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_GaddagNode(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public ubyte letter() const {
    auto ret = quackle_im.GaddagNode_letter(cast(void*)swigCPtr);
    return ret;
  }

  public bool isTerminal() const {
    bool ret = quackle_im.GaddagNode_isTerminal(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public GaddagNode firstChild() const {
    void* cPtr = quackle_im.GaddagNode_firstChild(cast(void*)swigCPtr);
    GaddagNode ret = (cPtr is null) ? null : new GaddagNode(cPtr, false);
    return ret;
  }

  public GaddagNode nextSibling() const {
    void* cPtr = quackle_im.GaddagNode_nextSibling(cast(void*)swigCPtr);
    GaddagNode ret = (cPtr is null) ? null : new GaddagNode(cPtr, false);
    return ret;
  }

  public GaddagNode child(ubyte l) const {
    void* cPtr = quackle_im.GaddagNode_child(cast(void*)swigCPtr, l);
    GaddagNode ret = (cPtr is null) ? null : new GaddagNode(cPtr, false);
    return ret;
  }

  public this() {
    this(quackle_im.new_GaddagNode(), true);
  }
}

class LexiconInterpreter {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_LexiconInterpreter(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void loadDawg(SWIGTYPE_p_ifstream file, LexiconParameters lexparams) {
    quackle_im.LexiconInterpreter_loadDawg(cast(void*)swigCPtr, SWIGTYPE_p_ifstream.swigGetCPtr(file), LexiconParameters.swigGetCPtr(lexparams));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void loadGaddag(SWIGTYPE_p_ifstream file, LexiconParameters lexparams) {
    quackle_im.LexiconInterpreter_loadGaddag(cast(void*)swigCPtr, SWIGTYPE_p_ifstream.swigGetCPtr(file), LexiconParameters.swigGetCPtr(lexparams));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void dawgAt(ubyte* dawg, int index, uint* p, ubyte* letter, bool* t, bool* lastchild, bool* british, int* playability) const {
    quackle_im.LexiconInterpreter_dawgAt(cast(void*)swigCPtr, cast(void*)dawg, index, cast(void*)p, cast(void*)letter, cast(void*)t, cast(void*)lastchild, cast(void*)british, cast(void*)playability);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public int versionNumber() const {
    auto ret = quackle_im.LexiconInterpreter_versionNumber(cast(void*)swigCPtr);
    return ret;
  }
}

class LexiconParameters {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_LexiconParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_LexiconParameters(), true);
  }

  public void unloadAll() {
    quackle_im.LexiconParameters_unloadAll(cast(void*)swigCPtr);
  }

  public bool hasSomething() const {
    bool ret = quackle_im.LexiconParameters_hasSomething(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void loadDawg(string filename) {
    quackle_im.LexiconParameters_loadDawg(cast(void*)swigCPtr, (filename ? std.string.toStringz(filename) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void unloadDawg() {
    quackle_im.LexiconParameters_unloadDawg(cast(void*)swigCPtr);
  }

  public bool hasDawg() const {
    bool ret = quackle_im.LexiconParameters_hasDawg(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int dawgVersion() const {
    auto ret = quackle_im.LexiconParameters_dawgVersion(cast(void*)swigCPtr);
    return ret;
  }

  public void loadGaddag(string filename) {
    quackle_im.LexiconParameters_loadGaddag(cast(void*)swigCPtr, (filename ? std.string.toStringz(filename) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void unloadGaddag() {
    quackle_im.LexiconParameters_unloadGaddag(cast(void*)swigCPtr);
  }

  public bool hasGaddag() const {
    bool ret = quackle_im.LexiconParameters_hasGaddag(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static string findDictionaryFile(string lexicon) {
    string ret = std.conv.to!string(quackle_im.LexiconParameters_findDictionaryFile((lexicon ? std.string.toStringz(lexicon) : null)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static bool hasUserDictionaryFile(string lexicon) {
    bool ret = quackle_im.LexiconParameters_hasUserDictionaryFile((lexicon ? std.string.toStringz(lexicon) : null)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public string lexiconName() const {
    string ret = std.conv.to!string(quackle_im.LexiconParameters_lexiconName(cast(void*)swigCPtr));
    return ret;
  }

  public void setLexiconName(string name) {
    quackle_im.LexiconParameters_setLexiconName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public void dawgAt(int index, uint* p, ubyte* letter, bool* t, bool* lastchild, bool* british, int* playability) const {
    quackle_im.LexiconParameters_dawgAt(cast(void*)swigCPtr, index, cast(void*)p, cast(void*)letter, cast(void*)t, cast(void*)lastchild, cast(void*)british, cast(void*)playability);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public GaddagNode gaddagRoot() const {
    void* cPtr = quackle_im.LexiconParameters_gaddagRoot(cast(void*)swigCPtr);
    GaddagNode ret = (cPtr is null) ? null : new GaddagNode(cPtr, false);
    return ret;
  }

  public string hashString(bool shortened) const {
    string ret = std.conv.to!string(quackle_im.LexiconParameters_hashString(cast(void*)swigCPtr, shortened));
    return ret;
  }

  public string copyrightString() const {
    string ret = std.conv.to!string(quackle_im.LexiconParameters_copyrightString(cast(void*)swigCPtr));
    return ret;
  }

  public string logoFileName() const {
    string ret = std.conv.to!string(quackle_im.LexiconParameters_logoFileName(cast(void*)swigCPtr));
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__string_t utf8Alphabet() const {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(quackle_im.LexiconParameters_utf8Alphabet(cast(void*)swigCPtr), false);
    return ret;
  }
}

class Preendgame : ComputerPlayer {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.Preendgame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Preendgame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_Preendgame(), true);
  }

  public override Move move() {
    Move ret = new Move(quackle_im.Preendgame_move(cast(void*)swigCPtr), true);
    return ret;
  }

  public override MoveList moves(int nmoves) {
    MoveList ret = new MoveList(quackle_im.Preendgame_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.Preendgame_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public override bool isUserVisible() const {
    bool ret = quackle_im.Preendgame_isUserVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public override bool isSlow() const {
    bool ret = quackle_im.Preendgame_isSlow(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static int maximumTilesInBagToEngage() {
    auto ret = quackle_im.Preendgame_maximumTilesInBagToEngage();
    return ret;
  }
}

class Reporter {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Reporter(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_Reporter(), true);
  }

  public static void reportPosition(GamePosition position, ComputerPlayer computerPlayer, SWIGTYPE_p_std__string report) {
    quackle_im.Reporter_reportPosition(GamePosition.swigGetCPtr(position), ComputerPlayer.swigGetCPtr(computerPlayer), SWIGTYPE_p_std__string.swigGetCPtr(report));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void reportGameStatistics(Game game, SWIGTYPE_p_std__string report) {
    quackle_im.Reporter_reportGameStatistics(Game.swigGetCPtr(game), SWIGTYPE_p_std__string.swigGetCPtr(report));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void reportHeader(Game game, SWIGTYPE_p_std__string report) {
    quackle_im.Reporter_reportHeader(Game.swigGetCPtr(game), SWIGTYPE_p_std__string.swigGetCPtr(report));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public static void reportGame(Game game, ComputerPlayer computerPlayer, SWIGTYPE_p_std__string report) {
    quackle_im.Reporter_reportGame(Game.swigGetCPtr(game), ComputerPlayer.swigGetCPtr(computerPlayer), SWIGTYPE_p_std__string.swigGetCPtr(report));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }
}

class Resolvent : ComputerPlayer {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.Resolvent_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Resolvent(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_Resolvent(), true);
  }

  public override Move move() {
    Move ret = new Move(quackle_im.Resolvent_move(cast(void*)swigCPtr), true);
    return ret;
  }

  public override MoveList moves(int nmoves) {
    MoveList ret = new MoveList(quackle_im.Resolvent_moves(cast(void*)swigCPtr, nmoves), true);
    return ret;
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.Resolvent_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }

  public override bool isSlow() const {
    bool ret = quackle_im.Resolvent_isSlow(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public override bool isUserVisible() const {
    bool ret = quackle_im.Resolvent_isUserVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class InferringPlayer : Resolvent {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.InferringPlayer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_InferringPlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_InferringPlayer(), true);
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.InferringPlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }
}

class TorontoPlayer : Resolvent {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.TorontoPlayer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_TorontoPlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_TorontoPlayer(), true);
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.TorontoPlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }
}

class FiveMinutePlayer : Resolvent {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.FiveMinutePlayer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_FiveMinutePlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_FiveMinutePlayer(), true);
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.FiveMinutePlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }
}

class TwentySecondPlayer : Resolvent {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.TwentySecondPlayer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_TwentySecondPlayer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_TwentySecondPlayer(), true);
  }

  public override ComputerPlayer clone() {
    void* cPtr = quackle_im.TwentySecondPlayer_clone(cast(void*)swigCPtr);
    ComputerPlayer ret = (cPtr is null) ? null : new ComputerPlayer(cPtr, false);
    return ret;
  }
}

class StrategyParameters {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_StrategyParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_StrategyParameters(), true);
  }

  public void initialize(string lexicon) {
    quackle_im.StrategyParameters_initialize(cast(void*)swigCPtr, (lexicon ? std.string.toStringz(lexicon) : null));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public bool hasSyn2() const {
    bool ret = quackle_im.StrategyParameters_hasSyn2(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool hasWorths() const {
    bool ret = quackle_im.StrategyParameters_hasWorths(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool hasVcPlace() const {
    bool ret = quackle_im.StrategyParameters_hasVcPlace(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool hasBogowin() const {
    bool ret = quackle_im.StrategyParameters_hasBogowin(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool hasSuperleaves() const {
    bool ret = quackle_im.StrategyParameters_hasSuperleaves(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public double syn2(ubyte letter1, ubyte letter2) const {
    auto ret = quackle_im.StrategyParameters_syn2(cast(void*)swigCPtr, letter1, letter2);
    return ret;
  }

  public double tileWorth(ubyte letter) const {
    auto ret = quackle_im.StrategyParameters_tileWorth(cast(void*)swigCPtr, letter);
    return ret;
  }

  public double vcPlace(int start, int length, int consbits) {
    auto ret = quackle_im.StrategyParameters_vcPlace(cast(void*)swigCPtr, start, length, consbits);
    return ret;
  }

  public double bogowin(int lead, int unseen, int blanks) {
    auto ret = quackle_im.StrategyParameters_bogowin(cast(void*)swigCPtr, lead, unseen, blanks);
    return ret;
  }

  public double superleave(FixedLengthString leave) {
    auto ret = quackle_im.StrategyParameters_superleave(cast(void*)swigCPtr, FixedLengthString.swigGetCPtr(leave));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class FlexibleAlphabetParameters : AlphabetParameters {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.FlexibleAlphabetParameters_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_FlexibleAlphabetParameters(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_FlexibleAlphabetParameters(), true);
  }

  public bool load(SWIGTYPE_p_QString filename) {
    bool ret = quackle_im.FlexibleAlphabetParameters_load(cast(void*)swigCPtr, SWIGTYPE_p_QString.swigGetCPtr(filename)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }
}

class UtilSettings {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_UtilSettings(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(quackle_im.new_UtilSettings(), true);
  }

  public static UtilSettings self() {
    void* cPtr = quackle_im.UtilSettings_self();
    UtilSettings ret = (cPtr is null) ? null : new UtilSettings(cPtr, false);
    return ret;
  }

  public void octothorpBritish(bool value) @property {
    quackle_im.UtilSettings_octothorpBritish_set(cast(void*)swigCPtr, value);
  }

  public bool octothorpBritish() @property const {
    bool ret = quackle_im.UtilSettings_octothorpBritish_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void vowelFirst(bool value) @property {
    quackle_im.UtilSettings_vowelFirst_set(cast(void*)swigCPtr, value);
  }

  public bool vowelFirst() @property const {
    bool ret = quackle_im.UtilSettings_vowelFirst_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void scoreInvalidAsZero(bool value) @property {
    quackle_im.UtilSettings_scoreInvalidAsZero_set(cast(void*)swigCPtr, value);
  }

  public bool scoreInvalidAsZero() @property const {
    bool ret = quackle_im.UtilSettings_scoreInvalidAsZero_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class Util {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Util(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public static string qstringToString(SWIGTYPE_p_QString qstring) {
    string ret = std.conv.to!string(quackle_im.Util_qstringToString(SWIGTYPE_p_QString.swigGetCPtr(qstring)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static FixedLengthString encode(SWIGTYPE_p_QString qstring) {
    FixedLengthString ret = new FixedLengthString(quackle_im.Util_encode(SWIGTYPE_p_QString.swigGetCPtr(qstring)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static FixedLengthString nonBlankEncode(SWIGTYPE_p_QString qstring) {
    FixedLengthString ret = new FixedLengthString(quackle_im.Util_nonBlankEncode(SWIGTYPE_p_QString.swigGetCPtr(qstring)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString uvStringToQString(string stdWString) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_uvStringToQString((stdWString ? std.string.toStringz(stdWString) : null)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString letterStringToQString(FixedLengthString letterString) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_letterStringToQString(FixedLengthString.swigGetCPtr(letterString)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString letterToQString(ubyte letter) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_letterToQString(letter), true);
    return ret;
  }

  public static string qstringToStdString(SWIGTYPE_p_QString qstring) {
    string ret = std.conv.to!string(quackle_im.Util_qstringToStdString(SWIGTYPE_p_QString.swigGetCPtr(qstring)));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString stdStringToQString(string stdString) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_stdStringToQString((stdString ? std.string.toStringz(stdString) : null)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString moveToDetailedString(Move move) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_moveToDetailedString(Move.swigGetCPtr(move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString moveToSensitiveString(Move move) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_moveToSensitiveString(Move.swigGetCPtr(move)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static FixedLengthString alphagram(FixedLengthString word) {
    FixedLengthString ret = new FixedLengthString(quackle_im.Util_alphagram__SWIG_0(FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString alphagram(SWIGTYPE_p_QString word) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_alphagram__SWIG_1(SWIGTYPE_p_QString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static FixedLengthString arrangeLettersForUser(FixedLengthString word) {
    FixedLengthString ret = new FixedLengthString(quackle_im.Util_arrangeLettersForUser__SWIG_0(FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static FixedLengthString arrangeLettersForUser(Rack rack) {
    FixedLengthString ret = new FixedLengthString(quackle_im.Util_arrangeLettersForUser__SWIG_1(Rack.swigGetCPtr(rack)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString arrangeLettersForUser(SWIGTYPE_p_QString word) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_arrangeLettersForUser__SWIG_2(SWIGTYPE_p_QString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Rack makeRack(SWIGTYPE_p_QString letters) {
    Rack ret = new Rack(quackle_im.Util_makeRack(SWIGTYPE_p_QString.swigGetCPtr(letters)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString sanitizeUserVisibleLetterString(SWIGTYPE_p_QString pipedString) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_sanitizeUserVisibleLetterString(SWIGTYPE_p_QString.swigGetCPtr(pipedString)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public static SWIGTYPE_p_QString symbolsFor(FixedLengthString word) {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Util_symbolsFor(FixedLengthString.swigGetCPtr(word)), true);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(quackle_im.new_Util(), true);
  }
}

class Logania {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_Logania(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum ReadFlags {
    BasicLoad = 0x0000,
    MaintainBoardPreparation = 0x0001
  }

  public Game read(SWIGTYPE_p_QTextStream stream, int flags) {
    void* cPtr = quackle_im.Logania_read(cast(void*)swigCPtr, SWIGTYPE_p_QTextStream.swigGetCPtr(stream), flags);
    Game ret = (cPtr is null) ? null : new Game(cPtr, false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool canRead(SWIGTYPE_p_QTextStream stream) const {
    bool ret = quackle_im.Logania_canRead(cast(void*)swigCPtr, SWIGTYPE_p_QTextStream.swigGetCPtr(stream)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public void write(Game game, SWIGTYPE_p_QTextStream stream) {
    quackle_im.Logania_write(cast(void*)swigCPtr, Game.swigGetCPtr(game), SWIGTYPE_p_QTextStream.swigGetCPtr(stream));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_QString filter() const {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.Logania_filter(cast(void*)swigCPtr), true);
    return ret;
  }
}

class GCGIO : Logania {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(quackle_im.GCGIO_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          quackle_im.delete_GCGIO(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(quackle_im.new_GCGIO(), true);
  }

  public Game read(SWIGTYPE_p_QString filename, int flags) {
    void* cPtr = quackle_im.GCGIO_read__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_QString.swigGetCPtr(filename), flags);
    Game ret = (cPtr is null) ? null : new Game(cPtr, false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override Game read(SWIGTYPE_p_QTextStream stream, int flags) {
    void* cPtr = quackle_im.GCGIO_read__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_QTextStream.swigGetCPtr(stream), flags);
    Game ret = (cPtr is null) ? null : new Game(cPtr, false);
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override bool canRead(SWIGTYPE_p_QTextStream stream) const {
    bool ret = quackle_im.GCGIO_canRead(cast(void*)swigCPtr, SWIGTYPE_p_QTextStream.swigGetCPtr(stream)) ? true : false;
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void write(Game game, SWIGTYPE_p_QTextStream stream) {
    quackle_im.GCGIO_write(cast(void*)swigCPtr, Game.swigGetCPtr(game), SWIGTYPE_p_QTextStream.swigGetCPtr(stream));
    if (quackle_im.SwigPendingException.isPending) throw quackle_im.SwigPendingException.retrieve();
  }

  public override SWIGTYPE_p_QString filter() const {
    SWIGTYPE_p_QString ret = new SWIGTYPE_p_QString(quackle_im.GCGIO_filter(cast(void*)swigCPtr), true);
    return ret;
  }
}

class SWIGTYPE_p_Quackle__Board__TileInformation {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_long_double {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_Quackle__ExtensionWithInfo_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_double_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ifstream {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_QString {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__thread__id {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_istream {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ostream {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_QTextStream {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__string {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_seed_seq {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_Quackle__PositionStatistics_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_std__string_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_Quackle__SimmedMove_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_bitsetT_55_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_Quackle__PlayerList__const_iterator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(typeof(this) obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin quackle_im.SwigOperatorDefinitions;
}
