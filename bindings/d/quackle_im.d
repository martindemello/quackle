/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module quackle_im;
static import core.stdc.config;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import core.stdc.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return core.stdc.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import core.sys.posix.dlfcn;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libquackle_wrap.dylib", "libquackle_wrap.bundle"];
    }
    possibleFileNames ~= ["libquackle_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["quackle_wrap.dll", "libquackle_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbacksquackle", "SWIGRegisterExceptionCallbacks_quackle"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallbackquackle", "SWIGRegisterStringCallback_quackle"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("FIXED_STRING_MAXIMUM_LENGTH_get", "D_FIXED_STRING_MAXIMUM_LENGTH_get"));
  mixin(bindCode("new_FixedLengthString__SWIG_0", "D_new_FixedLengthString__SWIG_0"));
  mixin(bindCode("new_FixedLengthString__SWIG_1", "D_new_FixedLengthString__SWIG_1"));
  mixin(bindCode("new_FixedLengthString__SWIG_2", "D_new_FixedLengthString__SWIG_2"));
  mixin(bindCode("new_FixedLengthString__SWIG_3", "D_new_FixedLengthString__SWIG_3"));
  mixin(bindCode("new_FixedLengthString__SWIG_4", "D_new_FixedLengthString__SWIG_4"));
  mixin(bindCode("FixedLengthString_begin__SWIG_0", "D_FixedLengthString_begin__SWIG_0"));
  mixin(bindCode("FixedLengthString_end__SWIG_0", "D_FixedLengthString_end__SWIG_0"));
  mixin(bindCode("FixedLengthString_erase", "D_FixedLengthString_erase"));
  mixin(bindCode("FixedLengthString_length", "D_FixedLengthString_length"));
  mixin(bindCode("FixedLengthString_substr", "D_FixedLengthString_substr"));
  mixin(bindCode("FixedLengthString_empty", "D_FixedLengthString_empty"));
  mixin(bindCode("FixedLengthString_size", "D_FixedLengthString_size"));
  mixin(bindCode("FixedLengthString_clear", "D_FixedLengthString_clear"));
  mixin(bindCode("FixedLengthString_push_back", "D_FixedLengthString_push_back"));
  mixin(bindCode("FixedLengthString_pop_back", "D_FixedLengthString_pop_back"));
  mixin(bindCode("FixedLengthString_constData", "D_FixedLengthString_constData"));
  mixin(bindCode("FixedLengthString_compare", "D_FixedLengthString_compare"));
  mixin(bindCode("FixedLengthString_swigOpAddAssign__SWIG_0", "D_FixedLengthString_swigOpAddAssign__SWIG_0"));
  mixin(bindCode("FixedLengthString_swigOpAddAssign__SWIG_1", "D_FixedLengthString_swigOpAddAssign__SWIG_1"));
  mixin(bindCode("FixedLengthString_opIndex", "D_FixedLengthString_opIndex"));
  mixin(bindCode("FixedLengthString_maxSize_get", "D_FixedLengthString_maxSize_get"));
  mixin(bindCode("delete_FixedLengthString", "D_delete_FixedLengthString"));
  mixin(bindCode("swigOpAdd__SWIG_0", "D_swigOpAdd__SWIG_0"));
  mixin(bindCode("swigOpAdd__SWIG_1", "D_swigOpAdd__SWIG_1"));
  mixin(bindCode("swigOpAdd__SWIG_2", "D_swigOpAdd__SWIG_2"));
  mixin(bindCode("swigOpLt__SWIG_0", "D_swigOpLt__SWIG_0"));
  mixin(bindCode("QUACKLE_USE_WCHAR_FOR_USER_VISIBLE_get", "D_QUACKLE_USE_WCHAR_FOR_USER_VISIBLE_get"));
  mixin(bindCode("QUACKLE_MAXIMUM_ALPHABET_SIZE_get", "D_QUACKLE_MAXIMUM_ALPHABET_SIZE_get"));
  mixin(bindCode("QUACKLE_MINIMUM_ALPHABET_SIZE_get", "D_QUACKLE_MINIMUM_ALPHABET_SIZE_get"));
  mixin(bindCode("QUACKLE_NULL_MARK_TEXT_get", "D_QUACKLE_NULL_MARK_TEXT_get"));
  mixin(bindCode("QUACKLE_NULL_MARK_get", "D_QUACKLE_NULL_MARK_get"));
  mixin(bindCode("QUACKLE_BLANK_MARK_get", "D_QUACKLE_BLANK_MARK_get"));
  mixin(bindCode("QUACKLE_PLAYED_THRU_MARK_get", "D_QUACKLE_PLAYED_THRU_MARK_get"));
  mixin(bindCode("QUACKLE_PLAYTHRU_START_MARK_get", "D_QUACKLE_PLAYTHRU_START_MARK_get"));
  mixin(bindCode("QUACKLE_PLAYTHRU_END_MARK_get", "D_QUACKLE_PLAYTHRU_END_MARK_get"));
  mixin(bindCode("QUACKLE_FIRST_LETTER_get", "D_QUACKLE_FIRST_LETTER_get"));
  mixin(bindCode("QUACKLE_BLANK_OFFSET_get", "D_QUACKLE_BLANK_OFFSET_get"));
  mixin(bindCode("LETTER_STRING_MAXIMUM_LENGTH_get", "D_LETTER_STRING_MAXIMUM_LENGTH_get"));
  mixin(bindCode("left", "D_left"));
  mixin(bindCode("alphabetize", "D_alphabetize"));
  mixin(bindCode("clearBlankness", "D_clearBlankness"));
  mixin(bindCode("setBlankness", "D_setBlankness"));
  mixin(bindCode("usedTiles", "D_usedTiles"));
  mixin(bindCode("counts__SWIG_0", "D_counts__SWIG_0"));
  mixin(bindCode("counts__SWIG_1", "D_counts__SWIG_1"));
  mixin(bindCode("back", "D_back"));
  mixin(bindCode("pop_back", "D_pop_back"));
  mixin(bindCode("front", "D_front"));
  mixin(bindCode("pop_front", "D_pop_front"));
  mixin(bindCode("allButFront", "D_allButFront"));
  mixin(bindCode("new_LetterParameter__SWIG_0", "D_new_LetterParameter__SWIG_0"));
  mixin(bindCode("new_LetterParameter__SWIG_1", "D_new_LetterParameter__SWIG_1"));
  mixin(bindCode("new_LetterParameter__SWIG_2", "D_new_LetterParameter__SWIG_2"));
  mixin(bindCode("new_LetterParameter__SWIG_3", "D_new_LetterParameter__SWIG_3"));
  mixin(bindCode("new_LetterParameter__SWIG_4", "D_new_LetterParameter__SWIG_4"));
  mixin(bindCode("new_LetterParameter__SWIG_5", "D_new_LetterParameter__SWIG_5"));
  mixin(bindCode("LetterParameter_text", "D_LetterParameter_text"));
  mixin(bindCode("LetterParameter_setText", "D_LetterParameter_setText"));
  mixin(bindCode("LetterParameter_blankText", "D_LetterParameter_blankText"));
  mixin(bindCode("LetterParameter_setBlankText", "D_LetterParameter_setBlankText"));
  mixin(bindCode("LetterParameter_letter", "D_LetterParameter_letter"));
  mixin(bindCode("LetterParameter_setLetter", "D_LetterParameter_setLetter"));
  mixin(bindCode("LetterParameter_score", "D_LetterParameter_score"));
  mixin(bindCode("LetterParameter_setScore", "D_LetterParameter_setScore"));
  mixin(bindCode("LetterParameter_count", "D_LetterParameter_count"));
  mixin(bindCode("LetterParameter_setCount", "D_LetterParameter_setCount"));
  mixin(bindCode("LetterParameter_isVowel", "D_LetterParameter_isVowel"));
  mixin(bindCode("LetterParameter_setVowel", "D_LetterParameter_setVowel"));
  mixin(bindCode("delete_LetterParameter", "D_delete_LetterParameter"));
  mixin(bindCode("new_AlphabetParameters", "D_new_AlphabetParameters"));
  mixin(bindCode("AlphabetParameters_length", "D_AlphabetParameters_length"));
  mixin(bindCode("AlphabetParameters_firstLetter", "D_AlphabetParameters_firstLetter"));
  mixin(bindCode("AlphabetParameters_lastLetter", "D_AlphabetParameters_lastLetter"));
  mixin(bindCode("AlphabetParameters_setAlphabet", "D_AlphabetParameters_setAlphabet"));
  mixin(bindCode("AlphabetParameters_letterParameter", "D_AlphabetParameters_letterParameter"));
  mixin(bindCode("AlphabetParameters_setLetterParameter", "D_AlphabetParameters_setLetterParameter"));
  mixin(bindCode("AlphabetParameters_emptyAlphabet", "D_AlphabetParameters_emptyAlphabet"));
  mixin(bindCode("AlphabetParameters_setCount", "D_AlphabetParameters_setCount"));
  mixin(bindCode("AlphabetParameters_setScore", "D_AlphabetParameters_setScore"));
  mixin(bindCode("AlphabetParameters_isBlankLetter", "D_AlphabetParameters_isBlankLetter"));
  mixin(bindCode("AlphabetParameters_clearBlankness__SWIG_0", "D_AlphabetParameters_clearBlankness__SWIG_0"));
  mixin(bindCode("AlphabetParameters_clearBlankness__SWIG_1", "D_AlphabetParameters_clearBlankness__SWIG_1"));
  mixin(bindCode("AlphabetParameters_setBlankness", "D_AlphabetParameters_setBlankness"));
  mixin(bindCode("AlphabetParameters_isPlainLetter", "D_AlphabetParameters_isPlainLetter"));
  mixin(bindCode("AlphabetParameters_isSomeLetter", "D_AlphabetParameters_isSomeLetter"));
  mixin(bindCode("AlphabetParameters_count", "D_AlphabetParameters_count"));
  mixin(bindCode("AlphabetParameters_score", "D_AlphabetParameters_score"));
  mixin(bindCode("AlphabetParameters_isVowel", "D_AlphabetParameters_isVowel"));
  mixin(bindCode("AlphabetParameters_userVisible__SWIG_0", "D_AlphabetParameters_userVisible__SWIG_0"));
  mixin(bindCode("AlphabetParameters_userVisible__SWIG_1", "D_AlphabetParameters_userVisible__SWIG_1"));
  mixin(bindCode("AlphabetParameters_encode__SWIG_0", "D_AlphabetParameters_encode__SWIG_0"));
  mixin(bindCode("AlphabetParameters_encode__SWIG_1", "D_AlphabetParameters_encode__SWIG_1"));
  mixin(bindCode("AlphabetParameters_alphabetName", "D_AlphabetParameters_alphabetName"));
  mixin(bindCode("AlphabetParameters_setAlphabetName", "D_AlphabetParameters_setAlphabetName"));
  mixin(bindCode("AlphabetParameters_findAlphabetFile", "D_AlphabetParameters_findAlphabetFile"));
  mixin(bindCode("delete_AlphabetParameters", "D_delete_AlphabetParameters"));
  mixin(bindCode("new_EnglishAlphabetParameters", "D_new_EnglishAlphabetParameters"));
  mixin(bindCode("delete_EnglishAlphabetParameters", "D_delete_EnglishAlphabetParameters"));
  mixin(bindCode("EnglishAlphabetParameters_Upcast", "D_EnglishAlphabetParameters_Upcast"));
  mixin(bindCode("MoveVector_empty", "D_MoveVector_empty"));
  mixin(bindCode("MoveVector_clear", "D_MoveVector_clear"));
  mixin(bindCode("MoveVector_push_back", "D_MoveVector_push_back"));
  mixin(bindCode("MoveVector_pop_back", "D_MoveVector_pop_back"));
  mixin(bindCode("MoveVector_size", "D_MoveVector_size"));
  mixin(bindCode("MoveVector_capacity", "D_MoveVector_capacity"));
  mixin(bindCode("MoveVector_reserve", "D_MoveVector_reserve"));
  mixin(bindCode("new_MoveVector__SWIG_0", "D_new_MoveVector__SWIG_0"));
  mixin(bindCode("new_MoveVector__SWIG_1", "D_new_MoveVector__SWIG_1"));
  mixin(bindCode("new_MoveVector__SWIG_2", "D_new_MoveVector__SWIG_2"));
  mixin(bindCode("MoveVector_remove__SWIG_0", "D_MoveVector_remove__SWIG_0"));
  mixin(bindCode("MoveVector_remove__SWIG_1", "D_MoveVector_remove__SWIG_1"));
  mixin(bindCode("MoveVector_removeBack", "D_MoveVector_removeBack"));
  mixin(bindCode("MoveVector_linearRemove", "D_MoveVector_linearRemove"));
  mixin(bindCode("MoveVector_insertAt", "D_MoveVector_insertAt"));
  mixin(bindCode("MoveVector_getElement", "D_MoveVector_getElement"));
  mixin(bindCode("MoveVector_setElement", "D_MoveVector_setElement"));
  mixin(bindCode("delete_MoveVector", "D_delete_MoveVector"));
  mixin(bindCode("PlayerVector_empty", "D_PlayerVector_empty"));
  mixin(bindCode("PlayerVector_clear", "D_PlayerVector_clear"));
  mixin(bindCode("PlayerVector_push_back", "D_PlayerVector_push_back"));
  mixin(bindCode("PlayerVector_pop_back", "D_PlayerVector_pop_back"));
  mixin(bindCode("PlayerVector_size", "D_PlayerVector_size"));
  mixin(bindCode("PlayerVector_capacity", "D_PlayerVector_capacity"));
  mixin(bindCode("PlayerVector_reserve", "D_PlayerVector_reserve"));
  mixin(bindCode("new_PlayerVector__SWIG_0", "D_new_PlayerVector__SWIG_0"));
  mixin(bindCode("new_PlayerVector__SWIG_1", "D_new_PlayerVector__SWIG_1"));
  mixin(bindCode("new_PlayerVector__SWIG_2", "D_new_PlayerVector__SWIG_2"));
  mixin(bindCode("PlayerVector_remove__SWIG_0", "D_PlayerVector_remove__SWIG_0"));
  mixin(bindCode("PlayerVector_remove__SWIG_1", "D_PlayerVector_remove__SWIG_1"));
  mixin(bindCode("PlayerVector_removeBack", "D_PlayerVector_removeBack"));
  mixin(bindCode("PlayerVector_linearRemove", "D_PlayerVector_linearRemove"));
  mixin(bindCode("PlayerVector_insertAt", "D_PlayerVector_insertAt"));
  mixin(bindCode("PlayerVector_getElement", "D_PlayerVector_getElement"));
  mixin(bindCode("PlayerVector_setElement", "D_PlayerVector_setElement"));
  mixin(bindCode("delete_PlayerVector", "D_delete_PlayerVector"));
  mixin(bindCode("ProbableRackList_empty", "D_ProbableRackList_empty"));
  mixin(bindCode("ProbableRackList_clear", "D_ProbableRackList_clear"));
  mixin(bindCode("ProbableRackList_push_back", "D_ProbableRackList_push_back"));
  mixin(bindCode("ProbableRackList_pop_back", "D_ProbableRackList_pop_back"));
  mixin(bindCode("ProbableRackList_size", "D_ProbableRackList_size"));
  mixin(bindCode("ProbableRackList_capacity", "D_ProbableRackList_capacity"));
  mixin(bindCode("ProbableRackList_reserve", "D_ProbableRackList_reserve"));
  mixin(bindCode("new_ProbableRackList__SWIG_0", "D_new_ProbableRackList__SWIG_0"));
  mixin(bindCode("new_ProbableRackList__SWIG_1", "D_new_ProbableRackList__SWIG_1"));
  mixin(bindCode("new_ProbableRackList__SWIG_2", "D_new_ProbableRackList__SWIG_2"));
  mixin(bindCode("ProbableRackList_remove__SWIG_0", "D_ProbableRackList_remove__SWIG_0"));
  mixin(bindCode("ProbableRackList_remove__SWIG_1", "D_ProbableRackList_remove__SWIG_1"));
  mixin(bindCode("ProbableRackList_removeBack", "D_ProbableRackList_removeBack"));
  mixin(bindCode("ProbableRackList_linearRemove", "D_ProbableRackList_linearRemove"));
  mixin(bindCode("ProbableRackList_insertAt", "D_ProbableRackList_insertAt"));
  mixin(bindCode("ProbableRackList_getElement", "D_ProbableRackList_getElement"));
  mixin(bindCode("ProbableRackList_setElement", "D_ProbableRackList_setElement"));
  mixin(bindCode("delete_ProbableRackList", "D_delete_ProbableRackList"));
  mixin(bindCode("PositionList_empty", "D_PositionList_empty"));
  mixin(bindCode("PositionList_clear", "D_PositionList_clear"));
  mixin(bindCode("PositionList_push_back", "D_PositionList_push_back"));
  mixin(bindCode("PositionList_pop_back", "D_PositionList_pop_back"));
  mixin(bindCode("PositionList_size", "D_PositionList_size"));
  mixin(bindCode("PositionList_capacity", "D_PositionList_capacity"));
  mixin(bindCode("PositionList_reserve", "D_PositionList_reserve"));
  mixin(bindCode("new_PositionList__SWIG_0", "D_new_PositionList__SWIG_0"));
  mixin(bindCode("new_PositionList__SWIG_1", "D_new_PositionList__SWIG_1"));
  mixin(bindCode("new_PositionList__SWIG_2", "D_new_PositionList__SWIG_2"));
  mixin(bindCode("PositionList_remove__SWIG_0", "D_PositionList_remove__SWIG_0"));
  mixin(bindCode("PositionList_remove__SWIG_1", "D_PositionList_remove__SWIG_1"));
  mixin(bindCode("PositionList_removeBack", "D_PositionList_removeBack"));
  mixin(bindCode("PositionList_linearRemove", "D_PositionList_linearRemove"));
  mixin(bindCode("PositionList_insertAt", "D_PositionList_insertAt"));
  mixin(bindCode("PositionList_getElement", "D_PositionList_getElement"));
  mixin(bindCode("PositionList_setElement", "D_PositionList_setElement"));
  mixin(bindCode("delete_PositionList", "D_delete_PositionList"));
  mixin(bindCode("LetterParameterVector_empty", "D_LetterParameterVector_empty"));
  mixin(bindCode("LetterParameterVector_clear", "D_LetterParameterVector_clear"));
  mixin(bindCode("LetterParameterVector_push_back", "D_LetterParameterVector_push_back"));
  mixin(bindCode("LetterParameterVector_pop_back", "D_LetterParameterVector_pop_back"));
  mixin(bindCode("LetterParameterVector_size", "D_LetterParameterVector_size"));
  mixin(bindCode("LetterParameterVector_capacity", "D_LetterParameterVector_capacity"));
  mixin(bindCode("LetterParameterVector_reserve", "D_LetterParameterVector_reserve"));
  mixin(bindCode("new_LetterParameterVector__SWIG_0", "D_new_LetterParameterVector__SWIG_0"));
  mixin(bindCode("new_LetterParameterVector__SWIG_1", "D_new_LetterParameterVector__SWIG_1"));
  mixin(bindCode("new_LetterParameterVector__SWIG_2", "D_new_LetterParameterVector__SWIG_2"));
  mixin(bindCode("LetterParameterVector_remove__SWIG_0", "D_LetterParameterVector_remove__SWIG_0"));
  mixin(bindCode("LetterParameterVector_remove__SWIG_1", "D_LetterParameterVector_remove__SWIG_1"));
  mixin(bindCode("LetterParameterVector_removeBack", "D_LetterParameterVector_removeBack"));
  mixin(bindCode("LetterParameterVector_linearRemove", "D_LetterParameterVector_linearRemove"));
  mixin(bindCode("LetterParameterVector_insertAt", "D_LetterParameterVector_insertAt"));
  mixin(bindCode("LetterParameterVector_getElement", "D_LetterParameterVector_getElement"));
  mixin(bindCode("LetterParameterVector_setElement", "D_LetterParameterVector_setElement"));
  mixin(bindCode("delete_LetterParameterVector", "D_delete_LetterParameterVector"));
  mixin(bindCode("LetterStringVector_empty", "D_LetterStringVector_empty"));
  mixin(bindCode("LetterStringVector_clear", "D_LetterStringVector_clear"));
  mixin(bindCode("LetterStringVector_push_back", "D_LetterStringVector_push_back"));
  mixin(bindCode("LetterStringVector_pop_back", "D_LetterStringVector_pop_back"));
  mixin(bindCode("LetterStringVector_size", "D_LetterStringVector_size"));
  mixin(bindCode("LetterStringVector_capacity", "D_LetterStringVector_capacity"));
  mixin(bindCode("LetterStringVector_reserve", "D_LetterStringVector_reserve"));
  mixin(bindCode("new_LetterStringVector__SWIG_0", "D_new_LetterStringVector__SWIG_0"));
  mixin(bindCode("new_LetterStringVector__SWIG_1", "D_new_LetterStringVector__SWIG_1"));
  mixin(bindCode("new_LetterStringVector__SWIG_2", "D_new_LetterStringVector__SWIG_2"));
  mixin(bindCode("LetterStringVector_remove__SWIG_0", "D_LetterStringVector_remove__SWIG_0"));
  mixin(bindCode("LetterStringVector_remove__SWIG_1", "D_LetterStringVector_remove__SWIG_1"));
  mixin(bindCode("LetterStringVector_removeBack", "D_LetterStringVector_removeBack"));
  mixin(bindCode("LetterStringVector_linearRemove", "D_LetterStringVector_linearRemove"));
  mixin(bindCode("LetterStringVector_insertAt", "D_LetterStringVector_insertAt"));
  mixin(bindCode("LetterStringVector_getElement", "D_LetterStringVector_getElement"));
  mixin(bindCode("LetterStringVector_setElement", "D_LetterStringVector_setElement"));
  mixin(bindCode("delete_LetterStringVector", "D_delete_LetterStringVector"));
  mixin(bindCode("Move_score_set", "D_Move_score_set"));
  mixin(bindCode("Move_score_get", "D_Move_score_get"));
  mixin(bindCode("Move_isBingo_set", "D_Move_isBingo_set"));
  mixin(bindCode("Move_isBingo_get", "D_Move_isBingo_get"));
  mixin(bindCode("Move_effectiveScore", "D_Move_effectiveScore"));
  mixin(bindCode("Move_equity_set", "D_Move_equity_set"));
  mixin(bindCode("Move_equity_get", "D_Move_equity_get"));
  mixin(bindCode("Move_win_set", "D_Move_win_set"));
  mixin(bindCode("Move_win_get", "D_Move_win_get"));
  mixin(bindCode("Move_possibleWin_set", "D_Move_possibleWin_set"));
  mixin(bindCode("Move_possibleWin_get", "D_Move_possibleWin_get"));
  mixin(bindCode("Move_action_set", "D_Move_action_set"));
  mixin(bindCode("Move_action_get", "D_Move_action_get"));
  mixin(bindCode("Move_horizontal_set", "D_Move_horizontal_set"));
  mixin(bindCode("Move_horizontal_get", "D_Move_horizontal_get"));
  mixin(bindCode("Move_startrow_set", "D_Move_startrow_set"));
  mixin(bindCode("Move_startrow_get", "D_Move_startrow_get"));
  mixin(bindCode("Move_startcol_set", "D_Move_startcol_set"));
  mixin(bindCode("Move_startcol_get", "D_Move_startcol_get"));
  mixin(bindCode("Move_isAMove", "D_Move_isAMove"));
  mixin(bindCode("Move_setTiles", "D_Move_setTiles"));
  mixin(bindCode("Move_setPrettyTiles", "D_Move_setPrettyTiles"));
  mixin(bindCode("Move_prettyTiles", "D_Move_prettyTiles"));
  mixin(bindCode("Move_usedTiles", "D_Move_usedTiles"));
  mixin(bindCode("Move_wordTiles", "D_Move_wordTiles"));
  mixin(bindCode("Move_wordTilesWithNoPlayThru", "D_Move_wordTilesWithNoPlayThru"));
  mixin(bindCode("Move_tiles", "D_Move_tiles"));
  mixin(bindCode("Move_isChallengedPhoney", "D_Move_isChallengedPhoney"));
  mixin(bindCode("Move_setIsChallengedPhoney", "D_Move_setIsChallengedPhoney"));
  mixin(bindCode("Move_scoreAddition", "D_Move_scoreAddition"));
  mixin(bindCode("Move_setScoreAddition", "D_Move_setScoreAddition"));
  mixin(bindCode("Move_isAlreadyOnBoard", "D_Move_isAlreadyOnBoard"));
  mixin(bindCode("Move_xml", "D_Move_xml"));
  mixin(bindCode("Move_toString", "D_Move_toString"));
  mixin(bindCode("Move_debugString", "D_Move_debugString"));
  mixin(bindCode("Move_positionString", "D_Move_positionString"));
  mixin(bindCode("Move_createPlaceMove__SWIG_0", "D_Move_createPlaceMove__SWIG_0"));
  mixin(bindCode("Move_createPlaceMove__SWIG_1", "D_Move_createPlaceMove__SWIG_1"));
  mixin(bindCode("Move_createChallengedPhoney__SWIG_0", "D_Move_createChallengedPhoney__SWIG_0"));
  mixin(bindCode("Move_createChallengedPhoney__SWIG_1", "D_Move_createChallengedPhoney__SWIG_1"));
  mixin(bindCode("Move_createExchangeMove", "D_Move_createExchangeMove"));
  mixin(bindCode("Move_createUnusedTilesBonus", "D_Move_createUnusedTilesBonus"));
  mixin(bindCode("Move_createTimePenalty", "D_Move_createTimePenalty"));
  mixin(bindCode("Move_createPassMove", "D_Move_createPassMove"));
  mixin(bindCode("Move_createNonmove", "D_Move_createNonmove"));
  mixin(bindCode("new_Move", "D_new_Move"));
  mixin(bindCode("delete_Move", "D_delete_Move"));
  mixin(bindCode("swigOpLt__SWIG_1", "D_swigOpLt__SWIG_1"));
  mixin(bindCode("MoveList_sort__SWIG_0", "D_MoveList_sort__SWIG_0"));
  mixin(bindCode("MoveList_sort__SWIG_1", "D_MoveList_sort__SWIG_1"));
  mixin(bindCode("MoveList_sortNonReverse__SWIG_0", "D_MoveList_sortNonReverse__SWIG_0"));
  mixin(bindCode("MoveList_sortNonReverse__SWIG_1", "D_MoveList_sortNonReverse__SWIG_1"));
  mixin(bindCode("MoveList_winComparator", "D_MoveList_winComparator"));
  mixin(bindCode("MoveList_equityComparator", "D_MoveList_equityComparator"));
  mixin(bindCode("MoveList_scoreComparator", "D_MoveList_scoreComparator"));
  mixin(bindCode("MoveList_alphabeticalComparator", "D_MoveList_alphabeticalComparator"));
  mixin(bindCode("MoveList_wordPosComparator", "D_MoveList_wordPosComparator"));
  mixin(bindCode("MoveList_contains", "D_MoveList_contains"));
  mixin(bindCode("new_MoveList", "D_new_MoveList"));
  mixin(bindCode("delete_MoveList", "D_delete_MoveList"));
  mixin(bindCode("MoveList_Upcast", "D_MoveList_Upcast"));
  mixin(bindCode("new_Rack__SWIG_0", "D_new_Rack__SWIG_0"));
  mixin(bindCode("new_Rack__SWIG_1", "D_new_Rack__SWIG_1"));
  mixin(bindCode("Rack_setTiles", "D_Rack_setTiles"));
  mixin(bindCode("Rack_tiles", "D_Rack_tiles"));
  mixin(bindCode("Rack_alphaTiles", "D_Rack_alphaTiles"));
  mixin(bindCode("Rack_empty", "D_Rack_empty"));
  mixin(bindCode("Rack_equals", "D_Rack_equals"));
  mixin(bindCode("Rack_size", "D_Rack_size"));
  mixin(bindCode("Rack_unload", "D_Rack_unload"));
  mixin(bindCode("Rack_load", "D_Rack_load"));
  mixin(bindCode("Rack_contains", "D_Rack_contains"));
  mixin(bindCode("Rack_shuffle", "D_Rack_shuffle"));
  mixin(bindCode("Rack_score", "D_Rack_score"));
  mixin(bindCode("Rack_xml", "D_Rack_xml"));
  mixin(bindCode("Rack_toString", "D_Rack_toString"));
  mixin(bindCode("delete_Rack", "D_delete_Rack"));
  mixin(bindCode("new_Bag__SWIG_0", "D_new_Bag__SWIG_0"));
  mixin(bindCode("new_Bag__SWIG_1", "D_new_Bag__SWIG_1"));
  mixin(bindCode("Bag_clear", "D_Bag_clear"));
  mixin(bindCode("Bag_exch", "D_Bag_exch"));
  mixin(bindCode("Bag_pluck", "D_Bag_pluck"));
  mixin(bindCode("Bag_removeLetters__SWIG_0", "D_Bag_removeLetters__SWIG_0"));
  mixin(bindCode("Bag_removeLetters__SWIG_1", "D_Bag_removeLetters__SWIG_1"));
  mixin(bindCode("Bag_removeLetter", "D_Bag_removeLetter"));
  mixin(bindCode("Bag_letterCounts", "D_Bag_letterCounts"));
  mixin(bindCode("Bag_toss__SWIG_0", "D_Bag_toss__SWIG_0"));
  mixin(bindCode("Bag_toss__SWIG_1", "D_Bag_toss__SWIG_1"));
  mixin(bindCode("Bag_toss__SWIG_2", "D_Bag_toss__SWIG_2"));
  mixin(bindCode("Bag_refill__SWIG_0", "D_Bag_refill__SWIG_0"));
  mixin(bindCode("Bag_refill__SWIG_1", "D_Bag_refill__SWIG_1"));
  mixin(bindCode("Bag_prepareFullBag", "D_Bag_prepareFullBag"));
  mixin(bindCode("Bag_fullBagTileCount", "D_Bag_fullBagTileCount"));
  mixin(bindCode("Bag_empty", "D_Bag_empty"));
  mixin(bindCode("Bag_size", "D_Bag_size"));
  mixin(bindCode("Bag_tiles", "D_Bag_tiles"));
  mixin(bindCode("Bag_shuffledTiles", "D_Bag_shuffledTiles"));
  mixin(bindCode("Bag_someShuffledTiles", "D_Bag_someShuffledTiles"));
  mixin(bindCode("Bag_probabilityOfDrawingFromFullBag", "D_Bag_probabilityOfDrawingFromFullBag"));
  mixin(bindCode("Bag_probabilityOfDrawingFromBag", "D_Bag_probabilityOfDrawingFromBag"));
  mixin(bindCode("Bag_probabilityOfDrawing", "D_Bag_probabilityOfDrawing"));
  mixin(bindCode("Bag_toString", "D_Bag_toString"));
  mixin(bindCode("delete_Bag", "D_delete_Bag"));
  mixin(bindCode("QUACKLE_MAXIMUM_BOARD_SIZE_get", "D_QUACKLE_MAXIMUM_BOARD_SIZE_get"));
  mixin(bindCode("QUACKLE_MINIMUM_BOARD_SIZE_get", "D_QUACKLE_MINIMUM_BOARD_SIZE_get"));
  mixin(bindCode("new_Board__SWIG_0", "D_new_Board__SWIG_0"));
  mixin(bindCode("new_Board__SWIG_1", "D_new_Board__SWIG_1"));
  mixin(bindCode("Board_prepareEmptyBoard", "D_Board_prepareEmptyBoard"));
  mixin(bindCode("Board_width", "D_Board_width"));
  mixin(bindCode("Board_height", "D_Board_height"));
  mixin(bindCode("Board_tilesNotOnBoard", "D_Board_tilesNotOnBoard"));
  mixin(bindCode("Board_tilesOnBoard", "D_Board_tilesOnBoard"));
  mixin(bindCode("Board_isEmpty", "D_Board_isEmpty"));
  mixin(bindCode("Board_makeMove", "D_Board_makeMove"));
  mixin(bindCode("Board_allWordsFormedBy", "D_Board_allWordsFormedBy"));
  mixin(bindCode("Board_isConnected", "D_Board_isConnected"));
  mixin(bindCode("Board_isUnacceptableOpeningMove", "D_Board_isUnacceptableOpeningMove"));
  mixin(bindCode("Board_updateBritishness", "D_Board_updateBritishness"));
  mixin(bindCode("Board_score__SWIG_0", "D_Board_score__SWIG_0"));
  mixin(bindCode("Board_score__SWIG_1", "D_Board_score__SWIG_1"));
  mixin(bindCode("Board_prettyTilesOfMove__SWIG_0", "D_Board_prettyTilesOfMove__SWIG_0"));
  mixin(bindCode("Board_prettyTilesOfMove__SWIG_1", "D_Board_prettyTilesOfMove__SWIG_1"));
  mixin(bindCode("Board_sanitizedTilesOfMove", "D_Board_sanitizedTilesOfMove"));
  mixin(bindCode("Board_toString", "D_Board_toString"));
  mixin(bindCode("Board_htmlBoard", "D_Board_htmlBoard"));
  mixin(bindCode("Board_htmlKey", "D_Board_htmlKey"));
  mixin(bindCode("Board_tileInformation", "D_Board_tileInformation"));
  mixin(bindCode("Board_letter", "D_Board_letter"));
  mixin(bindCode("Board_isBlank", "D_Board_isBlank"));
  mixin(bindCode("Board_isBritish", "D_Board_isBritish"));
  mixin(bindCode("Board_vcross", "D_Board_vcross"));
  mixin(bindCode("Board_setVCross", "D_Board_setVCross"));
  mixin(bindCode("Board_hcross", "D_Board_hcross"));
  mixin(bindCode("Board_setHCross", "D_Board_setHCross"));
  mixin(bindCode("delete_Board", "D_delete_Board"));
  mixin(bindCode("new_BoardParameters", "D_new_BoardParameters"));
  mixin(bindCode("BoardParameters_Serialize", "D_BoardParameters_Serialize"));
  mixin(bindCode("BoardParameters_Deserialize", "D_BoardParameters_Deserialize"));
  mixin(bindCode("BoardParameters_width", "D_BoardParameters_width"));
  mixin(bindCode("BoardParameters_setWidth", "D_BoardParameters_setWidth"));
  mixin(bindCode("BoardParameters_height", "D_BoardParameters_height"));
  mixin(bindCode("BoardParameters_setHeight", "D_BoardParameters_setHeight"));
  mixin(bindCode("BoardParameters_startRow", "D_BoardParameters_startRow"));
  mixin(bindCode("BoardParameters_setStartRow", "D_BoardParameters_setStartRow"));
  mixin(bindCode("BoardParameters_startColumn", "D_BoardParameters_startColumn"));
  mixin(bindCode("BoardParameters_setStartColumn", "D_BoardParameters_setStartColumn"));
  mixin(bindCode("BoardParameters_letterMultiplier", "D_BoardParameters_letterMultiplier"));
  mixin(bindCode("BoardParameters_setLetterMultiplier", "D_BoardParameters_setLetterMultiplier"));
  mixin(bindCode("BoardParameters_wordMultiplier", "D_BoardParameters_wordMultiplier"));
  mixin(bindCode("BoardParameters_setWordMultiplier", "D_BoardParameters_setWordMultiplier"));
  mixin(bindCode("BoardParameters_name", "D_BoardParameters_name"));
  mixin(bindCode("BoardParameters_setName", "D_BoardParameters_setName"));
  mixin(bindCode("delete_BoardParameters", "D_delete_BoardParameters"));
  mixin(bindCode("new_EnglishBoard", "D_new_EnglishBoard"));
  mixin(bindCode("delete_EnglishBoard", "D_delete_EnglishBoard"));
  mixin(bindCode("EnglishBoard_Upcast", "D_EnglishBoard_Upcast"));
  mixin(bindCode("delete_Evaluator", "D_delete_Evaluator"));
  mixin(bindCode("Evaluator_equity", "D_Evaluator_equity"));
  mixin(bindCode("Evaluator_playerConsideration", "D_Evaluator_playerConsideration"));
  mixin(bindCode("Evaluator_sharedConsideration", "D_Evaluator_sharedConsideration"));
  mixin(bindCode("Evaluator_leaveValue", "D_Evaluator_leaveValue"));
  mixin(bindCode("new_Evaluator", "D_new_Evaluator"));
  mixin(bindCode("delete_ScorePlusLeaveEvaluator", "D_delete_ScorePlusLeaveEvaluator"));
  mixin(bindCode("ScorePlusLeaveEvaluator_equity", "D_ScorePlusLeaveEvaluator_equity"));
  mixin(bindCode("ScorePlusLeaveEvaluator_playerConsideration", "D_ScorePlusLeaveEvaluator_playerConsideration"));
  mixin(bindCode("ScorePlusLeaveEvaluator_sharedConsideration", "D_ScorePlusLeaveEvaluator_sharedConsideration"));
  mixin(bindCode("ScorePlusLeaveEvaluator_leaveValue", "D_ScorePlusLeaveEvaluator_leaveValue"));
  mixin(bindCode("new_ScorePlusLeaveEvaluator", "D_new_ScorePlusLeaveEvaluator"));
  mixin(bindCode("ScorePlusLeaveEvaluator_Upcast", "D_ScorePlusLeaveEvaluator_Upcast"));
  mixin(bindCode("CatchallEvaluator_equity", "D_CatchallEvaluator_equity"));
  mixin(bindCode("CatchallEvaluator_endgameResult", "D_CatchallEvaluator_endgameResult"));
  mixin(bindCode("new_CatchallEvaluator", "D_new_CatchallEvaluator"));
  mixin(bindCode("delete_CatchallEvaluator", "D_delete_CatchallEvaluator"));
  mixin(bindCode("CatchallEvaluator_Upcast", "D_CatchallEvaluator_Upcast"));
  mixin(bindCode("new_Player__SWIG_0", "D_new_Player__SWIG_0"));
  mixin(bindCode("new_Player__SWIG_1", "D_new_Player__SWIG_1"));
  mixin(bindCode("new_Player__SWIG_2", "D_new_Player__SWIG_2"));
  mixin(bindCode("new_Player__SWIG_3", "D_new_Player__SWIG_3"));
  mixin(bindCode("Player_setName", "D_Player_setName"));
  mixin(bindCode("Player_name", "D_Player_name"));
  mixin(bindCode("Player_setAbbreviatedName", "D_Player_setAbbreviatedName"));
  mixin(bindCode("Player_abbreviatedName", "D_Player_abbreviatedName"));
  mixin(bindCode("Player_setType", "D_Player_setType"));
  mixin(bindCode("Player_type", "D_Player_type"));
  mixin(bindCode("Player_setComputerPlayer", "D_Player_setComputerPlayer"));
  mixin(bindCode("Player_computerPlayer", "D_Player_computerPlayer"));
  mixin(bindCode("Player_id", "D_Player_id"));
  mixin(bindCode("Player_setId", "D_Player_setId"));
  mixin(bindCode("Player_setRack__SWIG_0", "D_Player_setRack__SWIG_0"));
  mixin(bindCode("Player_setRack__SWIG_1", "D_Player_setRack__SWIG_1"));
  mixin(bindCode("Player_rack", "D_Player_rack"));
  mixin(bindCode("Player_setScore", "D_Player_setScore"));
  mixin(bindCode("Player_score", "D_Player_score"));
  mixin(bindCode("Player_addToScore", "D_Player_addToScore"));
  mixin(bindCode("Player_drawnLetters", "D_Player_drawnLetters"));
  mixin(bindCode("Player_setDrawnLetters", "D_Player_setDrawnLetters"));
  mixin(bindCode("Player_racksAreKnown", "D_Player_racksAreKnown"));
  mixin(bindCode("Player_setRacksAreKnown", "D_Player_setRacksAreKnown"));
  mixin(bindCode("Player_positionallyEqual", "D_Player_positionallyEqual"));
  mixin(bindCode("Player_storeInformationToString", "D_Player_storeInformationToString"));
  mixin(bindCode("Player_loadInformationFromString", "D_Player_loadInformationFromString"));
  mixin(bindCode("Player_makePlayerFromString", "D_Player_makePlayerFromString"));
  mixin(bindCode("delete_Player", "D_delete_Player"));
  mixin(bindCode("swigOpLt__SWIG_2", "D_swigOpLt__SWIG_2"));
  mixin(bindCode("new_PlayerList", "D_new_PlayerList"));
  mixin(bindCode("PlayerList_playerForId", "D_PlayerList_playerForId"));
  mixin(bindCode("PlayerList_playerForName", "D_PlayerList_playerForName"));
  mixin(bindCode("delete_PlayerList", "D_delete_PlayerList"));
  mixin(bindCode("PlayerList_Upcast", "D_PlayerList_Upcast"));
  mixin(bindCode("new_HistoryLocation", "D_new_HistoryLocation"));
  mixin(bindCode("HistoryLocation_playerId", "D_HistoryLocation_playerId"));
  mixin(bindCode("HistoryLocation_turnNumber", "D_HistoryLocation_turnNumber"));
  mixin(bindCode("delete_HistoryLocation", "D_delete_HistoryLocation"));
  mixin(bindCode("swigOpLt__SWIG_3", "D_swigOpLt__SWIG_3"));
  mixin(bindCode("new_GamePosition__SWIG_0", "D_new_GamePosition__SWIG_0"));
  mixin(bindCode("new_GamePosition__SWIG_1", "D_new_GamePosition__SWIG_1"));
  mixin(bindCode("new_GamePosition__SWIG_2", "D_new_GamePosition__SWIG_2"));
  mixin(bindCode("GamePosition_kibitz__SWIG_0", "D_GamePosition_kibitz__SWIG_0"));
  mixin(bindCode("GamePosition_kibitz__SWIG_1", "D_GamePosition_kibitz__SWIG_1"));
  mixin(bindCode("GamePosition_moves", "D_GamePosition_moves"));
  mixin(bindCode("GamePosition_setMoves", "D_GamePosition_setMoves"));
  mixin(bindCode("GamePosition_staticBestMove", "D_GamePosition_staticBestMove"));
  mixin(bindCode("GamePosition_removeMove", "D_GamePosition_removeMove"));
  mixin(bindCode("GamePosition_removeAllMoves", "D_GamePosition_removeAllMoves"));
  mixin(bindCode("GamePosition_addMove", "D_GamePosition_addMove"));
  mixin(bindCode("GamePosition_makeSureMoveListContainsMoves", "D_GamePosition_makeSureMoveListContainsMoves"));
  mixin(bindCode("GamePosition_kibitzAs", "D_GamePosition_kibitzAs"));
  mixin(bindCode("GamePosition_ensureMovePrettiness", "D_GamePosition_ensureMovePrettiness"));
  mixin(bindCode("GamePosition_ensureMoveTilesDoNotIncludePlayThru", "D_GamePosition_ensureMoveTilesDoNotIncludePlayThru"));
  mixin(bindCode("GamePosition_addAndSetMoveMade", "D_GamePosition_addAndSetMoveMade"));
  mixin(bindCode("GamePosition_validateMove", "D_GamePosition_validateMove"));
  mixin(bindCode("GamePosition_formsAcceptableWords", "D_GamePosition_formsAcceptableWords"));
  mixin(bindCode("GamePosition_allWordsFormedBy", "D_GamePosition_allWordsFormedBy"));
  mixin(bindCode("GamePosition_isConnected", "D_GamePosition_isConnected"));
  mixin(bindCode("GamePosition_isAcceptableWord", "D_GamePosition_isAcceptableWord"));
  mixin(bindCode("GamePosition_exchangeAllowed", "D_GamePosition_exchangeAllowed"));
  mixin(bindCode("GamePosition_handleOverdraw", "D_GamePosition_handleOverdraw"));
  mixin(bindCode("GamePosition_makeMove__SWIG_0", "D_GamePosition_makeMove__SWIG_0"));
  mixin(bindCode("GamePosition_makeMove__SWIG_1", "D_GamePosition_makeMove__SWIG_1"));
  mixin(bindCode("GamePosition_ensureBoardIsPreparedForAnalysis", "D_GamePosition_ensureBoardIsPreparedForAnalysis"));
  mixin(bindCode("GamePosition_scoreMove", "D_GamePosition_scoreMove"));
  mixin(bindCode("GamePosition_calculateEquity", "D_GamePosition_calculateEquity"));
  mixin(bindCode("GamePosition_calculateScore", "D_GamePosition_calculateScore"));
  mixin(bindCode("GamePosition_calculatePlayerConsideration", "D_GamePosition_calculatePlayerConsideration"));
  mixin(bindCode("GamePosition_leaveValue", "D_GamePosition_leaveValue"));
  mixin(bindCode("GamePosition_calculateSharedConsideration", "D_GamePosition_calculateSharedConsideration"));
  mixin(bindCode("GamePosition_setBoard", "D_GamePosition_setBoard"));
  mixin(bindCode("GamePosition_board", "D_GamePosition_board"));
  mixin(bindCode("GamePosition_bag", "D_GamePosition_bag"));
  mixin(bindCode("GamePosition_setDrawingOrder", "D_GamePosition_setDrawingOrder"));
  mixin(bindCode("GamePosition_drawingOrder", "D_GamePosition_drawingOrder"));
  mixin(bindCode("GamePosition_unseenBag", "D_GamePosition_unseenBag"));
  mixin(bindCode("GamePosition_unseenBagFromPlayerPerspective", "D_GamePosition_unseenBagFromPlayerPerspective"));
  mixin(bindCode("GamePosition_ensureProperBag", "D_GamePosition_ensureProperBag"));
  mixin(bindCode("GamePosition_setEmptyBoard", "D_GamePosition_setEmptyBoard"));
  mixin(bindCode("GamePosition_currentPlayer__SWIG_0", "D_GamePosition_currentPlayer__SWIG_0"));
  mixin(bindCode("GamePosition_setCurrentPlayer", "D_GamePosition_setCurrentPlayer"));
  mixin(bindCode("GamePosition_playerOnTurn__SWIG_0", "D_GamePosition_playerOnTurn__SWIG_0"));
  mixin(bindCode("GamePosition_setPlayerOnTurn", "D_GamePosition_setPlayerOnTurn"));
  mixin(bindCode("GamePosition_humanPlayer", "D_GamePosition_humanPlayer"));
  mixin(bindCode("GamePosition_nextPlayer", "D_GamePosition_nextPlayer"));
  mixin(bindCode("GamePosition_nextPlayerOfType", "D_GamePosition_nextPlayerOfType"));
  mixin(bindCode("GamePosition_playerWithAbbreviatedName", "D_GamePosition_playerWithAbbreviatedName"));
  mixin(bindCode("GamePosition_players", "D_GamePosition_players"));
  mixin(bindCode("GamePosition_endgameAdjustedScores", "D_GamePosition_endgameAdjustedScores"));
  mixin(bindCode("GamePosition_leadingPlayers", "D_GamePosition_leadingPlayers"));
  mixin(bindCode("GamePosition_spread__SWIG_0", "D_GamePosition_spread__SWIG_0"));
  mixin(bindCode("GamePosition_spread__SWIG_1", "D_GamePosition_spread__SWIG_1"));
  mixin(bindCode("GamePosition_gameOver", "D_GamePosition_gameOver"));
  mixin(bindCode("GamePosition_adjustScoresToFinishGame", "D_GamePosition_adjustScoresToFinishGame"));
  mixin(bindCode("GamePosition_adjustScoresToFinishPassedOutGame", "D_GamePosition_adjustScoresToFinishPassedOutGame"));
  mixin(bindCode("GamePosition_doesMoveEndGame", "D_GamePosition_doesMoveEndGame"));
  mixin(bindCode("GamePosition_deadwood", "D_GamePosition_deadwood"));
  mixin(bindCode("GamePosition_replenishAndSetRack__SWIG_0", "D_GamePosition_replenishAndSetRack__SWIG_0"));
  mixin(bindCode("GamePosition_replenishAndSetRack__SWIG_1", "D_GamePosition_replenishAndSetRack__SWIG_1"));
  mixin(bindCode("GamePosition_setCurrentPlayerRack__SWIG_0", "D_GamePosition_setCurrentPlayerRack__SWIG_0"));
  mixin(bindCode("GamePosition_setCurrentPlayerRack__SWIG_1", "D_GamePosition_setCurrentPlayerRack__SWIG_1"));
  mixin(bindCode("GamePosition_setPlayerRack__SWIG_0", "D_GamePosition_setPlayerRack__SWIG_0"));
  mixin(bindCode("GamePosition_setPlayerRack__SWIG_1", "D_GamePosition_setPlayerRack__SWIG_1"));
  mixin(bindCode("GamePosition_setOppRack__SWIG_0", "D_GamePosition_setOppRack__SWIG_0"));
  mixin(bindCode("GamePosition_setOppRack__SWIG_1", "D_GamePosition_setOppRack__SWIG_1"));
  mixin(bindCode("GamePosition_oppRack", "D_GamePosition_oppRack"));
  mixin(bindCode("GamePosition_canSetCurrentPlayerRackWithoutBagExpansion", "D_GamePosition_canSetCurrentPlayerRackWithoutBagExpansion"));
  mixin(bindCode("GamePosition_canSetPlayerRackWithoutBagExpansion", "D_GamePosition_canSetPlayerRackWithoutBagExpansion"));
  mixin(bindCode("GamePosition_resetBag", "D_GamePosition_resetBag"));
  mixin(bindCode("GamePosition_setBag", "D_GamePosition_setBag"));
  mixin(bindCode("GamePosition_setMoveMade", "D_GamePosition_setMoveMade"));
  mixin(bindCode("GamePosition_moveMade", "D_GamePosition_moveMade"));
  mixin(bindCode("GamePosition_setCommittedMove", "D_GamePosition_setCommittedMove"));
  mixin(bindCode("GamePosition_committedMove", "D_GamePosition_committedMove"));
  mixin(bindCode("GamePosition_setTileBonus", "D_GamePosition_setTileBonus"));
  mixin(bindCode("GamePosition_prepareForCommit", "D_GamePosition_prepareForCommit"));
  mixin(bindCode("GamePosition_boardAfterMoveMade", "D_GamePosition_boardAfterMoveMade"));
  mixin(bindCode("GamePosition_resetMoveMade", "D_GamePosition_resetMoveMade"));
  mixin(bindCode("GamePosition_incrementTurn__SWIG_0", "D_GamePosition_incrementTurn__SWIG_0"));
  mixin(bindCode("GamePosition_incrementTurn__SWIG_1", "D_GamePosition_incrementTurn__SWIG_1"));
  mixin(bindCode("GamePosition_turnNumber", "D_GamePosition_turnNumber"));
  mixin(bindCode("GamePosition_setNestedness", "D_GamePosition_setNestedness"));
  mixin(bindCode("GamePosition_incrementNestedness", "D_GamePosition_incrementNestedness"));
  mixin(bindCode("GamePosition_nestedness", "D_GamePosition_nestedness"));
  mixin(bindCode("GamePosition_nestednessIndentation", "D_GamePosition_nestednessIndentation"));
  mixin(bindCode("GamePosition_scorelessTurnsInARow", "D_GamePosition_scorelessTurnsInARow"));
  mixin(bindCode("GamePosition_location", "D_GamePosition_location"));
  mixin(bindCode("GamePosition_explanatoryNote", "D_GamePosition_explanatoryNote"));
  mixin(bindCode("GamePosition_setExplanatoryNote", "D_GamePosition_setExplanatoryNote"));
  mixin(bindCode("GamePosition_underlyingBoardReference", "D_GamePosition_underlyingBoardReference"));
  mixin(bindCode("delete_GamePosition", "D_delete_GamePosition"));
  mixin(bindCode("new_History", "D_new_History"));
  mixin(bindCode("History_players", "D_History_players"));
  mixin(bindCode("History_lastPlayer", "D_History_lastPlayer"));
  mixin(bindCode("History_lastPosition", "D_History_lastPosition"));
  mixin(bindCode("History_maximumTurnNumber", "D_History_maximumTurnNumber"));
  mixin(bindCode("History_lastLocation", "D_History_lastLocation"));
  mixin(bindCode("History_currentLocation", "D_History_currentLocation"));
  mixin(bindCode("History_currentPosition__SWIG_0", "D_History_currentPosition__SWIG_0"));
  mixin(bindCode("History_positionsFacedBy", "D_History_positionsFacedBy"));
  mixin(bindCode("History_nextPosition__SWIG_0", "D_History_nextPosition__SWIG_0"));
  mixin(bindCode("History_nextPosition__SWIG_1", "D_History_nextPosition__SWIG_1"));
  mixin(bindCode("History_nextPositionFacedBy__SWIG_0", "D_History_nextPositionFacedBy__SWIG_0"));
  mixin(bindCode("History_nextPositionFacedBy__SWIG_1", "D_History_nextPositionFacedBy__SWIG_1"));
  mixin(bindCode("History_previousPosition__SWIG_0", "D_History_previousPosition__SWIG_0"));
  mixin(bindCode("History_previousPosition__SWIG_1", "D_History_previousPosition__SWIG_1"));
  mixin(bindCode("History_firstPosition__SWIG_0", "D_History_firstPosition__SWIG_0"));
  mixin(bindCode("History_firstPosition__SWIG_1", "D_History_firstPosition__SWIG_1"));
  mixin(bindCode("History_positionAt__SWIG_0", "D_History_positionAt__SWIG_0"));
  mixin(bindCode("History_positionAt__SWIG_1", "D_History_positionAt__SWIG_1"));
  mixin(bindCode("delete_History", "D_delete_History"));
  mixin(bindCode("History_Upcast", "D_History_Upcast"));
  mixin(bindCode("new_Game", "D_new_Game"));
  mixin(bindCode("delete_Game", "D_delete_Game"));
  mixin(bindCode("Game_reset", "D_Game_reset"));
  mixin(bindCode("Game_setPlayers", "D_Game_setPlayers"));
  mixin(bindCode("Game_players", "D_Game_players"));
  mixin(bindCode("Game_hasPositions", "D_Game_hasPositions"));
  mixin(bindCode("Game_history", "D_Game_history"));
  mixin(bindCode("Game_addPosition", "D_Game_addPosition"));
  mixin(bindCode("Game_currentPosition__SWIG_0", "D_Game_currentPosition__SWIG_0"));
  mixin(bindCode("Game_setCurrentPosition__SWIG_0", "D_Game_setCurrentPosition__SWIG_0"));
  mixin(bindCode("Game_setCurrentPosition__SWIG_1", "D_Game_setCurrentPosition__SWIG_1"));
  mixin(bindCode("Game_associateComputerPlayer", "D_Game_associateComputerPlayer"));
  mixin(bindCode("Game_computerPlayer", "D_Game_computerPlayer"));
  mixin(bindCode("Game_setDefaultComputerPlayer", "D_Game_setDefaultComputerPlayer"));
  mixin(bindCode("Game_associateKnownComputerPlayers", "D_Game_associateKnownComputerPlayers"));
  mixin(bindCode("Game_defaultComputerPlayer", "D_Game_defaultComputerPlayer"));
  mixin(bindCode("Game_haveComputerPlay__SWIG_0", "D_Game_haveComputerPlay__SWIG_0"));
  mixin(bindCode("Game_haveComputerPlay__SWIG_1", "D_Game_haveComputerPlay__SWIG_1"));
  mixin(bindCode("Game_advanceToNoncomputerPlayer", "D_Game_advanceToNoncomputerPlayer"));
  mixin(bindCode("Game_setCandidate", "D_Game_setCandidate"));
  mixin(bindCode("Game_candidate", "D_Game_candidate"));
  mixin(bindCode("Game_resetCandidature", "D_Game_resetCandidature"));
  mixin(bindCode("Game_commitCandidate__SWIG_0", "D_Game_commitCandidate__SWIG_0"));
  mixin(bindCode("Game_commitCandidate__SWIG_1", "D_Game_commitCandidate__SWIG_1"));
  mixin(bindCode("Game_commitMove", "D_Game_commitMove"));
  mixin(bindCode("Game_description", "D_Game_description"));
  mixin(bindCode("Game_setDescription", "D_Game_setDescription"));
  mixin(bindCode("Game_title", "D_Game_title"));
  mixin(bindCode("Game_setTitle", "D_Game_setTitle"));
  mixin(bindCode("new_GameParameters", "D_new_GameParameters"));
  mixin(bindCode("GameParameters_minimumTilesForExchange", "D_GameParameters_minimumTilesForExchange"));
  mixin(bindCode("GameParameters_setMinimumTilesForExchange", "D_GameParameters_setMinimumTilesForExchange"));
  mixin(bindCode("GameParameters_numberOfScorelessTurnsThatEndsGame", "D_GameParameters_numberOfScorelessTurnsThatEndsGame"));
  mixin(bindCode("GameParameters_setNumberOfScorelessTurnsThatEndsGame", "D_GameParameters_setNumberOfScorelessTurnsThatEndsGame"));
  mixin(bindCode("GameParameters_bingoBonus", "D_GameParameters_bingoBonus"));
  mixin(bindCode("GameParameters_setBingoBonus", "D_GameParameters_setBingoBonus"));
  mixin(bindCode("GameParameters_rackSize", "D_GameParameters_rackSize"));
  mixin(bindCode("GameParameters_setRackSize", "D_GameParameters_setRackSize"));
  mixin(bindCode("GameParameters_overdrawPenalty", "D_GameParameters_overdrawPenalty"));
  mixin(bindCode("GameParameters_setOverdrawPenalty", "D_GameParameters_setOverdrawPenalty"));
  mixin(bindCode("delete_GameParameters", "D_delete_GameParameters"));
  mixin(bindCode("new_EnglishParameters", "D_new_EnglishParameters"));
  mixin(bindCode("delete_EnglishParameters", "D_delete_EnglishParameters"));
  mixin(bindCode("EnglishParameters_Upcast", "D_EnglishParameters_Upcast"));
  mixin(bindCode("new_AveragedValue", "D_new_AveragedValue"));
  mixin(bindCode("AveragedValue_incorporateValue", "D_AveragedValue_incorporateValue"));
  mixin(bindCode("AveragedValue_clear", "D_AveragedValue_clear"));
  mixin(bindCode("AveragedValue_valueSum", "D_AveragedValue_valueSum"));
  mixin(bindCode("AveragedValue_squaredValueSum", "D_AveragedValue_squaredValueSum"));
  mixin(bindCode("AveragedValue_incorporatedValues", "D_AveragedValue_incorporatedValues"));
  mixin(bindCode("AveragedValue_hasValues", "D_AveragedValue_hasValues"));
  mixin(bindCode("AveragedValue_averagedValue", "D_AveragedValue_averagedValue"));
  mixin(bindCode("AveragedValue_standardDeviation", "D_AveragedValue_standardDeviation"));
  mixin(bindCode("delete_AveragedValue", "D_delete_AveragedValue"));
  mixin(bindCode("PositionStatistics_getStatistic", "D_PositionStatistics_getStatistic"));
  mixin(bindCode("PositionStatistics_score_set", "D_PositionStatistics_score_set"));
  mixin(bindCode("PositionStatistics_score_get", "D_PositionStatistics_score_get"));
  mixin(bindCode("PositionStatistics_bingos_set", "D_PositionStatistics_bingos_set"));
  mixin(bindCode("PositionStatistics_bingos_get", "D_PositionStatistics_bingos_get"));
  mixin(bindCode("new_PositionStatistics", "D_new_PositionStatistics"));
  mixin(bindCode("delete_PositionStatistics", "D_delete_PositionStatistics"));
  mixin(bindCode("Level_setNumberScores", "D_Level_setNumberScores"));
  mixin(bindCode("Level_statistics_set", "D_Level_statistics_set"));
  mixin(bindCode("Level_statistics_get", "D_Level_statistics_get"));
  mixin(bindCode("new_Level", "D_new_Level"));
  mixin(bindCode("delete_Level", "D_delete_Level"));
  mixin(bindCode("LevelList_setNumberLevels", "D_LevelList_setNumberLevels"));
  mixin(bindCode("new_LevelList", "D_new_LevelList"));
  mixin(bindCode("delete_LevelList", "D_delete_LevelList"));
  mixin(bindCode("new_SimmedMove", "D_new_SimmedMove"));
  mixin(bindCode("SimmedMove_calculateEquity", "D_SimmedMove_calculateEquity"));
  mixin(bindCode("SimmedMove_calculateWinPercentage", "D_SimmedMove_calculateWinPercentage"));
  mixin(bindCode("SimmedMove_clear", "D_SimmedMove_clear"));
  mixin(bindCode("SimmedMove_includeInSimulation", "D_SimmedMove_includeInSimulation"));
  mixin(bindCode("SimmedMove_setIncludeInSimulation", "D_SimmedMove_setIncludeInSimulation"));
  mixin(bindCode("SimmedMove_id", "D_SimmedMove_id"));
  mixin(bindCode("SimmedMove_move_set", "D_SimmedMove_move_set"));
  mixin(bindCode("SimmedMove_move_get", "D_SimmedMove_move_get"));
  mixin(bindCode("SimmedMove_levels_set", "D_SimmedMove_levels_set"));
  mixin(bindCode("SimmedMove_levels_get", "D_SimmedMove_levels_get"));
  mixin(bindCode("SimmedMove_residual_set", "D_SimmedMove_residual_set"));
  mixin(bindCode("SimmedMove_residual_get", "D_SimmedMove_residual_get"));
  mixin(bindCode("SimmedMove_gameSpread_set", "D_SimmedMove_gameSpread_set"));
  mixin(bindCode("SimmedMove_gameSpread_get", "D_SimmedMove_gameSpread_get"));
  mixin(bindCode("SimmedMove_wins_set", "D_SimmedMove_wins_set"));
  mixin(bindCode("SimmedMove_wins_get", "D_SimmedMove_wins_get"));
  mixin(bindCode("SimmedMove_getPositionStatistics", "D_SimmedMove_getPositionStatistics"));
  mixin(bindCode("delete_SimmedMove", "D_delete_SimmedMove"));
  mixin(bindCode("SimmedMoveMessage_id_set", "D_SimmedMoveMessage_id_set"));
  mixin(bindCode("SimmedMoveMessage_id_get", "D_SimmedMoveMessage_id_get"));
  mixin(bindCode("SimmedMoveMessage_move_set", "D_SimmedMoveMessage_move_set"));
  mixin(bindCode("SimmedMoveMessage_move_get", "D_SimmedMoveMessage_move_get"));
  mixin(bindCode("SimmedMoveMessage_levels_set", "D_SimmedMoveMessage_levels_set"));
  mixin(bindCode("SimmedMoveMessage_levels_get", "D_SimmedMoveMessage_levels_get"));
  mixin(bindCode("SimmedMoveMessage_score_set", "D_SimmedMoveMessage_score_set"));
  mixin(bindCode("SimmedMoveMessage_score_get", "D_SimmedMoveMessage_score_get"));
  mixin(bindCode("SimmedMoveMessage_bingos_set", "D_SimmedMoveMessage_bingos_set"));
  mixin(bindCode("SimmedMoveMessage_bingos_get", "D_SimmedMoveMessage_bingos_get"));
  mixin(bindCode("SimmedMoveMessage_residual_set", "D_SimmedMoveMessage_residual_set"));
  mixin(bindCode("SimmedMoveMessage_residual_get", "D_SimmedMoveMessage_residual_get"));
  mixin(bindCode("SimmedMoveMessage_gameSpread_set", "D_SimmedMoveMessage_gameSpread_set"));
  mixin(bindCode("SimmedMoveMessage_gameSpread_get", "D_SimmedMoveMessage_gameSpread_get"));
  mixin(bindCode("SimmedMoveMessage_wins_set", "D_SimmedMoveMessage_wins_set"));
  mixin(bindCode("SimmedMoveMessage_wins_get", "D_SimmedMoveMessage_wins_get"));
  mixin(bindCode("SimmedMoveMessage_bogowin_set", "D_SimmedMoveMessage_bogowin_set"));
  mixin(bindCode("SimmedMoveMessage_bogowin_get", "D_SimmedMoveMessage_bogowin_get"));
  mixin(bindCode("SimmedMoveMessage_xmlIndent_set", "D_SimmedMoveMessage_xmlIndent_set"));
  mixin(bindCode("SimmedMoveMessage_xmlIndent_get", "D_SimmedMoveMessage_xmlIndent_get"));
  mixin(bindCode("new_SimmedMoveMessage", "D_new_SimmedMoveMessage"));
  mixin(bindCode("delete_SimmedMoveMessage", "D_delete_SimmedMoveMessage"));
  mixin(bindCode("SimmedMoveConstants_game_set", "D_SimmedMoveConstants_game_set"));
  mixin(bindCode("SimmedMoveConstants_game_get", "D_SimmedMoveConstants_game_get"));
  mixin(bindCode("SimmedMoveConstants_startPlayerId_set", "D_SimmedMoveConstants_startPlayerId_set"));
  mixin(bindCode("SimmedMoveConstants_startPlayerId_get", "D_SimmedMoveConstants_startPlayerId_get"));
  mixin(bindCode("SimmedMoveConstants_playerCount_set", "D_SimmedMoveConstants_playerCount_set"));
  mixin(bindCode("SimmedMoveConstants_playerCount_get", "D_SimmedMoveConstants_playerCount_get"));
  mixin(bindCode("SimmedMoveConstants_decimalTurns_set", "D_SimmedMoveConstants_decimalTurns_set"));
  mixin(bindCode("SimmedMoveConstants_decimalTurns_get", "D_SimmedMoveConstants_decimalTurns_get"));
  mixin(bindCode("SimmedMoveConstants_levelCount_set", "D_SimmedMoveConstants_levelCount_set"));
  mixin(bindCode("SimmedMoveConstants_levelCount_get", "D_SimmedMoveConstants_levelCount_get"));
  mixin(bindCode("SimmedMoveConstants_ignoreOppos_set", "D_SimmedMoveConstants_ignoreOppos_set"));
  mixin(bindCode("SimmedMoveConstants_ignoreOppos_get", "D_SimmedMoveConstants_ignoreOppos_get"));
  mixin(bindCode("SimmedMoveConstants_isLogging_set", "D_SimmedMoveConstants_isLogging_set"));
  mixin(bindCode("SimmedMoveConstants_isLogging_get", "D_SimmedMoveConstants_isLogging_get"));
  mixin(bindCode("new_SimmedMoveConstants", "D_new_SimmedMoveConstants"));
  mixin(bindCode("delete_SimmedMoveConstants", "D_delete_SimmedMoveConstants"));
  mixin(bindCode("new_SimmedMoveMessageQueue", "D_new_SimmedMoveMessageQueue"));
  mixin(bindCode("SimmedMoveMessageQueue_push", "D_SimmedMoveMessageQueue_push"));
  mixin(bindCode("SimmedMoveMessageQueue_send_terminate_all", "D_SimmedMoveMessageQueue_send_terminate_all"));
  mixin(bindCode("SimmedMoveMessageQueue_send_terminate_one", "D_SimmedMoveMessageQueue_send_terminate_one"));
  mixin(bindCode("SimmedMoveMessageQueue_constants", "D_SimmedMoveMessageQueue_constants"));
  mixin(bindCode("SimmedMoveMessageQueue_setConstants", "D_SimmedMoveMessageQueue_setConstants"));
  mixin(bindCode("delete_SimmedMoveMessageQueue", "D_delete_SimmedMoveMessageQueue"));
  mixin(bindCode("new_Simulator", "D_new_Simulator"));
  mixin(bindCode("delete_Simulator", "D_delete_Simulator"));
  mixin(bindCode("Simulator_setPosition", "D_Simulator_setPosition"));
  mixin(bindCode("Simulator_currentPosition__SWIG_0", "D_Simulator_currentPosition__SWIG_0"));
  mixin(bindCode("Simulator_history", "D_Simulator_history"));
  mixin(bindCode("Simulator_setLogfile__SWIG_0", "D_Simulator_setLogfile__SWIG_0"));
  mixin(bindCode("Simulator_setLogfile__SWIG_1", "D_Simulator_setLogfile__SWIG_1"));
  mixin(bindCode("Simulator_logfile", "D_Simulator_logfile"));
  mixin(bindCode("Simulator_setDispatch", "D_Simulator_setDispatch"));
  mixin(bindCode("Simulator_dispatch", "D_Simulator_dispatch"));
  mixin(bindCode("Simulator_logMessage", "D_Simulator_logMessage"));
  mixin(bindCode("Simulator_isLogging", "D_Simulator_isLogging"));
  mixin(bindCode("Simulator_closeLogfile", "D_Simulator_closeLogfile"));
  mixin(bindCode("Simulator_setIncludedMoves", "D_Simulator_setIncludedMoves"));
  mixin(bindCode("Simulator_makeSureConsideredMovesAreIncluded", "D_Simulator_makeSureConsideredMovesAreIncluded"));
  mixin(bindCode("Simulator_moveConsideredMovesToBeginning", "D_Simulator_moveConsideredMovesToBeginning"));
  mixin(bindCode("Simulator_setConsideredMoves", "D_Simulator_setConsideredMoves"));
  mixin(bindCode("Simulator_consideredMoves", "D_Simulator_consideredMoves"));
  mixin(bindCode("Simulator_addConsideredMove", "D_Simulator_addConsideredMove"));
  mixin(bindCode("Simulator_isConsideredMove", "D_Simulator_isConsideredMove"));
  mixin(bindCode("Simulator_pruneTo", "D_Simulator_pruneTo"));
  mixin(bindCode("Simulator_setIgnoreOppos", "D_Simulator_setIgnoreOppos"));
  mixin(bindCode("Simulator_ignoreOppos", "D_Simulator_ignoreOppos"));
  mixin(bindCode("Simulator_simThreadFunc", "D_Simulator_simThreadFunc"));
  mixin(bindCode("Simulator_setThreadCount", "D_Simulator_setThreadCount"));
  mixin(bindCode("Simulator_resetNumbers", "D_Simulator_resetNumbers"));
  mixin(bindCode("Simulator_simulate__SWIG_0", "D_Simulator_simulate__SWIG_0"));
  mixin(bindCode("Simulator_simulate__SWIG_1", "D_Simulator_simulate__SWIG_1"));
  mixin(bindCode("Simulator_simulateOnePosition", "D_Simulator_simulateOnePosition"));
  mixin(bindCode("Simulator_incorporateMessage", "D_Simulator_incorporateMessage"));
  mixin(bindCode("Simulator_setPartialOppoRack", "D_Simulator_setPartialOppoRack"));
  mixin(bindCode("Simulator_partialOppoRack", "D_Simulator_partialOppoRack"));
  mixin(bindCode("Simulator_randomizeOppoRacks", "D_Simulator_randomizeOppoRacks"));
  mixin(bindCode("Simulator_randomizeDrawingOrder", "D_Simulator_randomizeDrawingOrder"));
  mixin(bindCode("Simulator_iterations", "D_Simulator_iterations"));
  mixin(bindCode("Simulator_hasSimulationResults", "D_Simulator_hasSimulationResults"));
  mixin(bindCode("Simulator_simmedMoves", "D_Simulator_simmedMoves"));
  mixin(bindCode("Simulator_moves__SWIG_0", "D_Simulator_moves__SWIG_0"));
  mixin(bindCode("Simulator_moves__SWIG_1", "D_Simulator_moves__SWIG_1"));
  mixin(bindCode("Simulator_moves__SWIG_2", "D_Simulator_moves__SWIG_2"));
  mixin(bindCode("Simulator_simmedMoveForMove", "D_Simulator_simmedMoveForMove"));
  mixin(bindCode("Simulator_numLevels", "D_Simulator_numLevels"));
  mixin(bindCode("Simulator_numPlayersAtLevel", "D_Simulator_numPlayersAtLevel"));
  mixin(bindCode("QUACKLE_NULL_COMPUTER_PLAYER_ID_get", "D_QUACKLE_NULL_COMPUTER_PLAYER_ID_get"));
  mixin(bindCode("QUACKLE_STATIC_COMPUTER_PLAYER_ID_get", "D_QUACKLE_STATIC_COMPUTER_PLAYER_ID_get"));
  mixin(bindCode("ComputerParameters_secondsPerTurn_set", "D_ComputerParameters_secondsPerTurn_set"));
  mixin(bindCode("ComputerParameters_secondsPerTurn_get", "D_ComputerParameters_secondsPerTurn_get"));
  mixin(bindCode("ComputerParameters_inferring_set", "D_ComputerParameters_inferring_set"));
  mixin(bindCode("ComputerParameters_inferring_get", "D_ComputerParameters_inferring_get"));
  mixin(bindCode("new_ComputerParameters", "D_new_ComputerParameters"));
  mixin(bindCode("delete_ComputerParameters", "D_delete_ComputerParameters"));
  mixin(bindCode("delete_ComputerDispatch", "D_delete_ComputerDispatch"));
  mixin(bindCode("ComputerDispatch_shouldAbort", "D_ComputerDispatch_shouldAbort"));
  mixin(bindCode("ComputerDispatch_signalFractionDone", "D_ComputerDispatch_signalFractionDone"));
  mixin(bindCode("new_ScalingDispatch", "D_new_ScalingDispatch"));
  mixin(bindCode("delete_ScalingDispatch", "D_delete_ScalingDispatch"));
  mixin(bindCode("ScalingDispatch_shouldAbort", "D_ScalingDispatch_shouldAbort"));
  mixin(bindCode("ScalingDispatch_signalFractionDone", "D_ScalingDispatch_signalFractionDone"));
  mixin(bindCode("ScalingDispatch_Upcast", "D_ScalingDispatch_Upcast"));
  mixin(bindCode("delete_ComputerPlayer", "D_delete_ComputerPlayer"));
  mixin(bindCode("ComputerPlayer_setParameters", "D_ComputerPlayer_setParameters"));
  mixin(bindCode("ComputerPlayer_parameters", "D_ComputerPlayer_parameters"));
  mixin(bindCode("ComputerPlayer_setPosition", "D_ComputerPlayer_setPosition"));
  mixin(bindCode("ComputerPlayer_currentPosition__SWIG_0", "D_ComputerPlayer_currentPosition__SWIG_0"));
  mixin(bindCode("ComputerPlayer_shouldAbort", "D_ComputerPlayer_shouldAbort"));
  mixin(bindCode("ComputerPlayer_signalFractionDone", "D_ComputerPlayer_signalFractionDone"));
  mixin(bindCode("ComputerPlayer_considerMove", "D_ComputerPlayer_considerMove"));
  mixin(bindCode("ComputerPlayer_setConsideredMoves", "D_ComputerPlayer_setConsideredMoves"));
  mixin(bindCode("ComputerPlayer_name", "D_ComputerPlayer_name"));
  mixin(bindCode("ComputerPlayer_id", "D_ComputerPlayer_id"));
  mixin(bindCode("ComputerPlayer_move", "D_ComputerPlayer_move"));
  mixin(bindCode("ComputerPlayer_clone", "D_ComputerPlayer_clone"));
  mixin(bindCode("ComputerPlayer_moves", "D_ComputerPlayer_moves"));
  mixin(bindCode("ComputerPlayer_isSlow", "D_ComputerPlayer_isSlow"));
  mixin(bindCode("ComputerPlayer_isUserVisible", "D_ComputerPlayer_isUserVisible"));
  mixin(bindCode("ComputerPlayer_dispatch", "D_ComputerPlayer_dispatch"));
  mixin(bindCode("ComputerPlayer_setDispatch", "D_ComputerPlayer_setDispatch"));
  mixin(bindCode("new_StaticPlayer", "D_new_StaticPlayer"));
  mixin(bindCode("delete_StaticPlayer", "D_delete_StaticPlayer"));
  mixin(bindCode("StaticPlayer_clone", "D_StaticPlayer_clone"));
  mixin(bindCode("StaticPlayer_move", "D_StaticPlayer_move"));
  mixin(bindCode("StaticPlayer_moves", "D_StaticPlayer_moves"));
  mixin(bindCode("StaticPlayer_Upcast", "D_StaticPlayer_Upcast"));
  mixin(bindCode("new_ComputerPlayerCollection", "D_new_ComputerPlayerCollection"));
  mixin(bindCode("ComputerPlayerCollection_addPlayer", "D_ComputerPlayerCollection_addPlayer"));
  mixin(bindCode("ComputerPlayerCollection_createPlayer", "D_ComputerPlayerCollection_createPlayer"));
  mixin(bindCode("ComputerPlayerCollection_fullCollection", "D_ComputerPlayerCollection_fullCollection"));
  mixin(bindCode("delete_ComputerPlayerCollection", "D_delete_ComputerPlayerCollection"));
  mixin(bindCode("ComputerPlayerCollection_Upcast", "D_ComputerPlayerCollection_Upcast"));
  mixin(bindCode("new_DataManager", "D_new_DataManager"));
  mixin(bindCode("delete_DataManager", "D_delete_DataManager"));
  mixin(bindCode("DataManager_self", "D_DataManager_self"));
  mixin(bindCode("DataManager_exists", "D_DataManager_exists"));
  mixin(bindCode("DataManager_isGood", "D_DataManager_isGood"));
  mixin(bindCode("DataManager_evaluator", "D_DataManager_evaluator"));
  mixin(bindCode("DataManager_setEvaluator", "D_DataManager_setEvaluator"));
  mixin(bindCode("DataManager_parameters", "D_DataManager_parameters"));
  mixin(bindCode("DataManager_setParameters", "D_DataManager_setParameters"));
  mixin(bindCode("DataManager_alphabetParameters", "D_DataManager_alphabetParameters"));
  mixin(bindCode("DataManager_setAlphabetParameters", "D_DataManager_setAlphabetParameters"));
  mixin(bindCode("DataManager_boardParameters", "D_DataManager_boardParameters"));
  mixin(bindCode("DataManager_setBoardParameters", "D_DataManager_setBoardParameters"));
  mixin(bindCode("DataManager_lexiconParameters", "D_DataManager_lexiconParameters"));
  mixin(bindCode("DataManager_setLexiconParameters", "D_DataManager_setLexiconParameters"));
  mixin(bindCode("DataManager_strategyParameters", "D_DataManager_strategyParameters"));
  mixin(bindCode("DataManager_setStrategyParameters", "D_DataManager_setStrategyParameters"));
  mixin(bindCode("DataManager_computerPlayers", "D_DataManager_computerPlayers"));
  mixin(bindCode("DataManager_setComputerPlayers", "D_DataManager_setComputerPlayers"));
  mixin(bindCode("DataManager_cleanupComputerPlayers", "D_DataManager_cleanupComputerPlayers"));
  mixin(bindCode("DataManager_findDataFile__SWIG_0", "D_DataManager_findDataFile__SWIG_0"));
  mixin(bindCode("DataManager_findDataFile__SWIG_1", "D_DataManager_findDataFile__SWIG_1"));
  mixin(bindCode("DataManager_hasUserDataFile", "D_DataManager_hasUserDataFile"));
  mixin(bindCode("DataManager_makeDataFilename__SWIG_0", "D_DataManager_makeDataFilename__SWIG_0"));
  mixin(bindCode("DataManager_makeDataFilename__SWIG_1", "D_DataManager_makeDataFilename__SWIG_1"));
  mixin(bindCode("DataManager_setBackupLexicon", "D_DataManager_setBackupLexicon"));
  mixin(bindCode("DataManager_backupLexicon", "D_DataManager_backupLexicon"));
  mixin(bindCode("DataManager_setAppDataDirectory", "D_DataManager_setAppDataDirectory"));
  mixin(bindCode("DataManager_appDataDirectory", "D_DataManager_appDataDirectory"));
  mixin(bindCode("DataManager_setUserDataDirectory", "D_DataManager_setUserDataDirectory"));
  mixin(bindCode("DataManager_userDataDirectory", "D_DataManager_userDataDirectory"));
  mixin(bindCode("DataManager_seedRandomNumbers__SWIG_0", "D_DataManager_seedRandomNumbers__SWIG_0"));
  mixin(bindCode("DataManager_seedRandomNumbers__SWIG_1", "D_DataManager_seedRandomNumbers__SWIG_1"));
  mixin(bindCode("DataManager_randomInteger", "D_DataManager_randomInteger"));
  mixin(bindCode("new_EndgameMove", "D_new_EndgameMove"));
  mixin(bindCode("EndgameMove_move_set", "D_EndgameMove_move_set"));
  mixin(bindCode("EndgameMove_move_get", "D_EndgameMove_move_get"));
  mixin(bindCode("EndgameMove_optimistic_set", "D_EndgameMove_optimistic_set"));
  mixin(bindCode("EndgameMove_optimistic_get", "D_EndgameMove_optimistic_get"));
  mixin(bindCode("EndgameMove_pessimistic_set", "D_EndgameMove_pessimistic_set"));
  mixin(bindCode("EndgameMove_pessimistic_get", "D_EndgameMove_pessimistic_get"));
  mixin(bindCode("EndgameMove_estimated_set", "D_EndgameMove_estimated_set"));
  mixin(bindCode("EndgameMove_estimated_get", "D_EndgameMove_estimated_get"));
  mixin(bindCode("EndgameMove_outplay_set", "D_EndgameMove_outplay_set"));
  mixin(bindCode("EndgameMove_outplay_get", "D_EndgameMove_outplay_get"));
  mixin(bindCode("delete_EndgameMove", "D_delete_EndgameMove"));
  mixin(bindCode("EndgameMoveList_optimisticComparator", "D_EndgameMoveList_optimisticComparator"));
  mixin(bindCode("new_EndgameMoveList", "D_new_EndgameMoveList"));
  mixin(bindCode("delete_EndgameMoveList", "D_delete_EndgameMoveList"));
  mixin(bindCode("new_Endgame", "D_new_Endgame"));
  mixin(bindCode("delete_Endgame", "D_delete_Endgame"));
  mixin(bindCode("Endgame_setPosition", "D_Endgame_setPosition"));
  mixin(bindCode("Endgame_currentPosition__SWIG_0", "D_Endgame_currentPosition__SWIG_0"));
  mixin(bindCode("Endgame_setDispatch", "D_Endgame_setDispatch"));
  mixin(bindCode("Endgame_setLogfile__SWIG_0", "D_Endgame_setLogfile__SWIG_0"));
  mixin(bindCode("Endgame_setLogfile__SWIG_1", "D_Endgame_setLogfile__SWIG_1"));
  mixin(bindCode("Endgame_logfile", "D_Endgame_logfile"));
  mixin(bindCode("Endgame_logMessage", "D_Endgame_logMessage"));
  mixin(bindCode("Endgame_isLogging", "D_Endgame_isLogging"));
  mixin(bindCode("Endgame_closeLogfile", "D_Endgame_closeLogfile"));
  mixin(bindCode("Endgame_setIncludedMoves", "D_Endgame_setIncludedMoves"));
  mixin(bindCode("Endgame_moves", "D_Endgame_moves"));
  mixin(bindCode("Endgame_endgameMoves", "D_Endgame_endgameMoves"));
  mixin(bindCode("Endgame_solve", "D_Endgame_solve"));
  mixin(bindCode("Endgame_reallyPlayOut", "D_Endgame_reallyPlayOut"));
  mixin(bindCode("Endgame_disappoint", "D_Endgame_disappoint"));
  mixin(bindCode("new_EndgamePlayer", "D_new_EndgamePlayer"));
  mixin(bindCode("delete_EndgamePlayer", "D_delete_EndgamePlayer"));
  mixin(bindCode("EndgamePlayer_move", "D_EndgamePlayer_move"));
  mixin(bindCode("EndgamePlayer_moves", "D_EndgamePlayer_moves"));
  mixin(bindCode("EndgamePlayer_clone", "D_EndgamePlayer_clone"));
  mixin(bindCode("EndgamePlayer_isUserVisible", "D_EndgamePlayer_isUserVisible"));
  mixin(bindCode("EndgamePlayer_setDispatch", "D_EndgamePlayer_setDispatch"));
  mixin(bindCode("EndgamePlayer_Upcast", "D_EndgamePlayer_Upcast"));
  mixin(bindCode("ProbableRack_rack_set", "D_ProbableRack_rack_set"));
  mixin(bindCode("ProbableRack_rack_get", "D_ProbableRack_rack_get"));
  mixin(bindCode("ProbableRack_probability_set", "D_ProbableRack_probability_set"));
  mixin(bindCode("ProbableRack_probability_get", "D_ProbableRack_probability_get"));
  mixin(bindCode("ProbableRack_possibility_set", "D_ProbableRack_possibility_set"));
  mixin(bindCode("ProbableRack_possibility_get", "D_ProbableRack_possibility_get"));
  mixin(bindCode("new_ProbableRack", "D_new_ProbableRack"));
  mixin(bindCode("delete_ProbableRack", "D_delete_ProbableRack"));
  mixin(bindCode("new_Enumerator", "D_new_Enumerator"));
  mixin(bindCode("Enumerator_enumerate__SWIG_0", "D_Enumerator_enumerate__SWIG_0"));
  mixin(bindCode("Enumerator_enumerate__SWIG_1", "D_Enumerator_enumerate__SWIG_1"));
  mixin(bindCode("Enumerator_enumeratePossible", "D_Enumerator_enumeratePossible"));
  mixin(bindCode("Enumerator_normalizeProbabilities", "D_Enumerator_normalizeProbabilities"));
  mixin(bindCode("delete_Enumerator", "D_delete_Enumerator"));
  mixin(bindCode("new_SmartBogowin", "D_new_SmartBogowin"));
  mixin(bindCode("delete_SmartBogowin", "D_delete_SmartBogowin"));
  mixin(bindCode("SmartBogowin_move", "D_SmartBogowin_move"));
  mixin(bindCode("SmartBogowin_moves", "D_SmartBogowin_moves"));
  mixin(bindCode("SmartBogowin_clone", "D_SmartBogowin_clone"));
  mixin(bindCode("SmartBogowin_isSlow", "D_SmartBogowin_isSlow"));
  mixin(bindCode("SmartBogowin_isUserVisible", "D_SmartBogowin_isUserVisible"));
  mixin(bindCode("SmartBogowin_bogopoints", "D_SmartBogowin_bogopoints"));
  mixin(bindCode("SmartBogowin_Upcast", "D_SmartBogowin_Upcast"));
  mixin(bindCode("new_Stopwatch", "D_new_Stopwatch"));
  mixin(bindCode("Stopwatch_start", "D_Stopwatch_start"));
  mixin(bindCode("Stopwatch_elapsed", "D_Stopwatch_elapsed"));
  mixin(bindCode("Stopwatch_exceeded", "D_Stopwatch_exceeded"));
  mixin(bindCode("delete_Stopwatch", "D_delete_Stopwatch"));
  mixin(bindCode("new_ExtensionWithInfo", "D_new_ExtensionWithInfo"));
  mixin(bindCode("ExtensionWithInfo_extensionLetterString_set", "D_ExtensionWithInfo_extensionLetterString_set"));
  mixin(bindCode("ExtensionWithInfo_extensionLetterString_get", "D_ExtensionWithInfo_extensionLetterString_get"));
  mixin(bindCode("ExtensionWithInfo_playability_set", "D_ExtensionWithInfo_playability_set"));
  mixin(bindCode("ExtensionWithInfo_playability_get", "D_ExtensionWithInfo_playability_get"));
  mixin(bindCode("ExtensionWithInfo_probability_set", "D_ExtensionWithInfo_probability_set"));
  mixin(bindCode("ExtensionWithInfo_probability_get", "D_ExtensionWithInfo_probability_get"));
  mixin(bindCode("ExtensionWithInfo_british_set", "D_ExtensionWithInfo_british_set"));
  mixin(bindCode("ExtensionWithInfo_british_get", "D_ExtensionWithInfo_british_get"));
  mixin(bindCode("delete_ExtensionWithInfo", "D_delete_ExtensionWithInfo"));
  mixin(bindCode("new_WordWithInfo", "D_new_WordWithInfo"));
  mixin(bindCode("WordWithInfo_wordLetterString_set", "D_WordWithInfo_wordLetterString_set"));
  mixin(bindCode("WordWithInfo_wordLetterString_get", "D_WordWithInfo_wordLetterString_get"));
  mixin(bindCode("WordWithInfo_playability_set", "D_WordWithInfo_playability_set"));
  mixin(bindCode("WordWithInfo_playability_get", "D_WordWithInfo_playability_get"));
  mixin(bindCode("WordWithInfo_probability_set", "D_WordWithInfo_probability_set"));
  mixin(bindCode("WordWithInfo_probability_get", "D_WordWithInfo_probability_get"));
  mixin(bindCode("WordWithInfo_british_set", "D_WordWithInfo_british_set"));
  mixin(bindCode("WordWithInfo_british_get", "D_WordWithInfo_british_get"));
  mixin(bindCode("WordWithInfo_frontExtensions_set", "D_WordWithInfo_frontExtensions_set"));
  mixin(bindCode("WordWithInfo_frontExtensions_get", "D_WordWithInfo_frontExtensions_get"));
  mixin(bindCode("WordWithInfo_backExtensions_set", "D_WordWithInfo_backExtensions_set"));
  mixin(bindCode("WordWithInfo_backExtensions_get", "D_WordWithInfo_backExtensions_get"));
  mixin(bindCode("delete_WordWithInfo", "D_delete_WordWithInfo"));
  mixin(bindCode("new_Generator__SWIG_0", "D_new_Generator__SWIG_0"));
  mixin(bindCode("new_Generator__SWIG_1", "D_new_Generator__SWIG_1"));
  mixin(bindCode("delete_Generator", "D_delete_Generator"));
  mixin(bindCode("Generator_kibitz__SWIG_0", "D_Generator_kibitz__SWIG_0"));
  mixin(bindCode("Generator_kibitz__SWIG_1", "D_Generator_kibitz__SWIG_1"));
  mixin(bindCode("Generator_kibitz__SWIG_2", "D_Generator_kibitz__SWIG_2"));
  mixin(bindCode("Generator_kibitzList", "D_Generator_kibitzList"));
  mixin(bindCode("Generator_allPossiblePlays", "D_Generator_allPossiblePlays"));
  mixin(bindCode("Generator_setPosition", "D_Generator_setPosition"));
  mixin(bindCode("Generator_position", "D_Generator_position"));
  mixin(bindCode("Generator_makeMove", "D_Generator_makeMove"));
  mixin(bindCode("Generator_isAcceptableWord", "D_Generator_isAcceptableWord"));
  mixin(bindCode("Generator_anagramLetters__SWIG_0", "D_Generator_anagramLetters__SWIG_0"));
  mixin(bindCode("Generator_anagramLetters__SWIG_1", "D_Generator_anagramLetters__SWIG_1"));
  mixin(bindCode("Generator_storeWordInfo", "D_Generator_storeWordInfo"));
  mixin(bindCode("Generator_storeExtensions", "D_Generator_storeExtensions"));
  mixin(bindCode("Generator_allCrosses", "D_Generator_allCrosses"));
  mixin(bindCode("QUACKLE_GADDAG_SEPARATOR_get", "D_QUACKLE_GADDAG_SEPARATOR_get"));
  mixin(bindCode("GaddagNode_letter", "D_GaddagNode_letter"));
  mixin(bindCode("GaddagNode_isTerminal", "D_GaddagNode_isTerminal"));
  mixin(bindCode("GaddagNode_firstChild", "D_GaddagNode_firstChild"));
  mixin(bindCode("GaddagNode_nextSibling", "D_GaddagNode_nextSibling"));
  mixin(bindCode("GaddagNode_child", "D_GaddagNode_child"));
  mixin(bindCode("new_GaddagNode", "D_new_GaddagNode"));
  mixin(bindCode("delete_GaddagNode", "D_delete_GaddagNode"));
  mixin(bindCode("LexiconInterpreter_loadDawg", "D_LexiconInterpreter_loadDawg"));
  mixin(bindCode("LexiconInterpreter_loadGaddag", "D_LexiconInterpreter_loadGaddag"));
  mixin(bindCode("LexiconInterpreter_dawgAt", "D_LexiconInterpreter_dawgAt"));
  mixin(bindCode("LexiconInterpreter_versionNumber", "D_LexiconInterpreter_versionNumber"));
  mixin(bindCode("delete_LexiconInterpreter", "D_delete_LexiconInterpreter"));
  mixin(bindCode("new_LexiconParameters", "D_new_LexiconParameters"));
  mixin(bindCode("delete_LexiconParameters", "D_delete_LexiconParameters"));
  mixin(bindCode("LexiconParameters_unloadAll", "D_LexiconParameters_unloadAll"));
  mixin(bindCode("LexiconParameters_hasSomething", "D_LexiconParameters_hasSomething"));
  mixin(bindCode("LexiconParameters_loadDawg", "D_LexiconParameters_loadDawg"));
  mixin(bindCode("LexiconParameters_unloadDawg", "D_LexiconParameters_unloadDawg"));
  mixin(bindCode("LexiconParameters_hasDawg", "D_LexiconParameters_hasDawg"));
  mixin(bindCode("LexiconParameters_dawgVersion", "D_LexiconParameters_dawgVersion"));
  mixin(bindCode("LexiconParameters_loadGaddag", "D_LexiconParameters_loadGaddag"));
  mixin(bindCode("LexiconParameters_unloadGaddag", "D_LexiconParameters_unloadGaddag"));
  mixin(bindCode("LexiconParameters_hasGaddag", "D_LexiconParameters_hasGaddag"));
  mixin(bindCode("LexiconParameters_findDictionaryFile", "D_LexiconParameters_findDictionaryFile"));
  mixin(bindCode("LexiconParameters_hasUserDictionaryFile", "D_LexiconParameters_hasUserDictionaryFile"));
  mixin(bindCode("LexiconParameters_lexiconName", "D_LexiconParameters_lexiconName"));
  mixin(bindCode("LexiconParameters_setLexiconName", "D_LexiconParameters_setLexiconName"));
  mixin(bindCode("LexiconParameters_dawgAt", "D_LexiconParameters_dawgAt"));
  mixin(bindCode("LexiconParameters_gaddagRoot", "D_LexiconParameters_gaddagRoot"));
  mixin(bindCode("LexiconParameters_hashString", "D_LexiconParameters_hashString"));
  mixin(bindCode("LexiconParameters_copyrightString", "D_LexiconParameters_copyrightString"));
  mixin(bindCode("LexiconParameters_logoFileName", "D_LexiconParameters_logoFileName"));
  mixin(bindCode("LexiconParameters_utf8Alphabet", "D_LexiconParameters_utf8Alphabet"));
  mixin(bindCode("new_Preendgame", "D_new_Preendgame"));
  mixin(bindCode("delete_Preendgame", "D_delete_Preendgame"));
  mixin(bindCode("Preendgame_move", "D_Preendgame_move"));
  mixin(bindCode("Preendgame_moves", "D_Preendgame_moves"));
  mixin(bindCode("Preendgame_clone", "D_Preendgame_clone"));
  mixin(bindCode("Preendgame_isUserVisible", "D_Preendgame_isUserVisible"));
  mixin(bindCode("Preendgame_isSlow", "D_Preendgame_isSlow"));
  mixin(bindCode("Preendgame_maximumTilesInBagToEngage", "D_Preendgame_maximumTilesInBagToEngage"));
  mixin(bindCode("Preendgame_Upcast", "D_Preendgame_Upcast"));
  mixin(bindCode("new_Reporter", "D_new_Reporter"));
  mixin(bindCode("Reporter_reportPosition", "D_Reporter_reportPosition"));
  mixin(bindCode("Reporter_reportGameStatistics", "D_Reporter_reportGameStatistics"));
  mixin(bindCode("Reporter_reportHeader", "D_Reporter_reportHeader"));
  mixin(bindCode("Reporter_reportGame", "D_Reporter_reportGame"));
  mixin(bindCode("delete_Reporter", "D_delete_Reporter"));
  mixin(bindCode("new_Resolvent", "D_new_Resolvent"));
  mixin(bindCode("delete_Resolvent", "D_delete_Resolvent"));
  mixin(bindCode("Resolvent_move", "D_Resolvent_move"));
  mixin(bindCode("Resolvent_moves", "D_Resolvent_moves"));
  mixin(bindCode("Resolvent_clone", "D_Resolvent_clone"));
  mixin(bindCode("Resolvent_isSlow", "D_Resolvent_isSlow"));
  mixin(bindCode("Resolvent_isUserVisible", "D_Resolvent_isUserVisible"));
  mixin(bindCode("Resolvent_Upcast", "D_Resolvent_Upcast"));
  mixin(bindCode("new_InferringPlayer", "D_new_InferringPlayer"));
  mixin(bindCode("delete_InferringPlayer", "D_delete_InferringPlayer"));
  mixin(bindCode("InferringPlayer_clone", "D_InferringPlayer_clone"));
  mixin(bindCode("InferringPlayer_Upcast", "D_InferringPlayer_Upcast"));
  mixin(bindCode("new_TorontoPlayer", "D_new_TorontoPlayer"));
  mixin(bindCode("delete_TorontoPlayer", "D_delete_TorontoPlayer"));
  mixin(bindCode("TorontoPlayer_clone", "D_TorontoPlayer_clone"));
  mixin(bindCode("TorontoPlayer_Upcast", "D_TorontoPlayer_Upcast"));
  mixin(bindCode("new_FiveMinutePlayer", "D_new_FiveMinutePlayer"));
  mixin(bindCode("delete_FiveMinutePlayer", "D_delete_FiveMinutePlayer"));
  mixin(bindCode("FiveMinutePlayer_clone", "D_FiveMinutePlayer_clone"));
  mixin(bindCode("FiveMinutePlayer_Upcast", "D_FiveMinutePlayer_Upcast"));
  mixin(bindCode("new_TwentySecondPlayer", "D_new_TwentySecondPlayer"));
  mixin(bindCode("delete_TwentySecondPlayer", "D_delete_TwentySecondPlayer"));
  mixin(bindCode("TwentySecondPlayer_clone", "D_TwentySecondPlayer_clone"));
  mixin(bindCode("TwentySecondPlayer_Upcast", "D_TwentySecondPlayer_Upcast"));
  mixin(bindCode("new_StrategyParameters", "D_new_StrategyParameters"));
  mixin(bindCode("StrategyParameters_initialize", "D_StrategyParameters_initialize"));
  mixin(bindCode("StrategyParameters_hasSyn2", "D_StrategyParameters_hasSyn2"));
  mixin(bindCode("StrategyParameters_hasWorths", "D_StrategyParameters_hasWorths"));
  mixin(bindCode("StrategyParameters_hasVcPlace", "D_StrategyParameters_hasVcPlace"));
  mixin(bindCode("StrategyParameters_hasBogowin", "D_StrategyParameters_hasBogowin"));
  mixin(bindCode("StrategyParameters_hasSuperleaves", "D_StrategyParameters_hasSuperleaves"));
  mixin(bindCode("StrategyParameters_syn2", "D_StrategyParameters_syn2"));
  mixin(bindCode("StrategyParameters_tileWorth", "D_StrategyParameters_tileWorth"));
  mixin(bindCode("StrategyParameters_vcPlace", "D_StrategyParameters_vcPlace"));
  mixin(bindCode("StrategyParameters_bogowin", "D_StrategyParameters_bogowin"));
  mixin(bindCode("StrategyParameters_superleave", "D_StrategyParameters_superleave"));
  mixin(bindCode("delete_StrategyParameters", "D_delete_StrategyParameters"));
  mixin(bindCode("new_FlexibleAlphabetParameters", "D_new_FlexibleAlphabetParameters"));
  mixin(bindCode("FlexibleAlphabetParameters_load", "D_FlexibleAlphabetParameters_load"));
  mixin(bindCode("delete_FlexibleAlphabetParameters", "D_delete_FlexibleAlphabetParameters"));
  mixin(bindCode("FlexibleAlphabetParameters_Upcast", "D_FlexibleAlphabetParameters_Upcast"));
  mixin(bindCode("new_UtilSettings", "D_new_UtilSettings"));
  mixin(bindCode("UtilSettings_self", "D_UtilSettings_self"));
  mixin(bindCode("UtilSettings_octothorpBritish_set", "D_UtilSettings_octothorpBritish_set"));
  mixin(bindCode("UtilSettings_octothorpBritish_get", "D_UtilSettings_octothorpBritish_get"));
  mixin(bindCode("UtilSettings_vowelFirst_set", "D_UtilSettings_vowelFirst_set"));
  mixin(bindCode("UtilSettings_vowelFirst_get", "D_UtilSettings_vowelFirst_get"));
  mixin(bindCode("UtilSettings_scoreInvalidAsZero_set", "D_UtilSettings_scoreInvalidAsZero_set"));
  mixin(bindCode("UtilSettings_scoreInvalidAsZero_get", "D_UtilSettings_scoreInvalidAsZero_get"));
  mixin(bindCode("delete_UtilSettings", "D_delete_UtilSettings"));
  mixin(bindCode("Util_qstringToString", "D_Util_qstringToString"));
  mixin(bindCode("Util_encode", "D_Util_encode"));
  mixin(bindCode("Util_nonBlankEncode", "D_Util_nonBlankEncode"));
  mixin(bindCode("Util_uvStringToQString", "D_Util_uvStringToQString"));
  mixin(bindCode("Util_letterStringToQString", "D_Util_letterStringToQString"));
  mixin(bindCode("Util_letterToQString", "D_Util_letterToQString"));
  mixin(bindCode("Util_qstringToStdString", "D_Util_qstringToStdString"));
  mixin(bindCode("Util_stdStringToQString", "D_Util_stdStringToQString"));
  mixin(bindCode("Util_moveToDetailedString", "D_Util_moveToDetailedString"));
  mixin(bindCode("Util_moveToSensitiveString", "D_Util_moveToSensitiveString"));
  mixin(bindCode("Util_alphagram__SWIG_0", "D_Util_alphagram__SWIG_0"));
  mixin(bindCode("Util_alphagram__SWIG_1", "D_Util_alphagram__SWIG_1"));
  mixin(bindCode("Util_arrangeLettersForUser__SWIG_0", "D_Util_arrangeLettersForUser__SWIG_0"));
  mixin(bindCode("Util_arrangeLettersForUser__SWIG_1", "D_Util_arrangeLettersForUser__SWIG_1"));
  mixin(bindCode("Util_arrangeLettersForUser__SWIG_2", "D_Util_arrangeLettersForUser__SWIG_2"));
  mixin(bindCode("Util_makeRack", "D_Util_makeRack"));
  mixin(bindCode("Util_sanitizeUserVisibleLetterString", "D_Util_sanitizeUserVisibleLetterString"));
  mixin(bindCode("Util_symbolsFor", "D_Util_symbolsFor"));
  mixin(bindCode("new_Util", "D_new_Util"));
  mixin(bindCode("delete_Util", "D_delete_Util"));
  mixin(bindCode("delete_Logania", "D_delete_Logania"));
  mixin(bindCode("Logania_read", "D_Logania_read"));
  mixin(bindCode("Logania_canRead", "D_Logania_canRead"));
  mixin(bindCode("Logania_write", "D_Logania_write"));
  mixin(bindCode("Logania_filter", "D_Logania_filter"));
  mixin(bindCode("new_GCGIO", "D_new_GCGIO"));
  mixin(bindCode("delete_GCGIO", "D_delete_GCGIO"));
  mixin(bindCode("GCGIO_read__SWIG_0", "D_GCGIO_read__SWIG_0"));
  mixin(bindCode("GCGIO_read__SWIG_1", "D_GCGIO_read__SWIG_1"));
  mixin(bindCode("GCGIO_canRead", "D_GCGIO_canRead"));
  mixin(bindCode("GCGIO_write", "D_GCGIO_write"));
  mixin(bindCode("GCGIO_filter", "D_GCGIO_filter"));
  mixin(bindCode("GCGIO_Upcast", "D_GCGIO_Upcast"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacksquackle;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallbackquackle;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacksquackle(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(const char* message) {
    auto exception = new object.Exception(std.conv.to!string(message));
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingException = null;
  }

  static bool isPending() {
    return m_sPendingException !is null;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      e.next = m_sPendingException;
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
  }

  static object.Exception retrieve() {
    auto e = m_sPendingException;
    m_sPendingException = null;
    return e;
  }

private:
  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallbackquackle(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;


template SwigExternC(T) if (is(typeof(*(T.init)) P == function)) {
  static if (is(typeof(*(T.init)) R == return)) {
    static if (is(typeof(*(T.init)) P == function)) {
      alias extern(C) R function(P) SwigExternC;
    }
  }
}

SwigExternC!(int function()) FIXED_STRING_MAXIMUM_LENGTH_get;
SwigExternC!(void* function()) new_FixedLengthString__SWIG_0;
SwigExternC!(void* function(const(char)* jarg1, uint jarg2)) new_FixedLengthString__SWIG_1;
SwigExternC!(void* function(uint jarg1, char jarg2)) new_FixedLengthString__SWIG_2;
SwigExternC!(void* function(const(char)* jarg1)) new_FixedLengthString__SWIG_3;
SwigExternC!(void* function(void* jarg1)) new_FixedLengthString__SWIG_4;
SwigExternC!(const(char)* function(void* jarg1)) FixedLengthString_begin__SWIG_0;
SwigExternC!(const(char)* function(void* jarg1)) FixedLengthString_end__SWIG_0;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) FixedLengthString_erase;
SwigExternC!(uint function(void* jarg1)) FixedLengthString_length;
SwigExternC!(void* function(void* jarg1, uint jarg2, uint jarg3)) FixedLengthString_substr;
SwigExternC!(uint function(void* jarg1)) FixedLengthString_empty;
SwigExternC!(uint function(void* jarg1)) FixedLengthString_size;
SwigExternC!(void function(void* jarg1)) FixedLengthString_clear;
SwigExternC!(void function(void* jarg1, char jarg2)) FixedLengthString_push_back;
SwigExternC!(void function(void* jarg1)) FixedLengthString_pop_back;
SwigExternC!(const(char)* function(void* jarg1)) FixedLengthString_constData;
SwigExternC!(int function(void* jarg1, void* jarg2)) FixedLengthString_compare;
SwigExternC!(void* function(void* jarg1, char jarg2)) FixedLengthString_swigOpAddAssign__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) FixedLengthString_swigOpAddAssign__SWIG_1;
SwigExternC!(char function(void* jarg1, uint jarg2)) FixedLengthString_opIndex;
SwigExternC!(uint function()) FixedLengthString_maxSize_get;
SwigExternC!(void function(void* jarg1)) delete_FixedLengthString;
SwigExternC!(void* function(void* jarg1, void* jarg2)) swigOpAdd__SWIG_0;
SwigExternC!(void* function(char jarg1, void* jarg2)) swigOpAdd__SWIG_1;
SwigExternC!(void* function(void* jarg1, char jarg2)) swigOpAdd__SWIG_2;
SwigExternC!(uint function(void* jarg1, void* jarg2)) swigOpLt__SWIG_0;
SwigExternC!(int function()) QUACKLE_USE_WCHAR_FOR_USER_VISIBLE_get;
SwigExternC!(int function()) QUACKLE_MAXIMUM_ALPHABET_SIZE_get;
SwigExternC!(int function()) QUACKLE_MINIMUM_ALPHABET_SIZE_get;
SwigExternC!(const(char)* function()) QUACKLE_NULL_MARK_TEXT_get;
SwigExternC!(int function()) QUACKLE_NULL_MARK_get;
SwigExternC!(int function()) QUACKLE_BLANK_MARK_get;
SwigExternC!(int function()) QUACKLE_PLAYED_THRU_MARK_get;
SwigExternC!(int function()) QUACKLE_PLAYTHRU_START_MARK_get;
SwigExternC!(int function()) QUACKLE_PLAYTHRU_END_MARK_get;
SwigExternC!(int function()) QUACKLE_FIRST_LETTER_get;
SwigExternC!(int function()) QUACKLE_BLANK_OFFSET_get;
SwigExternC!(int function()) LETTER_STRING_MAXIMUM_LENGTH_get;
SwigExternC!(void* function(void* jarg1, int jarg2)) left;
SwigExternC!(void* function(void* jarg1)) alphabetize;
SwigExternC!(void* function(void* jarg1)) clearBlankness;
SwigExternC!(void* function(void* jarg1)) setBlankness;
SwigExternC!(void* function(void* jarg1)) usedTiles;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) counts__SWIG_0;
SwigExternC!(void function(const(char)* jarg1, const(char)* jarg2)) counts__SWIG_1;
SwigExternC!(ubyte function(void* jarg1)) back;
SwigExternC!(void function(void* jarg1)) pop_back;
SwigExternC!(ubyte function(void* jarg1)) front;
SwigExternC!(void function(void* jarg1)) pop_front;
SwigExternC!(void* function(void* jarg1)) allButFront;
SwigExternC!(void* function()) new_LetterParameter__SWIG_0;
SwigExternC!(void* function(ubyte jarg1)) new_LetterParameter__SWIG_1;
SwigExternC!(void* function(ubyte jarg1, const(char)* jarg2, const(char)* jarg3, int jarg4, int jarg5, uint jarg6)) new_LetterParameter__SWIG_2;
SwigExternC!(void* function(ubyte jarg1, const(char)* jarg2, const(char)* jarg3, int jarg4, int jarg5)) new_LetterParameter__SWIG_3;
SwigExternC!(void* function(ubyte jarg1, const(char)* jarg2, const(char)* jarg3, int jarg4)) new_LetterParameter__SWIG_4;
SwigExternC!(void* function(ubyte jarg1, const(char)* jarg2, const(char)* jarg3)) new_LetterParameter__SWIG_5;
SwigExternC!(const(char)* function(void* jarg1)) LetterParameter_text;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) LetterParameter_setText;
SwigExternC!(const(char)* function(void* jarg1)) LetterParameter_blankText;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) LetterParameter_setBlankText;
SwigExternC!(ubyte function(void* jarg1)) LetterParameter_letter;
SwigExternC!(void function(void* jarg1, ubyte jarg2)) LetterParameter_setLetter;
SwigExternC!(int function(void* jarg1)) LetterParameter_score;
SwigExternC!(void function(void* jarg1, int jarg2)) LetterParameter_setScore;
SwigExternC!(int function(void* jarg1)) LetterParameter_count;
SwigExternC!(void function(void* jarg1, int jarg2)) LetterParameter_setCount;
SwigExternC!(uint function(void* jarg1)) LetterParameter_isVowel;
SwigExternC!(void function(void* jarg1, uint jarg2)) LetterParameter_setVowel;
SwigExternC!(void function(void* jarg1)) delete_LetterParameter;
SwigExternC!(void* function()) new_AlphabetParameters;
SwigExternC!(int function(void* jarg1)) AlphabetParameters_length;
SwigExternC!(ubyte function(void* jarg1)) AlphabetParameters_firstLetter;
SwigExternC!(ubyte function(void* jarg1)) AlphabetParameters_lastLetter;
SwigExternC!(void function(void* jarg1, void* jarg2)) AlphabetParameters_setAlphabet;
SwigExternC!(void* function(void* jarg1, ubyte jarg2)) AlphabetParameters_letterParameter;
SwigExternC!(void function(void* jarg1, ubyte jarg2, void* jarg3)) AlphabetParameters_setLetterParameter;
SwigExternC!(void* function()) AlphabetParameters_emptyAlphabet;
SwigExternC!(void function(void* jarg1, ubyte jarg2, int jarg3)) AlphabetParameters_setCount;
SwigExternC!(void function(void* jarg1, ubyte jarg2, int jarg3)) AlphabetParameters_setScore;
SwigExternC!(uint function(void* jarg1, ubyte jarg2)) AlphabetParameters_isBlankLetter;
SwigExternC!(ubyte function(void* jarg1, ubyte jarg2)) AlphabetParameters_clearBlankness__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) AlphabetParameters_clearBlankness__SWIG_1;
SwigExternC!(ubyte function(void* jarg1, ubyte jarg2)) AlphabetParameters_setBlankness;
SwigExternC!(uint function(void* jarg1, ubyte jarg2)) AlphabetParameters_isPlainLetter;
SwigExternC!(uint function(void* jarg1, ubyte jarg2)) AlphabetParameters_isSomeLetter;
SwigExternC!(int function(void* jarg1, ubyte jarg2)) AlphabetParameters_count;
SwigExternC!(int function(void* jarg1, ubyte jarg2)) AlphabetParameters_score;
SwigExternC!(uint function(void* jarg1, ubyte jarg2)) AlphabetParameters_isVowel;
SwigExternC!(const(char)* function(void* jarg1, void* jarg2)) AlphabetParameters_userVisible__SWIG_0;
SwigExternC!(const(char)* function(void* jarg1, ubyte jarg2)) AlphabetParameters_userVisible__SWIG_1;
SwigExternC!(void* function(void* jarg1, const(char)* jarg2, void* jarg3)) AlphabetParameters_encode__SWIG_0;
SwigExternC!(void* function(void* jarg1, const(char)* jarg2)) AlphabetParameters_encode__SWIG_1;
SwigExternC!(const(char)* function(void* jarg1)) AlphabetParameters_alphabetName;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) AlphabetParameters_setAlphabetName;
SwigExternC!(const(char)* function(const(char)* jarg1)) AlphabetParameters_findAlphabetFile;
SwigExternC!(void function(void* jarg1)) delete_AlphabetParameters;
SwigExternC!(void* function()) new_EnglishAlphabetParameters;
SwigExternC!(void function(void* jarg1)) delete_EnglishAlphabetParameters;
SwigExternC!(void* function(void* objectRef)) EnglishAlphabetParameters_Upcast;
SwigExternC!(uint function(void* jarg1)) MoveVector_empty;
SwigExternC!(void function(void* jarg1)) MoveVector_clear;
SwigExternC!(void function(void* jarg1, void* jarg2)) MoveVector_push_back;
SwigExternC!(void function(void* jarg1)) MoveVector_pop_back;
SwigExternC!(size_t function(void* jarg1)) MoveVector_size;
SwigExternC!(size_t function(void* jarg1)) MoveVector_capacity;
SwigExternC!(void function(void* jarg1, size_t jarg2)) MoveVector_reserve;
SwigExternC!(void* function()) new_MoveVector__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_MoveVector__SWIG_1;
SwigExternC!(void* function(size_t jarg1)) new_MoveVector__SWIG_2;
SwigExternC!(void* function(void* jarg1)) MoveVector_remove__SWIG_0;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) MoveVector_remove__SWIG_1;
SwigExternC!(void function(void* jarg1, size_t jarg2)) MoveVector_removeBack;
SwigExternC!(void function(void* jarg1, size_t jarg2, size_t jarg3)) MoveVector_linearRemove;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) MoveVector_insertAt;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) MoveVector_getElement;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) MoveVector_setElement;
SwigExternC!(void function(void* jarg1)) delete_MoveVector;
SwigExternC!(uint function(void* jarg1)) PlayerVector_empty;
SwigExternC!(void function(void* jarg1)) PlayerVector_clear;
SwigExternC!(void function(void* jarg1, void* jarg2)) PlayerVector_push_back;
SwigExternC!(void function(void* jarg1)) PlayerVector_pop_back;
SwigExternC!(size_t function(void* jarg1)) PlayerVector_size;
SwigExternC!(size_t function(void* jarg1)) PlayerVector_capacity;
SwigExternC!(void function(void* jarg1, size_t jarg2)) PlayerVector_reserve;
SwigExternC!(void* function()) new_PlayerVector__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_PlayerVector__SWIG_1;
SwigExternC!(void* function(size_t jarg1)) new_PlayerVector__SWIG_2;
SwigExternC!(void* function(void* jarg1)) PlayerVector_remove__SWIG_0;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) PlayerVector_remove__SWIG_1;
SwigExternC!(void function(void* jarg1, size_t jarg2)) PlayerVector_removeBack;
SwigExternC!(void function(void* jarg1, size_t jarg2, size_t jarg3)) PlayerVector_linearRemove;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) PlayerVector_insertAt;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) PlayerVector_getElement;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) PlayerVector_setElement;
SwigExternC!(void function(void* jarg1)) delete_PlayerVector;
SwigExternC!(uint function(void* jarg1)) ProbableRackList_empty;
SwigExternC!(void function(void* jarg1)) ProbableRackList_clear;
SwigExternC!(void function(void* jarg1, void* jarg2)) ProbableRackList_push_back;
SwigExternC!(void function(void* jarg1)) ProbableRackList_pop_back;
SwigExternC!(size_t function(void* jarg1)) ProbableRackList_size;
SwigExternC!(size_t function(void* jarg1)) ProbableRackList_capacity;
SwigExternC!(void function(void* jarg1, size_t jarg2)) ProbableRackList_reserve;
SwigExternC!(void* function()) new_ProbableRackList__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_ProbableRackList__SWIG_1;
SwigExternC!(void* function(size_t jarg1)) new_ProbableRackList__SWIG_2;
SwigExternC!(void* function(void* jarg1)) ProbableRackList_remove__SWIG_0;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) ProbableRackList_remove__SWIG_1;
SwigExternC!(void function(void* jarg1, size_t jarg2)) ProbableRackList_removeBack;
SwigExternC!(void function(void* jarg1, size_t jarg2, size_t jarg3)) ProbableRackList_linearRemove;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) ProbableRackList_insertAt;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) ProbableRackList_getElement;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) ProbableRackList_setElement;
SwigExternC!(void function(void* jarg1)) delete_ProbableRackList;
SwigExternC!(uint function(void* jarg1)) PositionList_empty;
SwigExternC!(void function(void* jarg1)) PositionList_clear;
SwigExternC!(void function(void* jarg1, void* jarg2)) PositionList_push_back;
SwigExternC!(void function(void* jarg1)) PositionList_pop_back;
SwigExternC!(size_t function(void* jarg1)) PositionList_size;
SwigExternC!(size_t function(void* jarg1)) PositionList_capacity;
SwigExternC!(void function(void* jarg1, size_t jarg2)) PositionList_reserve;
SwigExternC!(void* function()) new_PositionList__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_PositionList__SWIG_1;
SwigExternC!(void* function(size_t jarg1)) new_PositionList__SWIG_2;
SwigExternC!(void* function(void* jarg1)) PositionList_remove__SWIG_0;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) PositionList_remove__SWIG_1;
SwigExternC!(void function(void* jarg1, size_t jarg2)) PositionList_removeBack;
SwigExternC!(void function(void* jarg1, size_t jarg2, size_t jarg3)) PositionList_linearRemove;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) PositionList_insertAt;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) PositionList_getElement;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) PositionList_setElement;
SwigExternC!(void function(void* jarg1)) delete_PositionList;
SwigExternC!(uint function(void* jarg1)) LetterParameterVector_empty;
SwigExternC!(void function(void* jarg1)) LetterParameterVector_clear;
SwigExternC!(void function(void* jarg1, void* jarg2)) LetterParameterVector_push_back;
SwigExternC!(void function(void* jarg1)) LetterParameterVector_pop_back;
SwigExternC!(size_t function(void* jarg1)) LetterParameterVector_size;
SwigExternC!(size_t function(void* jarg1)) LetterParameterVector_capacity;
SwigExternC!(void function(void* jarg1, size_t jarg2)) LetterParameterVector_reserve;
SwigExternC!(void* function()) new_LetterParameterVector__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_LetterParameterVector__SWIG_1;
SwigExternC!(void* function(size_t jarg1)) new_LetterParameterVector__SWIG_2;
SwigExternC!(void* function(void* jarg1)) LetterParameterVector_remove__SWIG_0;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) LetterParameterVector_remove__SWIG_1;
SwigExternC!(void function(void* jarg1, size_t jarg2)) LetterParameterVector_removeBack;
SwigExternC!(void function(void* jarg1, size_t jarg2, size_t jarg3)) LetterParameterVector_linearRemove;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) LetterParameterVector_insertAt;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) LetterParameterVector_getElement;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) LetterParameterVector_setElement;
SwigExternC!(void function(void* jarg1)) delete_LetterParameterVector;
SwigExternC!(uint function(void* jarg1)) LetterStringVector_empty;
SwigExternC!(void function(void* jarg1)) LetterStringVector_clear;
SwigExternC!(void function(void* jarg1, void* jarg2)) LetterStringVector_push_back;
SwigExternC!(void function(void* jarg1)) LetterStringVector_pop_back;
SwigExternC!(size_t function(void* jarg1)) LetterStringVector_size;
SwigExternC!(size_t function(void* jarg1)) LetterStringVector_capacity;
SwigExternC!(void function(void* jarg1, size_t jarg2)) LetterStringVector_reserve;
SwigExternC!(void* function()) new_LetterStringVector__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_LetterStringVector__SWIG_1;
SwigExternC!(void* function(size_t jarg1)) new_LetterStringVector__SWIG_2;
SwigExternC!(void* function(void* jarg1)) LetterStringVector_remove__SWIG_0;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) LetterStringVector_remove__SWIG_1;
SwigExternC!(void function(void* jarg1, size_t jarg2)) LetterStringVector_removeBack;
SwigExternC!(void function(void* jarg1, size_t jarg2, size_t jarg3)) LetterStringVector_linearRemove;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) LetterStringVector_insertAt;
SwigExternC!(void* function(void* jarg1, size_t jarg2)) LetterStringVector_getElement;
SwigExternC!(void function(void* jarg1, size_t jarg2, void* jarg3)) LetterStringVector_setElement;
SwigExternC!(void function(void* jarg1)) delete_LetterStringVector;
SwigExternC!(void function(void* jarg1, int jarg2)) Move_score_set;
SwigExternC!(int function(void* jarg1)) Move_score_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) Move_isBingo_set;
SwigExternC!(uint function(void* jarg1)) Move_isBingo_get;
SwigExternC!(int function(void* jarg1)) Move_effectiveScore;
SwigExternC!(void function(void* jarg1, double jarg2)) Move_equity_set;
SwigExternC!(double function(void* jarg1)) Move_equity_get;
SwigExternC!(void function(void* jarg1, double jarg2)) Move_win_set;
SwigExternC!(double function(void* jarg1)) Move_win_get;
SwigExternC!(void function(void* jarg1, double jarg2)) Move_possibleWin_set;
SwigExternC!(double function(void* jarg1)) Move_possibleWin_get;
SwigExternC!(void function(void* jarg1, int jarg2)) Move_action_set;
SwigExternC!(int function(void* jarg1)) Move_action_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) Move_horizontal_set;
SwigExternC!(uint function(void* jarg1)) Move_horizontal_get;
SwigExternC!(void function(void* jarg1, int jarg2)) Move_startrow_set;
SwigExternC!(int function(void* jarg1)) Move_startrow_get;
SwigExternC!(void function(void* jarg1, int jarg2)) Move_startcol_set;
SwigExternC!(int function(void* jarg1)) Move_startcol_get;
SwigExternC!(uint function(void* jarg1)) Move_isAMove;
SwigExternC!(void function(void* jarg1, void* jarg2)) Move_setTiles;
SwigExternC!(void function(void* jarg1, void* jarg2)) Move_setPrettyTiles;
SwigExternC!(void* function(void* jarg1)) Move_prettyTiles;
SwigExternC!(void* function(void* jarg1)) Move_usedTiles;
SwigExternC!(void* function(void* jarg1)) Move_wordTiles;
SwigExternC!(void* function(void* jarg1)) Move_wordTilesWithNoPlayThru;
SwigExternC!(void* function(void* jarg1)) Move_tiles;
SwigExternC!(uint function(void* jarg1)) Move_isChallengedPhoney;
SwigExternC!(void function(void* jarg1, uint jarg2)) Move_setIsChallengedPhoney;
SwigExternC!(int function(void* jarg1)) Move_scoreAddition;
SwigExternC!(void function(void* jarg1, int jarg2)) Move_setScoreAddition;
SwigExternC!(uint function(ubyte jarg1)) Move_isAlreadyOnBoard;
SwigExternC!(const(char)* function(void* jarg1)) Move_xml;
SwigExternC!(const(char)* function(void* jarg1)) Move_toString;
SwigExternC!(const(char)* function(void* jarg1)) Move_debugString;
SwigExternC!(const(char)* function(void* jarg1)) Move_positionString;
SwigExternC!(void* function(const(char)* jarg1, void* jarg2)) Move_createPlaceMove__SWIG_0;
SwigExternC!(void* function(int jarg1, int jarg2, uint jarg3, void* jarg4)) Move_createPlaceMove__SWIG_1;
SwigExternC!(void* function(const(char)* jarg1, void* jarg2)) Move_createChallengedPhoney__SWIG_0;
SwigExternC!(void* function(int jarg1, int jarg2, uint jarg3, void* jarg4)) Move_createChallengedPhoney__SWIG_1;
SwigExternC!(void* function(void* jarg1, uint jarg2)) Move_createExchangeMove;
SwigExternC!(void* function(void* jarg1, int jarg2)) Move_createUnusedTilesBonus;
SwigExternC!(void* function(int jarg1)) Move_createTimePenalty;
SwigExternC!(void* function()) Move_createPassMove;
SwigExternC!(void* function()) Move_createNonmove;
SwigExternC!(void* function()) new_Move;
SwigExternC!(void function(void* jarg1)) delete_Move;
SwigExternC!(uint function(void* jarg1, void* jarg2)) swigOpLt__SWIG_1;
SwigExternC!(void function(void* jarg1, int jarg2)) MoveList_sort__SWIG_0;
SwigExternC!(void function(void* jarg1)) MoveList_sort__SWIG_1;
SwigExternC!(void function(void* jarg1, int jarg2)) MoveList_sortNonReverse__SWIG_0;
SwigExternC!(void function(void* jarg1)) MoveList_sortNonReverse__SWIG_1;
SwigExternC!(uint function(void* jarg1, void* jarg2)) MoveList_winComparator;
SwigExternC!(uint function(void* jarg1, void* jarg2)) MoveList_equityComparator;
SwigExternC!(uint function(void* jarg1, void* jarg2)) MoveList_scoreComparator;
SwigExternC!(uint function(void* jarg1, void* jarg2)) MoveList_alphabeticalComparator;
SwigExternC!(uint function(void* jarg1, void* jarg2)) MoveList_wordPosComparator;
SwigExternC!(uint function(void* jarg1, void* jarg2)) MoveList_contains;
SwigExternC!(void* function()) new_MoveList;
SwigExternC!(void function(void* jarg1)) delete_MoveList;
SwigExternC!(void* function(void* objectRef)) MoveList_Upcast;
SwigExternC!(void* function()) new_Rack__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Rack__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2)) Rack_setTiles;
SwigExternC!(void* function(void* jarg1)) Rack_tiles;
SwigExternC!(void* function(void* jarg1)) Rack_alphaTiles;
SwigExternC!(uint function(void* jarg1)) Rack_empty;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Rack_equals;
SwigExternC!(uint function(void* jarg1)) Rack_size;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Rack_unload;
SwigExternC!(void function(void* jarg1, void* jarg2)) Rack_load;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Rack_contains;
SwigExternC!(void function(void* jarg1)) Rack_shuffle;
SwigExternC!(int function(void* jarg1)) Rack_score;
SwigExternC!(const(char)* function(void* jarg1)) Rack_xml;
SwigExternC!(const(char)* function(void* jarg1)) Rack_toString;
SwigExternC!(void function(void* jarg1)) delete_Rack;
SwigExternC!(void* function()) new_Bag__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Bag__SWIG_1;
SwigExternC!(void function(void* jarg1)) Bag_clear;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) Bag_exch;
SwigExternC!(ubyte function(void* jarg1)) Bag_pluck;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Bag_removeLetters__SWIG_0;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2)) Bag_removeLetters__SWIG_1;
SwigExternC!(uint function(void* jarg1, ubyte jarg2)) Bag_removeLetter;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Bag_letterCounts;
SwigExternC!(void function(void* jarg1, void* jarg2)) Bag_toss__SWIG_0;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Bag_toss__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2)) Bag_toss__SWIG_2;
SwigExternC!(void function(void* jarg1, void* jarg2)) Bag_refill__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3)) Bag_refill__SWIG_1;
SwigExternC!(void function(void* jarg1)) Bag_prepareFullBag;
SwigExternC!(int function(void* jarg1)) Bag_fullBagTileCount;
SwigExternC!(uint function(void* jarg1)) Bag_empty;
SwigExternC!(int function(void* jarg1)) Bag_size;
SwigExternC!(const(char)* function(void* jarg1)) Bag_tiles;
SwigExternC!(const(char)* function(void* jarg1)) Bag_shuffledTiles;
SwigExternC!(void* function(void* jarg1)) Bag_someShuffledTiles;
SwigExternC!(double function(void* jarg1)) Bag_probabilityOfDrawingFromFullBag;
SwigExternC!(double function(void* jarg1, void* jarg2)) Bag_probabilityOfDrawingFromBag;
SwigExternC!(double function(void* jarg1, void* jarg2)) Bag_probabilityOfDrawing;
SwigExternC!(const(char)* function(void* jarg1)) Bag_toString;
SwigExternC!(void function(void* jarg1)) delete_Bag;
SwigExternC!(int function()) QUACKLE_MAXIMUM_BOARD_SIZE_get;
SwigExternC!(int function()) QUACKLE_MINIMUM_BOARD_SIZE_get;
SwigExternC!(void* function()) new_Board__SWIG_0;
SwigExternC!(void* function(int jarg1, int jarg2)) new_Board__SWIG_1;
SwigExternC!(void function(void* jarg1)) Board_prepareEmptyBoard;
SwigExternC!(int function(void* jarg1)) Board_width;
SwigExternC!(int function(void* jarg1)) Board_height;
SwigExternC!(void* function(void* jarg1)) Board_tilesNotOnBoard;
SwigExternC!(void* function(void* jarg1)) Board_tilesOnBoard;
SwigExternC!(uint function(void* jarg1)) Board_isEmpty;
SwigExternC!(void function(void* jarg1, void* jarg2)) Board_makeMove;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Board_allWordsFormedBy;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Board_isConnected;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Board_isUnacceptableOpeningMove;
SwigExternC!(void function(void* jarg1)) Board_updateBritishness;
SwigExternC!(int function(void* jarg1, void* jarg2, void* jarg3)) Board_score__SWIG_0;
SwigExternC!(int function(void* jarg1, void* jarg2)) Board_score__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2, uint jarg3)) Board_prettyTilesOfMove__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Board_prettyTilesOfMove__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Board_sanitizedTilesOfMove;
SwigExternC!(const(char)* function(void* jarg1)) Board_toString;
SwigExternC!(const(char)* function(void* jarg1, int jarg2)) Board_htmlBoard;
SwigExternC!(const(char)* function(void* jarg1)) Board_htmlKey;
SwigExternC!(void* function(void* jarg1, int jarg2, int jarg3)) Board_tileInformation;
SwigExternC!(ubyte function(void* jarg1, int jarg2, int jarg3)) Board_letter;
SwigExternC!(uint function(void* jarg1, int jarg2, int jarg3)) Board_isBlank;
SwigExternC!(uint function(void* jarg1, int jarg2, int jarg3)) Board_isBritish;
SwigExternC!(void* function(void* jarg1, int jarg2, int jarg3)) Board_vcross;
SwigExternC!(void function(void* jarg1, int jarg2, int jarg3, void* jarg4)) Board_setVCross;
SwigExternC!(void* function(void* jarg1, int jarg2, int jarg3)) Board_hcross;
SwigExternC!(void function(void* jarg1, int jarg2, int jarg3, void* jarg4)) Board_setHCross;
SwigExternC!(void function(void* jarg1)) delete_Board;
SwigExternC!(void* function()) new_BoardParameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) BoardParameters_Serialize;
SwigExternC!(void* function(void* jarg1)) BoardParameters_Deserialize;
SwigExternC!(int function(void* jarg1)) BoardParameters_width;
SwigExternC!(void function(void* jarg1, int jarg2)) BoardParameters_setWidth;
SwigExternC!(int function(void* jarg1)) BoardParameters_height;
SwigExternC!(void function(void* jarg1, int jarg2)) BoardParameters_setHeight;
SwigExternC!(int function(void* jarg1)) BoardParameters_startRow;
SwigExternC!(void function(void* jarg1, int jarg2)) BoardParameters_setStartRow;
SwigExternC!(int function(void* jarg1)) BoardParameters_startColumn;
SwigExternC!(void function(void* jarg1, int jarg2)) BoardParameters_setStartColumn;
SwigExternC!(int function(void* jarg1, int jarg2, int jarg3)) BoardParameters_letterMultiplier;
SwigExternC!(void function(void* jarg1, int jarg2, int jarg3, int jarg4)) BoardParameters_setLetterMultiplier;
SwigExternC!(int function(void* jarg1, int jarg2, int jarg3)) BoardParameters_wordMultiplier;
SwigExternC!(void function(void* jarg1, int jarg2, int jarg3, int jarg4)) BoardParameters_setWordMultiplier;
SwigExternC!(const(char)* function(void* jarg1)) BoardParameters_name;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) BoardParameters_setName;
SwigExternC!(void function(void* jarg1)) delete_BoardParameters;
SwigExternC!(void* function()) new_EnglishBoard;
SwigExternC!(void function(void* jarg1)) delete_EnglishBoard;
SwigExternC!(void* function(void* objectRef)) EnglishBoard_Upcast;
SwigExternC!(void function(void* jarg1)) delete_Evaluator;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) Evaluator_equity;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) Evaluator_playerConsideration;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) Evaluator_sharedConsideration;
SwigExternC!(double function(void* jarg1, void* jarg2)) Evaluator_leaveValue;
SwigExternC!(void* function()) new_Evaluator;
SwigExternC!(void function(void* jarg1)) delete_ScorePlusLeaveEvaluator;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) ScorePlusLeaveEvaluator_equity;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) ScorePlusLeaveEvaluator_playerConsideration;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) ScorePlusLeaveEvaluator_sharedConsideration;
SwigExternC!(double function(void* jarg1, void* jarg2)) ScorePlusLeaveEvaluator_leaveValue;
SwigExternC!(void* function()) new_ScorePlusLeaveEvaluator;
SwigExternC!(void* function(void* objectRef)) ScorePlusLeaveEvaluator_Upcast;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) CatchallEvaluator_equity;
SwigExternC!(double function(void* jarg1, void* jarg2, void* jarg3)) CatchallEvaluator_endgameResult;
SwigExternC!(void* function()) new_CatchallEvaluator;
SwigExternC!(void function(void* jarg1)) delete_CatchallEvaluator;
SwigExternC!(void* function(void* objectRef)) CatchallEvaluator_Upcast;
SwigExternC!(void* function()) new_Player__SWIG_0;
SwigExternC!(void* function(const(char)* jarg1, int jarg2, int jarg3)) new_Player__SWIG_1;
SwigExternC!(void* function(const(char)* jarg1, int jarg2)) new_Player__SWIG_2;
SwigExternC!(void* function(const(char)* jarg1)) new_Player__SWIG_3;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Player_setName;
SwigExternC!(const(char)* function(void* jarg1)) Player_name;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Player_setAbbreviatedName;
SwigExternC!(const(char)* function(void* jarg1)) Player_abbreviatedName;
SwigExternC!(void function(void* jarg1, int jarg2)) Player_setType;
SwigExternC!(int function(void* jarg1)) Player_type;
SwigExternC!(void function(void* jarg1, void* jarg2)) Player_setComputerPlayer;
SwigExternC!(void* function(void* jarg1)) Player_computerPlayer;
SwigExternC!(int function(void* jarg1)) Player_id;
SwigExternC!(void function(void* jarg1, int jarg2)) Player_setId;
SwigExternC!(void function(void* jarg1, void* jarg2)) Player_setRack__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) Player_setRack__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Player_rack;
SwigExternC!(void function(void* jarg1, int jarg2)) Player_setScore;
SwigExternC!(int function(void* jarg1)) Player_score;
SwigExternC!(void function(void* jarg1, int jarg2)) Player_addToScore;
SwigExternC!(void* function(void* jarg1)) Player_drawnLetters;
SwigExternC!(void function(void* jarg1, void* jarg2)) Player_setDrawnLetters;
SwigExternC!(uint function(void* jarg1)) Player_racksAreKnown;
SwigExternC!(void function(void* jarg1, uint jarg2)) Player_setRacksAreKnown;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Player_positionallyEqual;
SwigExternC!(const(char)* function(void* jarg1)) Player_storeInformationToString;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Player_loadInformationFromString;
SwigExternC!(void* function(const(char)* jarg1)) Player_makePlayerFromString;
SwigExternC!(void function(void* jarg1)) delete_Player;
SwigExternC!(uint function(void* jarg1, void* jarg2)) swigOpLt__SWIG_2;
SwigExternC!(void* function()) new_PlayerList;
SwigExternC!(void* function(void* jarg1, int jarg2, out bool jarg3)) PlayerList_playerForId;
SwigExternC!(void* function(void* jarg1, const(char)* jarg2, out bool jarg3)) PlayerList_playerForName;
SwigExternC!(void function(void* jarg1)) delete_PlayerList;
SwigExternC!(void* function(void* objectRef)) PlayerList_Upcast;
SwigExternC!(void* function(int jarg1, int jarg2)) new_HistoryLocation;
SwigExternC!(int function(void* jarg1)) HistoryLocation_playerId;
SwigExternC!(int function(void* jarg1)) HistoryLocation_turnNumber;
SwigExternC!(void function(void* jarg1)) delete_HistoryLocation;
SwigExternC!(uint function(void* jarg1, void* jarg2)) swigOpLt__SWIG_3;
SwigExternC!(void* function(void* jarg1)) new_GamePosition__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_GamePosition__SWIG_1;
SwigExternC!(void* function()) new_GamePosition__SWIG_2;
SwigExternC!(void function(void* jarg1, int jarg2)) GamePosition_kibitz__SWIG_0;
SwigExternC!(void function(void* jarg1)) GamePosition_kibitz__SWIG_1;
SwigExternC!(void* function(void* jarg1)) GamePosition_moves;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setMoves;
SwigExternC!(void* function(void* jarg1)) GamePosition_staticBestMove;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_removeMove;
SwigExternC!(void function(void* jarg1)) GamePosition_removeAllMoves;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_addMove;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_makeSureMoveListContainsMoves;
SwigExternC!(void function(void* jarg1, void* jarg2, int jarg3)) GamePosition_kibitzAs;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_ensureMovePrettiness;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_ensureMoveTilesDoNotIncludePlayThru;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_addAndSetMoveMade;
SwigExternC!(int function(void* jarg1, void* jarg2)) GamePosition_validateMove;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GamePosition_formsAcceptableWords;
SwigExternC!(void* function(void* jarg1, void* jarg2)) GamePosition_allWordsFormedBy;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GamePosition_isConnected;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GamePosition_isAcceptableWord;
SwigExternC!(uint function(void* jarg1)) GamePosition_exchangeAllowed;
SwigExternC!(int function(void* jarg1, void* jarg2, void* jarg3)) GamePosition_handleOverdraw;
SwigExternC!(void function(void* jarg1, void* jarg2, uint jarg3)) GamePosition_makeMove__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_makeMove__SWIG_1;
SwigExternC!(void function(void* jarg1)) GamePosition_ensureBoardIsPreparedForAnalysis;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_scoreMove;
SwigExternC!(double function(void* jarg1, void* jarg2)) GamePosition_calculateEquity;
SwigExternC!(int function(void* jarg1, void* jarg2)) GamePosition_calculateScore;
SwigExternC!(double function(void* jarg1, void* jarg2)) GamePosition_calculatePlayerConsideration;
SwigExternC!(double function(void* jarg1, void* jarg2)) GamePosition_leaveValue;
SwigExternC!(double function(void* jarg1, void* jarg2)) GamePosition_calculateSharedConsideration;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setBoard;
SwigExternC!(void* function(void* jarg1)) GamePosition_board;
SwigExternC!(void* function(void* jarg1)) GamePosition_bag;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setDrawingOrder;
SwigExternC!(void* function(void* jarg1)) GamePosition_drawingOrder;
SwigExternC!(void* function(void* jarg1)) GamePosition_unseenBag;
SwigExternC!(void* function(void* jarg1, void* jarg2)) GamePosition_unseenBagFromPlayerPerspective;
SwigExternC!(void function(void* jarg1)) GamePosition_ensureProperBag;
SwigExternC!(void function(void* jarg1)) GamePosition_setEmptyBoard;
SwigExternC!(void* function(void* jarg1)) GamePosition_currentPlayer__SWIG_0;
SwigExternC!(uint function(void* jarg1, int jarg2)) GamePosition_setCurrentPlayer;
SwigExternC!(void* function(void* jarg1)) GamePosition_playerOnTurn__SWIG_0;
SwigExternC!(uint function(void* jarg1, int jarg2)) GamePosition_setPlayerOnTurn;
SwigExternC!(void* function(void* jarg1)) GamePosition_humanPlayer;
SwigExternC!(void* function(void* jarg1)) GamePosition_nextPlayer;
SwigExternC!(void* function(void* jarg1, int jarg2, void* jarg3)) GamePosition_nextPlayerOfType;
SwigExternC!(void* function(void* jarg1, const(char)* jarg2, void* jarg3)) GamePosition_playerWithAbbreviatedName;
SwigExternC!(void* function(void* jarg1)) GamePosition_players;
SwigExternC!(void* function(void* jarg1)) GamePosition_endgameAdjustedScores;
SwigExternC!(void* function(void* jarg1)) GamePosition_leadingPlayers;
SwigExternC!(int function(void* jarg1)) GamePosition_spread__SWIG_0;
SwigExternC!(int function(void* jarg1, int jarg2)) GamePosition_spread__SWIG_1;
SwigExternC!(uint function(void* jarg1)) GamePosition_gameOver;
SwigExternC!(void function(void* jarg1)) GamePosition_adjustScoresToFinishGame;
SwigExternC!(void function(void* jarg1)) GamePosition_adjustScoresToFinishPassedOutGame;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GamePosition_doesMoveEndGame;
SwigExternC!(int function(void* jarg1, void* jarg2)) GamePosition_deadwood;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_replenishAndSetRack__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) GamePosition_replenishAndSetRack__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2, uint jarg3)) GamePosition_setCurrentPlayerRack__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setCurrentPlayerRack__SWIG_1;
SwigExternC!(void function(void* jarg1, int jarg2, void* jarg3, uint jarg4)) GamePosition_setPlayerRack__SWIG_0;
SwigExternC!(void function(void* jarg1, int jarg2, void* jarg3)) GamePosition_setPlayerRack__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2, uint jarg3)) GamePosition_setOppRack__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setOppRack__SWIG_1;
SwigExternC!(void* function(void* jarg1)) GamePosition_oppRack;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GamePosition_canSetCurrentPlayerRackWithoutBagExpansion;
SwigExternC!(uint function(void* jarg1, int jarg2, void* jarg3)) GamePosition_canSetPlayerRackWithoutBagExpansion;
SwigExternC!(void function(void* jarg1)) GamePosition_resetBag;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setBag;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setMoveMade;
SwigExternC!(void* function(void* jarg1)) GamePosition_moveMade;
SwigExternC!(void function(void* jarg1, void* jarg2)) GamePosition_setCommittedMove;
SwigExternC!(void* function(void* jarg1)) GamePosition_committedMove;
SwigExternC!(void function(void* jarg1, const(char)* jarg2, void* jarg3, int jarg4)) GamePosition_setTileBonus;
SwigExternC!(void function(void* jarg1)) GamePosition_prepareForCommit;
SwigExternC!(void* function(void* jarg1)) GamePosition_boardAfterMoveMade;
SwigExternC!(void function(void* jarg1)) GamePosition_resetMoveMade;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GamePosition_incrementTurn__SWIG_0;
SwigExternC!(uint function(void* jarg1)) GamePosition_incrementTurn__SWIG_1;
SwigExternC!(int function(void* jarg1)) GamePosition_turnNumber;
SwigExternC!(void function(void* jarg1, uint jarg2)) GamePosition_setNestedness;
SwigExternC!(void function(void* jarg1)) GamePosition_incrementNestedness;
SwigExternC!(uint function(void* jarg1)) GamePosition_nestedness;
SwigExternC!(const(char)* function(void* jarg1)) GamePosition_nestednessIndentation;
SwigExternC!(int function(void* jarg1)) GamePosition_scorelessTurnsInARow;
SwigExternC!(void* function(void* jarg1)) GamePosition_location;
SwigExternC!(const(char)* function(void* jarg1)) GamePosition_explanatoryNote;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) GamePosition_setExplanatoryNote;
SwigExternC!(void* function(void* jarg1)) GamePosition_underlyingBoardReference;
SwigExternC!(void function(void* jarg1)) delete_GamePosition;
SwigExternC!(void* function()) new_History;
SwigExternC!(void* function(void* jarg1)) History_players;
SwigExternC!(void* function(void* jarg1)) History_lastPlayer;
SwigExternC!(void* function(void* jarg1)) History_lastPosition;
SwigExternC!(int function(void* jarg1)) History_maximumTurnNumber;
SwigExternC!(void* function(void* jarg1)) History_lastLocation;
SwigExternC!(void* function(void* jarg1)) History_currentLocation;
SwigExternC!(void* function(void* jarg1)) History_currentPosition__SWIG_0;
SwigExternC!(void* function(void* jarg1, int jarg2)) History_positionsFacedBy;
SwigExternC!(void* function(void* jarg1, void* jarg2)) History_nextPosition__SWIG_0;
SwigExternC!(void* function(void* jarg1)) History_nextPosition__SWIG_1;
SwigExternC!(void* function(void* jarg1, int jarg2, void* jarg3)) History_nextPositionFacedBy__SWIG_0;
SwigExternC!(void* function(void* jarg1, int jarg2)) History_nextPositionFacedBy__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) History_previousPosition__SWIG_0;
SwigExternC!(void* function(void* jarg1)) History_previousPosition__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) History_firstPosition__SWIG_0;
SwigExternC!(void* function(void* jarg1)) History_firstPosition__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3)) History_positionAt__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) History_positionAt__SWIG_1;
SwigExternC!(void function(void* jarg1)) delete_History;
SwigExternC!(void* function(void* objectRef)) History_Upcast;
SwigExternC!(void* function()) new_Game;
SwigExternC!(void function(void* jarg1)) delete_Game;
SwigExternC!(void function(void* jarg1)) Game_reset;
SwigExternC!(void function(void* jarg1, void* jarg2)) Game_setPlayers;
SwigExternC!(void* function(void* jarg1)) Game_players;
SwigExternC!(uint function(void* jarg1)) Game_hasPositions;
SwigExternC!(void* function(void* jarg1)) Game_history;
SwigExternC!(void function(void* jarg1)) Game_addPosition;
SwigExternC!(void* function(void* jarg1)) Game_currentPosition__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) Game_setCurrentPosition__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) Game_setCurrentPosition__SWIG_1;
SwigExternC!(void function(void* jarg1, int jarg2, void* jarg3)) Game_associateComputerPlayer;
SwigExternC!(void* function(void* jarg1, int jarg2)) Game_computerPlayer;
SwigExternC!(void function(void* jarg1, void* jarg2)) Game_setDefaultComputerPlayer;
SwigExternC!(void function(void* jarg1)) Game_associateKnownComputerPlayers;
SwigExternC!(void* function(void* jarg1)) Game_defaultComputerPlayer;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Game_haveComputerPlay__SWIG_0;
SwigExternC!(void* function(void* jarg1)) Game_haveComputerPlay__SWIG_1;
SwigExternC!(void function(void* jarg1)) Game_advanceToNoncomputerPlayer;
SwigExternC!(void function(void* jarg1, void* jarg2)) Game_setCandidate;
SwigExternC!(void* function(void* jarg1)) Game_candidate;
SwigExternC!(void function(void* jarg1)) Game_resetCandidature;
SwigExternC!(void function(void* jarg1, uint jarg2)) Game_commitCandidate__SWIG_0;
SwigExternC!(void function(void* jarg1)) Game_commitCandidate__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2)) Game_commitMove;
SwigExternC!(const(char)* function(void* jarg1)) Game_description;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Game_setDescription;
SwigExternC!(const(char)* function(void* jarg1)) Game_title;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Game_setTitle;
SwigExternC!(void* function()) new_GameParameters;
SwigExternC!(int function(void* jarg1)) GameParameters_minimumTilesForExchange;
SwigExternC!(void function(void* jarg1, int jarg2)) GameParameters_setMinimumTilesForExchange;
SwigExternC!(int function(void* jarg1)) GameParameters_numberOfScorelessTurnsThatEndsGame;
SwigExternC!(void function(void* jarg1, int jarg2)) GameParameters_setNumberOfScorelessTurnsThatEndsGame;
SwigExternC!(int function(void* jarg1)) GameParameters_bingoBonus;
SwigExternC!(void function(void* jarg1, int jarg2)) GameParameters_setBingoBonus;
SwigExternC!(int function(void* jarg1)) GameParameters_rackSize;
SwigExternC!(void function(void* jarg1, int jarg2)) GameParameters_setRackSize;
SwigExternC!(uint function(void* jarg1)) GameParameters_overdrawPenalty;
SwigExternC!(void function(void* jarg1, uint jarg2)) GameParameters_setOverdrawPenalty;
SwigExternC!(void function(void* jarg1)) delete_GameParameters;
SwigExternC!(void* function()) new_EnglishParameters;
SwigExternC!(void function(void* jarg1)) delete_EnglishParameters;
SwigExternC!(void* function(void* objectRef)) EnglishParameters_Upcast;
SwigExternC!(void* function()) new_AveragedValue;
SwigExternC!(void function(void* jarg1, double jarg2)) AveragedValue_incorporateValue;
SwigExternC!(void function(void* jarg1)) AveragedValue_clear;
SwigExternC!(void* function(void* jarg1)) AveragedValue_valueSum;
SwigExternC!(void* function(void* jarg1)) AveragedValue_squaredValueSum;
SwigExternC!(core.stdc.config.c_long function(void* jarg1)) AveragedValue_incorporatedValues;
SwigExternC!(uint function(void* jarg1)) AveragedValue_hasValues;
SwigExternC!(double function(void* jarg1)) AveragedValue_averagedValue;
SwigExternC!(double function(void* jarg1)) AveragedValue_standardDeviation;
SwigExternC!(void function(void* jarg1)) delete_AveragedValue;
SwigExternC!(void* function(void* jarg1, int jarg2)) PositionStatistics_getStatistic;
SwigExternC!(void function(void* jarg1, void* jarg2)) PositionStatistics_score_set;
SwigExternC!(void* function(void* jarg1)) PositionStatistics_score_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) PositionStatistics_bingos_set;
SwigExternC!(void* function(void* jarg1)) PositionStatistics_bingos_get;
SwigExternC!(void* function()) new_PositionStatistics;
SwigExternC!(void function(void* jarg1)) delete_PositionStatistics;
SwigExternC!(void function(void* jarg1, uint jarg2)) Level_setNumberScores;
SwigExternC!(void function(void* jarg1, void* jarg2)) Level_statistics_set;
SwigExternC!(void* function(void* jarg1)) Level_statistics_get;
SwigExternC!(void* function()) new_Level;
SwigExternC!(void function(void* jarg1)) delete_Level;
SwigExternC!(void function(void* jarg1, uint jarg2)) LevelList_setNumberLevels;
SwigExternC!(void* function()) new_LevelList;
SwigExternC!(void function(void* jarg1)) delete_LevelList;
SwigExternC!(void* function(void* jarg1)) new_SimmedMove;
SwigExternC!(double function(void* jarg1)) SimmedMove_calculateEquity;
SwigExternC!(double function(void* jarg1)) SimmedMove_calculateWinPercentage;
SwigExternC!(void function(void* jarg1)) SimmedMove_clear;
SwigExternC!(uint function(void* jarg1)) SimmedMove_includeInSimulation;
SwigExternC!(void function(void* jarg1, uint jarg2)) SimmedMove_setIncludeInSimulation;
SwigExternC!(core.stdc.config.c_long function(void* jarg1)) SimmedMove_id;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMove_move_set;
SwigExternC!(void* function(void* jarg1)) SimmedMove_move_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMove_levels_set;
SwigExternC!(void* function(void* jarg1)) SimmedMove_levels_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMove_residual_set;
SwigExternC!(void* function(void* jarg1)) SimmedMove_residual_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMove_gameSpread_set;
SwigExternC!(void* function(void* jarg1)) SimmedMove_gameSpread_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMove_wins_set;
SwigExternC!(void* function(void* jarg1)) SimmedMove_wins_get;
SwigExternC!(void* function(void* jarg1, int jarg2, int jarg3)) SimmedMove_getPositionStatistics;
SwigExternC!(void function(void* jarg1)) delete_SimmedMove;
SwigExternC!(void function(void* jarg1, core.stdc.config.c_long jarg2)) SimmedMoveMessage_id_set;
SwigExternC!(core.stdc.config.c_long function(void* jarg1)) SimmedMoveMessage_id_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessage_move_set;
SwigExternC!(void* function(void* jarg1)) SimmedMoveMessage_move_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessage_levels_set;
SwigExternC!(void* function(void* jarg1)) SimmedMoveMessage_levels_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessage_score_set;
SwigExternC!(void* function(void* jarg1)) SimmedMoveMessage_score_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessage_bingos_set;
SwigExternC!(void* function(void* jarg1)) SimmedMoveMessage_bingos_get;
SwigExternC!(void function(void* jarg1, double jarg2)) SimmedMoveMessage_residual_set;
SwigExternC!(double function(void* jarg1)) SimmedMoveMessage_residual_get;
SwigExternC!(void function(void* jarg1, double jarg2)) SimmedMoveMessage_gameSpread_set;
SwigExternC!(double function(void* jarg1)) SimmedMoveMessage_gameSpread_get;
SwigExternC!(void function(void* jarg1, double jarg2)) SimmedMoveMessage_wins_set;
SwigExternC!(double function(void* jarg1)) SimmedMoveMessage_wins_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) SimmedMoveMessage_bogowin_set;
SwigExternC!(uint function(void* jarg1)) SimmedMoveMessage_bogowin_get;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) SimmedMoveMessage_xmlIndent_set;
SwigExternC!(const(char)* function(void* jarg1)) SimmedMoveMessage_xmlIndent_get;
SwigExternC!(void* function()) new_SimmedMoveMessage;
SwigExternC!(void function(void* jarg1)) delete_SimmedMoveMessage;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveConstants_game_set;
SwigExternC!(void* function(void* jarg1)) SimmedMoveConstants_game_get;
SwigExternC!(void function(void* jarg1, int jarg2)) SimmedMoveConstants_startPlayerId_set;
SwigExternC!(int function(void* jarg1)) SimmedMoveConstants_startPlayerId_get;
SwigExternC!(void function(void* jarg1, int jarg2)) SimmedMoveConstants_playerCount_set;
SwigExternC!(int function(void* jarg1)) SimmedMoveConstants_playerCount_get;
SwigExternC!(void function(void* jarg1, int jarg2)) SimmedMoveConstants_decimalTurns_set;
SwigExternC!(int function(void* jarg1)) SimmedMoveConstants_decimalTurns_get;
SwigExternC!(void function(void* jarg1, int jarg2)) SimmedMoveConstants_levelCount_set;
SwigExternC!(int function(void* jarg1)) SimmedMoveConstants_levelCount_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) SimmedMoveConstants_ignoreOppos_set;
SwigExternC!(uint function(void* jarg1)) SimmedMoveConstants_ignoreOppos_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) SimmedMoveConstants_isLogging_set;
SwigExternC!(uint function(void* jarg1)) SimmedMoveConstants_isLogging_get;
SwigExternC!(void* function()) new_SimmedMoveConstants;
SwigExternC!(void function(void* jarg1)) delete_SimmedMoveConstants;
SwigExternC!(void* function()) new_SimmedMoveMessageQueue;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessageQueue_push;
SwigExternC!(void function(void* jarg1)) SimmedMoveMessageQueue_send_terminate_all;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessageQueue_send_terminate_one;
SwigExternC!(void* function(void* jarg1)) SimmedMoveMessageQueue_constants;
SwigExternC!(void function(void* jarg1, void* jarg2)) SimmedMoveMessageQueue_setConstants;
SwigExternC!(void function(void* jarg1)) delete_SimmedMoveMessageQueue;
SwigExternC!(void* function()) new_Simulator;
SwigExternC!(void function(void* jarg1)) delete_Simulator;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_setPosition;
SwigExternC!(void* function(void* jarg1)) Simulator_currentPosition__SWIG_0;
SwigExternC!(void* function(void* jarg1)) Simulator_history;
SwigExternC!(void function(void* jarg1, const(char)* jarg2, uint jarg3)) Simulator_setLogfile__SWIG_0;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Simulator_setLogfile__SWIG_1;
SwigExternC!(const(char)* function(void* jarg1)) Simulator_logfile;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_setDispatch;
SwigExternC!(void* function(void* jarg1)) Simulator_dispatch;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Simulator_logMessage;
SwigExternC!(uint function(void* jarg1)) Simulator_isLogging;
SwigExternC!(void function(void* jarg1)) Simulator_closeLogfile;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_setIncludedMoves;
SwigExternC!(void function(void* jarg1)) Simulator_makeSureConsideredMovesAreIncluded;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_moveConsideredMovesToBeginning;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_setConsideredMoves;
SwigExternC!(void* function(void* jarg1)) Simulator_consideredMoves;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_addConsideredMove;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Simulator_isConsideredMove;
SwigExternC!(void function(void* jarg1, double jarg2, int jarg3)) Simulator_pruneTo;
SwigExternC!(void function(void* jarg1, uint jarg2)) Simulator_setIgnoreOppos;
SwigExternC!(uint function(void* jarg1)) Simulator_ignoreOppos;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_simThreadFunc;
SwigExternC!(void function(void* jarg1, size_t jarg2)) Simulator_setThreadCount;
SwigExternC!(void function(void* jarg1)) Simulator_resetNumbers;
SwigExternC!(void function(void* jarg1, int jarg2, int jarg3)) Simulator_simulate__SWIG_0;
SwigExternC!(void function(void* jarg1, int jarg2)) Simulator_simulate__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_simulateOnePosition;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_incorporateMessage;
SwigExternC!(void function(void* jarg1, void* jarg2)) Simulator_setPartialOppoRack;
SwigExternC!(void* function(void* jarg1)) Simulator_partialOppoRack;
SwigExternC!(void function(void* jarg1)) Simulator_randomizeOppoRacks;
SwigExternC!(void function(void* jarg1)) Simulator_randomizeDrawingOrder;
SwigExternC!(int function(void* jarg1)) Simulator_iterations;
SwigExternC!(uint function(void* jarg1)) Simulator_hasSimulationResults;
SwigExternC!(void* function(void* jarg1)) Simulator_simmedMoves;
SwigExternC!(void* function(void* jarg1, uint jarg2, uint jarg3)) Simulator_moves__SWIG_0;
SwigExternC!(void* function(void* jarg1, uint jarg2)) Simulator_moves__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Simulator_moves__SWIG_2;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Simulator_simmedMoveForMove;
SwigExternC!(int function(void* jarg1)) Simulator_numLevels;
SwigExternC!(int function(void* jarg1, int jarg2)) Simulator_numPlayersAtLevel;
SwigExternC!(int function()) QUACKLE_NULL_COMPUTER_PLAYER_ID_get;
SwigExternC!(int function()) QUACKLE_STATIC_COMPUTER_PLAYER_ID_get;
SwigExternC!(void function(void* jarg1, int jarg2)) ComputerParameters_secondsPerTurn_set;
SwigExternC!(int function(void* jarg1)) ComputerParameters_secondsPerTurn_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) ComputerParameters_inferring_set;
SwigExternC!(uint function(void* jarg1)) ComputerParameters_inferring_get;
SwigExternC!(void* function()) new_ComputerParameters;
SwigExternC!(void function(void* jarg1)) delete_ComputerParameters;
SwigExternC!(void function(void* jarg1)) delete_ComputerDispatch;
SwigExternC!(uint function(void* jarg1)) ComputerDispatch_shouldAbort;
SwigExternC!(void function(void* jarg1, double jarg2)) ComputerDispatch_signalFractionDone;
SwigExternC!(void* function(void* jarg1, double jarg2, double jarg3)) new_ScalingDispatch;
SwigExternC!(void function(void* jarg1)) delete_ScalingDispatch;
SwigExternC!(uint function(void* jarg1)) ScalingDispatch_shouldAbort;
SwigExternC!(void function(void* jarg1, double jarg2)) ScalingDispatch_signalFractionDone;
SwigExternC!(void* function(void* objectRef)) ScalingDispatch_Upcast;
SwigExternC!(void function(void* jarg1)) delete_ComputerPlayer;
SwigExternC!(void function(void* jarg1, void* jarg2)) ComputerPlayer_setParameters;
SwigExternC!(void* function(void* jarg1)) ComputerPlayer_parameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) ComputerPlayer_setPosition;
SwigExternC!(void* function(void* jarg1)) ComputerPlayer_currentPosition__SWIG_0;
SwigExternC!(uint function(void* jarg1)) ComputerPlayer_shouldAbort;
SwigExternC!(void function(void* jarg1, double jarg2)) ComputerPlayer_signalFractionDone;
SwigExternC!(void function(void* jarg1, void* jarg2)) ComputerPlayer_considerMove;
SwigExternC!(void function(void* jarg1, void* jarg2)) ComputerPlayer_setConsideredMoves;
SwigExternC!(const(char)* function(void* jarg1)) ComputerPlayer_name;
SwigExternC!(int function(void* jarg1)) ComputerPlayer_id;
SwigExternC!(void* function(void* jarg1)) ComputerPlayer_move;
SwigExternC!(void* function(void* jarg1)) ComputerPlayer_clone;
SwigExternC!(void* function(void* jarg1, int jarg2)) ComputerPlayer_moves;
SwigExternC!(uint function(void* jarg1)) ComputerPlayer_isSlow;
SwigExternC!(uint function(void* jarg1)) ComputerPlayer_isUserVisible;
SwigExternC!(void* function(void* jarg1)) ComputerPlayer_dispatch;
SwigExternC!(void function(void* jarg1, void* jarg2)) ComputerPlayer_setDispatch;
SwigExternC!(void* function()) new_StaticPlayer;
SwigExternC!(void function(void* jarg1)) delete_StaticPlayer;
SwigExternC!(void* function(void* jarg1)) StaticPlayer_clone;
SwigExternC!(void* function(void* jarg1)) StaticPlayer_move;
SwigExternC!(void* function(void* jarg1, int jarg2)) StaticPlayer_moves;
SwigExternC!(void* function(void* objectRef)) StaticPlayer_Upcast;
SwigExternC!(void* function()) new_ComputerPlayerCollection;
SwigExternC!(void function(void* jarg1, void* jarg2)) ComputerPlayerCollection_addPlayer;
SwigExternC!(void* function(void* jarg1)) ComputerPlayerCollection_createPlayer;
SwigExternC!(void* function()) ComputerPlayerCollection_fullCollection;
SwigExternC!(void function(void* jarg1)) delete_ComputerPlayerCollection;
SwigExternC!(void* function(void* objectRef)) ComputerPlayerCollection_Upcast;
SwigExternC!(void* function()) new_DataManager;
SwigExternC!(void function(void* jarg1)) delete_DataManager;
SwigExternC!(void* function()) DataManager_self;
SwigExternC!(uint function()) DataManager_exists;
SwigExternC!(uint function(void* jarg1)) DataManager_isGood;
SwigExternC!(void* function(void* jarg1)) DataManager_evaluator;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setEvaluator;
SwigExternC!(void* function(void* jarg1)) DataManager_parameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setParameters;
SwigExternC!(void* function(void* jarg1)) DataManager_alphabetParameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setAlphabetParameters;
SwigExternC!(void* function(void* jarg1)) DataManager_boardParameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setBoardParameters;
SwigExternC!(void* function(void* jarg1)) DataManager_lexiconParameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setLexiconParameters;
SwigExternC!(void* function(void* jarg1)) DataManager_strategyParameters;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setStrategyParameters;
SwigExternC!(void* function(void* jarg1)) DataManager_computerPlayers;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_setComputerPlayers;
SwigExternC!(void function(void* jarg1)) DataManager_cleanupComputerPlayers;
SwigExternC!(const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4)) DataManager_findDataFile__SWIG_0;
SwigExternC!(const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3)) DataManager_findDataFile__SWIG_1;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3)) DataManager_hasUserDataFile;
SwigExternC!(const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, uint jarg5)) DataManager_makeDataFilename__SWIG_0;
SwigExternC!(const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, uint jarg4)) DataManager_makeDataFilename__SWIG_1;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) DataManager_setBackupLexicon;
SwigExternC!(const(char)* function(void* jarg1)) DataManager_backupLexicon;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) DataManager_setAppDataDirectory;
SwigExternC!(const(char)* function(void* jarg1)) DataManager_appDataDirectory;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) DataManager_setUserDataDirectory;
SwigExternC!(const(char)* function(void* jarg1)) DataManager_userDataDirectory;
SwigExternC!(void function(void* jarg1, uint jarg2)) DataManager_seedRandomNumbers__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) DataManager_seedRandomNumbers__SWIG_1;
SwigExternC!(int function(void* jarg1, int jarg2, int jarg3)) DataManager_randomInteger;
SwigExternC!(void* function(void* jarg1)) new_EndgameMove;
SwigExternC!(void function(void* jarg1, void* jarg2)) EndgameMove_move_set;
SwigExternC!(void* function(void* jarg1)) EndgameMove_move_get;
SwigExternC!(void function(void* jarg1, double jarg2)) EndgameMove_optimistic_set;
SwigExternC!(double function(void* jarg1)) EndgameMove_optimistic_get;
SwigExternC!(void function(void* jarg1, double jarg2)) EndgameMove_pessimistic_set;
SwigExternC!(double function(void* jarg1)) EndgameMove_pessimistic_get;
SwigExternC!(void function(void* jarg1, double jarg2)) EndgameMove_estimated_set;
SwigExternC!(double function(void* jarg1)) EndgameMove_estimated_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) EndgameMove_outplay_set;
SwigExternC!(uint function(void* jarg1)) EndgameMove_outplay_get;
SwigExternC!(void function(void* jarg1)) delete_EndgameMove;
SwigExternC!(uint function(void* jarg1, void* jarg2)) EndgameMoveList_optimisticComparator;
SwigExternC!(void* function()) new_EndgameMoveList;
SwigExternC!(void function(void* jarg1)) delete_EndgameMoveList;
SwigExternC!(void* function()) new_Endgame;
SwigExternC!(void function(void* jarg1)) delete_Endgame;
SwigExternC!(void function(void* jarg1, void* jarg2)) Endgame_setPosition;
SwigExternC!(void* function(void* jarg1)) Endgame_currentPosition__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) Endgame_setDispatch;
SwigExternC!(void function(void* jarg1, const(char)* jarg2, uint jarg3)) Endgame_setLogfile__SWIG_0;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Endgame_setLogfile__SWIG_1;
SwigExternC!(const(char)* function(void* jarg1)) Endgame_logfile;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) Endgame_logMessage;
SwigExternC!(uint function(void* jarg1)) Endgame_isLogging;
SwigExternC!(void function(void* jarg1)) Endgame_closeLogfile;
SwigExternC!(void function(void* jarg1, void* jarg2)) Endgame_setIncludedMoves;
SwigExternC!(void* function(void* jarg1, uint jarg2)) Endgame_moves;
SwigExternC!(void* function(void* jarg1)) Endgame_endgameMoves;
SwigExternC!(void* function(void* jarg1, int jarg2)) Endgame_solve;
SwigExternC!(void function(void* jarg1, void* jarg2, int jarg3)) Endgame_reallyPlayOut;
SwigExternC!(double function(void* jarg1, void* jarg2, double jarg3)) Endgame_disappoint;
SwigExternC!(void* function()) new_EndgamePlayer;
SwigExternC!(void function(void* jarg1)) delete_EndgamePlayer;
SwigExternC!(void* function(void* jarg1)) EndgamePlayer_move;
SwigExternC!(void* function(void* jarg1, int jarg2)) EndgamePlayer_moves;
SwigExternC!(void* function(void* jarg1)) EndgamePlayer_clone;
SwigExternC!(uint function(void* jarg1)) EndgamePlayer_isUserVisible;
SwigExternC!(void function(void* jarg1, void* jarg2)) EndgamePlayer_setDispatch;
SwigExternC!(void* function(void* objectRef)) EndgamePlayer_Upcast;
SwigExternC!(void function(void* jarg1, void* jarg2)) ProbableRack_rack_set;
SwigExternC!(void* function(void* jarg1)) ProbableRack_rack_get;
SwigExternC!(void function(void* jarg1, double jarg2)) ProbableRack_probability_set;
SwigExternC!(double function(void* jarg1)) ProbableRack_probability_get;
SwigExternC!(void function(void* jarg1, double jarg2)) ProbableRack_possibility_set;
SwigExternC!(double function(void* jarg1)) ProbableRack_possibility_get;
SwigExternC!(void* function()) new_ProbableRack;
SwigExternC!(void function(void* jarg1)) delete_ProbableRack;
SwigExternC!(void* function(void* jarg1)) new_Enumerator;
SwigExternC!(void function(void* jarg1, void* jarg2, uint jarg3)) Enumerator_enumerate__SWIG_0;
SwigExternC!(void function(void* jarg1, void* jarg2)) Enumerator_enumerate__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) Enumerator_enumeratePossible;
SwigExternC!(void function(void* jarg1)) Enumerator_normalizeProbabilities;
SwigExternC!(void function(void* jarg1)) delete_Enumerator;
SwigExternC!(void* function()) new_SmartBogowin;
SwigExternC!(void function(void* jarg1)) delete_SmartBogowin;
SwigExternC!(void* function(void* jarg1)) SmartBogowin_move;
SwigExternC!(void* function(void* jarg1, int jarg2)) SmartBogowin_moves;
SwigExternC!(void* function(void* jarg1)) SmartBogowin_clone;
SwigExternC!(uint function(void* jarg1)) SmartBogowin_isSlow;
SwigExternC!(uint function(void* jarg1)) SmartBogowin_isUserVisible;
SwigExternC!(double function(void* jarg1, void* jarg2)) SmartBogowin_bogopoints;
SwigExternC!(void* function(void* objectRef)) SmartBogowin_Upcast;
SwigExternC!(void* function()) new_Stopwatch;
SwigExternC!(void function(void* jarg1)) Stopwatch_start;
SwigExternC!(int function(void* jarg1)) Stopwatch_elapsed;
SwigExternC!(uint function(void* jarg1, int jarg2)) Stopwatch_exceeded;
SwigExternC!(void function(void* jarg1)) delete_Stopwatch;
SwigExternC!(void* function()) new_ExtensionWithInfo;
SwigExternC!(void function(void* jarg1, void* jarg2)) ExtensionWithInfo_extensionLetterString_set;
SwigExternC!(void* function(void* jarg1)) ExtensionWithInfo_extensionLetterString_get;
SwigExternC!(void function(void* jarg1, int jarg2)) ExtensionWithInfo_playability_set;
SwigExternC!(int function(void* jarg1)) ExtensionWithInfo_playability_get;
SwigExternC!(void function(void* jarg1, double jarg2)) ExtensionWithInfo_probability_set;
SwigExternC!(double function(void* jarg1)) ExtensionWithInfo_probability_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) ExtensionWithInfo_british_set;
SwigExternC!(uint function(void* jarg1)) ExtensionWithInfo_british_get;
SwigExternC!(void function(void* jarg1)) delete_ExtensionWithInfo;
SwigExternC!(void* function()) new_WordWithInfo;
SwigExternC!(void function(void* jarg1, void* jarg2)) WordWithInfo_wordLetterString_set;
SwigExternC!(void* function(void* jarg1)) WordWithInfo_wordLetterString_get;
SwigExternC!(void function(void* jarg1, int jarg2)) WordWithInfo_playability_set;
SwigExternC!(int function(void* jarg1)) WordWithInfo_playability_get;
SwigExternC!(void function(void* jarg1, double jarg2)) WordWithInfo_probability_set;
SwigExternC!(double function(void* jarg1)) WordWithInfo_probability_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) WordWithInfo_british_set;
SwigExternC!(uint function(void* jarg1)) WordWithInfo_british_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) WordWithInfo_frontExtensions_set;
SwigExternC!(void* function(void* jarg1)) WordWithInfo_frontExtensions_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) WordWithInfo_backExtensions_set;
SwigExternC!(void* function(void* jarg1)) WordWithInfo_backExtensions_get;
SwigExternC!(void function(void* jarg1)) delete_WordWithInfo;
SwigExternC!(void* function()) new_Generator__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Generator__SWIG_1;
SwigExternC!(void function(void* jarg1)) delete_Generator;
SwigExternC!(void function(void* jarg1, int jarg2, int jarg3)) Generator_kibitz__SWIG_0;
SwigExternC!(void function(void* jarg1, int jarg2)) Generator_kibitz__SWIG_1;
SwigExternC!(void function(void* jarg1)) Generator_kibitz__SWIG_2;
SwigExternC!(void* function(void* jarg1)) Generator_kibitzList;
SwigExternC!(void* function(void* jarg1)) Generator_allPossiblePlays;
SwigExternC!(void function(void* jarg1, void* jarg2)) Generator_setPosition;
SwigExternC!(void* function(void* jarg1)) Generator_position;
SwigExternC!(void function(void* jarg1, void* jarg2, uint jarg3)) Generator_makeMove;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Generator_isAcceptableWord;
SwigExternC!(void* function(void* jarg1, void* jarg2, int jarg3)) Generator_anagramLetters__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Generator_anagramLetters__SWIG_1;
SwigExternC!(void function(void* jarg1, void* jarg2)) Generator_storeWordInfo;
SwigExternC!(void function(void* jarg1, void* jarg2)) Generator_storeExtensions;
SwigExternC!(void function(void* jarg1)) Generator_allCrosses;
SwigExternC!(int function()) QUACKLE_GADDAG_SEPARATOR_get;
SwigExternC!(ubyte function(void* jarg1)) GaddagNode_letter;
SwigExternC!(uint function(void* jarg1)) GaddagNode_isTerminal;
SwigExternC!(void* function(void* jarg1)) GaddagNode_firstChild;
SwigExternC!(void* function(void* jarg1)) GaddagNode_nextSibling;
SwigExternC!(void* function(void* jarg1, ubyte jarg2)) GaddagNode_child;
SwigExternC!(void* function()) new_GaddagNode;
SwigExternC!(void function(void* jarg1)) delete_GaddagNode;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) LexiconInterpreter_loadDawg;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) LexiconInterpreter_loadGaddag;
SwigExternC!(void function(void* jarg1, void* jarg2, int jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8, void* jarg9)) LexiconInterpreter_dawgAt;
SwigExternC!(int function(void* jarg1)) LexiconInterpreter_versionNumber;
SwigExternC!(void function(void* jarg1)) delete_LexiconInterpreter;
SwigExternC!(void* function()) new_LexiconParameters;
SwigExternC!(void function(void* jarg1)) delete_LexiconParameters;
SwigExternC!(void function(void* jarg1)) LexiconParameters_unloadAll;
SwigExternC!(uint function(void* jarg1)) LexiconParameters_hasSomething;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) LexiconParameters_loadDawg;
SwigExternC!(void function(void* jarg1)) LexiconParameters_unloadDawg;
SwigExternC!(uint function(void* jarg1)) LexiconParameters_hasDawg;
SwigExternC!(int function(void* jarg1)) LexiconParameters_dawgVersion;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) LexiconParameters_loadGaddag;
SwigExternC!(void function(void* jarg1)) LexiconParameters_unloadGaddag;
SwigExternC!(uint function(void* jarg1)) LexiconParameters_hasGaddag;
SwigExternC!(const(char)* function(const(char)* jarg1)) LexiconParameters_findDictionaryFile;
SwigExternC!(uint function(const(char)* jarg1)) LexiconParameters_hasUserDictionaryFile;
SwigExternC!(const(char)* function(void* jarg1)) LexiconParameters_lexiconName;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) LexiconParameters_setLexiconName;
SwigExternC!(void function(void* jarg1, int jarg2, void* jarg3, void* jarg4, void* jarg5, void* jarg6, void* jarg7, void* jarg8)) LexiconParameters_dawgAt;
SwigExternC!(void* function(void* jarg1)) LexiconParameters_gaddagRoot;
SwigExternC!(const(char)* function(void* jarg1, uint jarg2)) LexiconParameters_hashString;
SwigExternC!(const(char)* function(void* jarg1)) LexiconParameters_copyrightString;
SwigExternC!(const(char)* function(void* jarg1)) LexiconParameters_logoFileName;
SwigExternC!(void* function(void* jarg1)) LexiconParameters_utf8Alphabet;
SwigExternC!(void* function()) new_Preendgame;
SwigExternC!(void function(void* jarg1)) delete_Preendgame;
SwigExternC!(void* function(void* jarg1)) Preendgame_move;
SwigExternC!(void* function(void* jarg1, int jarg2)) Preendgame_moves;
SwigExternC!(void* function(void* jarg1)) Preendgame_clone;
SwigExternC!(uint function(void* jarg1)) Preendgame_isUserVisible;
SwigExternC!(uint function(void* jarg1)) Preendgame_isSlow;
SwigExternC!(int function()) Preendgame_maximumTilesInBagToEngage;
SwigExternC!(void* function(void* objectRef)) Preendgame_Upcast;
SwigExternC!(void* function()) new_Reporter;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) Reporter_reportPosition;
SwigExternC!(void function(void* jarg1, void* jarg2)) Reporter_reportGameStatistics;
SwigExternC!(void function(void* jarg1, void* jarg2)) Reporter_reportHeader;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) Reporter_reportGame;
SwigExternC!(void function(void* jarg1)) delete_Reporter;
SwigExternC!(void* function()) new_Resolvent;
SwigExternC!(void function(void* jarg1)) delete_Resolvent;
SwigExternC!(void* function(void* jarg1)) Resolvent_move;
SwigExternC!(void* function(void* jarg1, int jarg2)) Resolvent_moves;
SwigExternC!(void* function(void* jarg1)) Resolvent_clone;
SwigExternC!(uint function(void* jarg1)) Resolvent_isSlow;
SwigExternC!(uint function(void* jarg1)) Resolvent_isUserVisible;
SwigExternC!(void* function(void* objectRef)) Resolvent_Upcast;
SwigExternC!(void* function()) new_InferringPlayer;
SwigExternC!(void function(void* jarg1)) delete_InferringPlayer;
SwigExternC!(void* function(void* jarg1)) InferringPlayer_clone;
SwigExternC!(void* function(void* objectRef)) InferringPlayer_Upcast;
SwigExternC!(void* function()) new_TorontoPlayer;
SwigExternC!(void function(void* jarg1)) delete_TorontoPlayer;
SwigExternC!(void* function(void* jarg1)) TorontoPlayer_clone;
SwigExternC!(void* function(void* objectRef)) TorontoPlayer_Upcast;
SwigExternC!(void* function()) new_FiveMinutePlayer;
SwigExternC!(void function(void* jarg1)) delete_FiveMinutePlayer;
SwigExternC!(void* function(void* jarg1)) FiveMinutePlayer_clone;
SwigExternC!(void* function(void* objectRef)) FiveMinutePlayer_Upcast;
SwigExternC!(void* function()) new_TwentySecondPlayer;
SwigExternC!(void function(void* jarg1)) delete_TwentySecondPlayer;
SwigExternC!(void* function(void* jarg1)) TwentySecondPlayer_clone;
SwigExternC!(void* function(void* objectRef)) TwentySecondPlayer_Upcast;
SwigExternC!(void* function()) new_StrategyParameters;
SwigExternC!(void function(void* jarg1, const(char)* jarg2)) StrategyParameters_initialize;
SwigExternC!(uint function(void* jarg1)) StrategyParameters_hasSyn2;
SwigExternC!(uint function(void* jarg1)) StrategyParameters_hasWorths;
SwigExternC!(uint function(void* jarg1)) StrategyParameters_hasVcPlace;
SwigExternC!(uint function(void* jarg1)) StrategyParameters_hasBogowin;
SwigExternC!(uint function(void* jarg1)) StrategyParameters_hasSuperleaves;
SwigExternC!(double function(void* jarg1, ubyte jarg2, ubyte jarg3)) StrategyParameters_syn2;
SwigExternC!(double function(void* jarg1, ubyte jarg2)) StrategyParameters_tileWorth;
SwigExternC!(double function(void* jarg1, int jarg2, int jarg3, int jarg4)) StrategyParameters_vcPlace;
SwigExternC!(double function(void* jarg1, int jarg2, int jarg3, int jarg4)) StrategyParameters_bogowin;
SwigExternC!(double function(void* jarg1, void* jarg2)) StrategyParameters_superleave;
SwigExternC!(void function(void* jarg1)) delete_StrategyParameters;
SwigExternC!(void* function()) new_FlexibleAlphabetParameters;
SwigExternC!(uint function(void* jarg1, void* jarg2)) FlexibleAlphabetParameters_load;
SwigExternC!(void function(void* jarg1)) delete_FlexibleAlphabetParameters;
SwigExternC!(void* function(void* objectRef)) FlexibleAlphabetParameters_Upcast;
SwigExternC!(void* function()) new_UtilSettings;
SwigExternC!(void* function()) UtilSettings_self;
SwigExternC!(void function(void* jarg1, uint jarg2)) UtilSettings_octothorpBritish_set;
SwigExternC!(uint function(void* jarg1)) UtilSettings_octothorpBritish_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) UtilSettings_vowelFirst_set;
SwigExternC!(uint function(void* jarg1)) UtilSettings_vowelFirst_get;
SwigExternC!(void function(void* jarg1, uint jarg2)) UtilSettings_scoreInvalidAsZero_set;
SwigExternC!(uint function(void* jarg1)) UtilSettings_scoreInvalidAsZero_get;
SwigExternC!(void function(void* jarg1)) delete_UtilSettings;
SwigExternC!(const(char)* function(void* jarg1)) Util_qstringToString;
SwigExternC!(void* function(void* jarg1)) Util_encode;
SwigExternC!(void* function(void* jarg1)) Util_nonBlankEncode;
SwigExternC!(void* function(const(char)* jarg1)) Util_uvStringToQString;
SwigExternC!(void* function(void* jarg1)) Util_letterStringToQString;
SwigExternC!(void* function(ubyte jarg1)) Util_letterToQString;
SwigExternC!(const(char)* function(void* jarg1)) Util_qstringToStdString;
SwigExternC!(void* function(const(char)* jarg1)) Util_stdStringToQString;
SwigExternC!(void* function(void* jarg1)) Util_moveToDetailedString;
SwigExternC!(void* function(void* jarg1)) Util_moveToSensitiveString;
SwigExternC!(void* function(void* jarg1)) Util_alphagram__SWIG_0;
SwigExternC!(void* function(void* jarg1)) Util_alphagram__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Util_arrangeLettersForUser__SWIG_0;
SwigExternC!(void* function(void* jarg1)) Util_arrangeLettersForUser__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Util_arrangeLettersForUser__SWIG_2;
SwigExternC!(void* function(void* jarg1)) Util_makeRack;
SwigExternC!(void* function(void* jarg1)) Util_sanitizeUserVisibleLetterString;
SwigExternC!(void* function(void* jarg1)) Util_symbolsFor;
SwigExternC!(void* function()) new_Util;
SwigExternC!(void function(void* jarg1)) delete_Util;
SwigExternC!(void function(void* jarg1)) delete_Logania;
SwigExternC!(void* function(void* jarg1, void* jarg2, int jarg3)) Logania_read;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Logania_canRead;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) Logania_write;
SwigExternC!(void* function(void* jarg1)) Logania_filter;
SwigExternC!(void* function()) new_GCGIO;
SwigExternC!(void function(void* jarg1)) delete_GCGIO;
SwigExternC!(void* function(void* jarg1, void* jarg2, int jarg3)) GCGIO_read__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2, int jarg3)) GCGIO_read__SWIG_1;
SwigExternC!(uint function(void* jarg1, void* jarg2)) GCGIO_canRead;
SwigExternC!(void function(void* jarg1, void* jarg2, void* jarg3)) GCGIO_write;
SwigExternC!(void* function(void* jarg1)) GCGIO_filter;
SwigExternC!(void* function(void* objectRef)) GCGIO_Upcast;
